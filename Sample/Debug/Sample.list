
C:\Git\miniDICE-L4\Sample\Debug\Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acd0  0800acd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  20000000  0800acd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e68  2000012c  0800ae04  0002012c  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  20000f94  0800ae04  00020f94  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d3fd  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008d57  00000000  00000000  0005d559  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001820  00000000  00000000  000662b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001668  00000000  00000000  00067ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ea34  00000000  00000000  00069138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007576  00000000  00000000  00077b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007f0e2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000545c  00000000  00000000  0007f160  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002e86  00000000  00000000  000845bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000012c 	.word	0x2000012c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa7c 	.word	0x0800aa7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000130 	.word	0x20000130
 80001cc:	0800aa7c 	.word	0x0800aa7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b97a 	b.w	80005a0 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	468c      	mov	ip, r1
 80002ca:	460d      	mov	r5, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	9e08      	ldr	r6, [sp, #32]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d151      	bne.n	8000378 <__udivmoddi4+0xb4>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d96d      	bls.n	80003b6 <__udivmoddi4+0xf2>
 80002da:	fab2 fe82 	clz	lr, r2
 80002de:	f1be 0f00 	cmp.w	lr, #0
 80002e2:	d00b      	beq.n	80002fc <__udivmoddi4+0x38>
 80002e4:	f1ce 0c20 	rsb	ip, lr, #32
 80002e8:	fa01 f50e 	lsl.w	r5, r1, lr
 80002ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f4:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f8:	fa00 f40e 	lsl.w	r4, r0, lr
 80002fc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	fbbc f8fa 	udiv	r8, ip, sl
 8000306:	fa1f f987 	uxth.w	r9, r7
 800030a:	fb0a cc18 	mls	ip, sl, r8, ip
 800030e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000312:	fb08 f309 	mul.w	r3, r8, r9
 8000316:	42ab      	cmp	r3, r5
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x6c>
 800031a:	19ed      	adds	r5, r5, r7
 800031c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000320:	f080 8123 	bcs.w	800056a <__udivmoddi4+0x2a6>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f240 8120 	bls.w	800056a <__udivmoddi4+0x2a6>
 800032a:	f1a8 0802 	sub.w	r8, r8, #2
 800032e:	443d      	add	r5, r7
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb5 f0fa 	udiv	r0, r5, sl
 8000338:	fb0a 5510 	mls	r5, sl, r0, r5
 800033c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000340:	fb00 f909 	mul.w	r9, r0, r9
 8000344:	45a1      	cmp	r9, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x98>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 810a 	bcs.w	8000566 <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8107 	bls.w	8000566 <__udivmoddi4+0x2a2>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	eba4 0409 	sub.w	r4, r4, r9
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	2100      	movs	r1, #0
 8000366:	2e00      	cmp	r6, #0
 8000368:	d061      	beq.n	800042e <__udivmoddi4+0x16a>
 800036a:	fa24 f40e 	lsr.w	r4, r4, lr
 800036e:	2300      	movs	r3, #0
 8000370:	6034      	str	r4, [r6, #0]
 8000372:	6073      	str	r3, [r6, #4]
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	428b      	cmp	r3, r1
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0xc8>
 800037c:	2e00      	cmp	r6, #0
 800037e:	d054      	beq.n	800042a <__udivmoddi4+0x166>
 8000380:	2100      	movs	r1, #0
 8000382:	e886 0021 	stmia.w	r6, {r0, r5}
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	f040 808e 	bne.w	80004b2 <__udivmoddi4+0x1ee>
 8000396:	42ab      	cmp	r3, r5
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xdc>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2d0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb65 0503 	sbc.w	r5, r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	46ac      	mov	ip, r5
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d03f      	beq.n	800042e <__udivmoddi4+0x16a>
 80003ae:	e886 1010 	stmia.w	r6, {r4, ip}
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b912      	cbnz	r2, 80003be <__udivmoddi4+0xfa>
 80003b8:	2701      	movs	r7, #1
 80003ba:	fbb7 f7f2 	udiv	r7, r7, r2
 80003be:	fab7 fe87 	clz	lr, r7
 80003c2:	f1be 0f00 	cmp.w	lr, #0
 80003c6:	d134      	bne.n	8000432 <__udivmoddi4+0x16e>
 80003c8:	1beb      	subs	r3, r5, r7
 80003ca:	0c3a      	lsrs	r2, r7, #16
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d6:	0c25      	lsrs	r5, r4, #16
 80003d8:	fb02 3318 	mls	r3, r2, r8, r3
 80003dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e0:	fb0c f308 	mul.w	r3, ip, r8
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x134>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x132>
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	f200 80d1 	bhi.w	8000598 <__udivmoddi4+0x2d4>
 80003f6:	4680      	mov	r8, r0
 80003f8:	1aed      	subs	r5, r5, r3
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000400:	fb02 5510 	mls	r5, r2, r0, r5
 8000404:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000408:	fb0c fc00 	mul.w	ip, ip, r0
 800040c:	45a4      	cmp	ip, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x15c>
 8000410:	19e4      	adds	r4, r4, r7
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x15a>
 8000418:	45a4      	cmp	ip, r4
 800041a:	f200 80b8 	bhi.w	800058e <__udivmoddi4+0x2ca>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 040c 	sub.w	r4, r4, ip
 8000424:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000428:	e79d      	b.n	8000366 <__udivmoddi4+0xa2>
 800042a:	4631      	mov	r1, r6
 800042c:	4630      	mov	r0, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1ce 0420 	rsb	r4, lr, #32
 8000436:	fa05 f30e 	lsl.w	r3, r5, lr
 800043a:	fa07 f70e 	lsl.w	r7, r7, lr
 800043e:	fa20 f804 	lsr.w	r8, r0, r4
 8000442:	0c3a      	lsrs	r2, r7, #16
 8000444:	fa25 f404 	lsr.w	r4, r5, r4
 8000448:	ea48 0803 	orr.w	r8, r8, r3
 800044c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000450:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000454:	fb02 4411 	mls	r4, r2, r1, r4
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000460:	fb01 f30c 	mul.w	r3, r1, ip
 8000464:	42ab      	cmp	r3, r5
 8000466:	fa00 f40e 	lsl.w	r4, r0, lr
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1bc>
 800046c:	19ed      	adds	r5, r5, r7
 800046e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000472:	f080 808a 	bcs.w	800058a <__udivmoddi4+0x2c6>
 8000476:	42ab      	cmp	r3, r5
 8000478:	f240 8087 	bls.w	800058a <__udivmoddi4+0x2c6>
 800047c:	3902      	subs	r1, #2
 800047e:	443d      	add	r5, r7
 8000480:	1aeb      	subs	r3, r5, r3
 8000482:	fa1f f588 	uxth.w	r5, r8
 8000486:	fbb3 f0f2 	udiv	r0, r3, r2
 800048a:	fb02 3310 	mls	r3, r2, r0, r3
 800048e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000492:	fb00 f30c 	mul.w	r3, r0, ip
 8000496:	42ab      	cmp	r3, r5
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x1e6>
 800049a:	19ed      	adds	r5, r5, r7
 800049c:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a0:	d26f      	bcs.n	8000582 <__udivmoddi4+0x2be>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d96d      	bls.n	8000582 <__udivmoddi4+0x2be>
 80004a6:	3802      	subs	r0, #2
 80004a8:	443d      	add	r5, r7
 80004aa:	1aeb      	subs	r3, r5, r3
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	e78f      	b.n	80003d2 <__udivmoddi4+0x10e>
 80004b2:	f1c1 0720 	rsb	r7, r1, #32
 80004b6:	fa22 f807 	lsr.w	r8, r2, r7
 80004ba:	408b      	lsls	r3, r1
 80004bc:	fa05 f401 	lsl.w	r4, r5, r1
 80004c0:	ea48 0303 	orr.w	r3, r8, r3
 80004c4:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004cc:	40fd      	lsrs	r5, r7
 80004ce:	ea4e 0e04 	orr.w	lr, lr, r4
 80004d2:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004da:	fb0c 5519 	mls	r5, ip, r9, r5
 80004de:	fa1f f883 	uxth.w	r8, r3
 80004e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e6:	fb09 f408 	mul.w	r4, r9, r8
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	fa02 f201 	lsl.w	r2, r2, r1
 80004f0:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x244>
 80004f6:	18ed      	adds	r5, r5, r3
 80004f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004fc:	d243      	bcs.n	8000586 <__udivmoddi4+0x2c2>
 80004fe:	42ac      	cmp	r4, r5
 8000500:	d941      	bls.n	8000586 <__udivmoddi4+0x2c2>
 8000502:	f1a9 0902 	sub.w	r9, r9, #2
 8000506:	441d      	add	r5, r3
 8000508:	1b2d      	subs	r5, r5, r4
 800050a:	fa1f fe8e 	uxth.w	lr, lr
 800050e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000512:	fb0c 5510 	mls	r5, ip, r0, r5
 8000516:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800051a:	fb00 f808 	mul.w	r8, r0, r8
 800051e:	45a0      	cmp	r8, r4
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x26e>
 8000522:	18e4      	adds	r4, r4, r3
 8000524:	f100 35ff 	add.w	r5, r0, #4294967295
 8000528:	d229      	bcs.n	800057e <__udivmoddi4+0x2ba>
 800052a:	45a0      	cmp	r8, r4
 800052c:	d927      	bls.n	800057e <__udivmoddi4+0x2ba>
 800052e:	3802      	subs	r0, #2
 8000530:	441c      	add	r4, r3
 8000532:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000536:	eba4 0408 	sub.w	r4, r4, r8
 800053a:	fba0 8902 	umull	r8, r9, r0, r2
 800053e:	454c      	cmp	r4, r9
 8000540:	46c6      	mov	lr, r8
 8000542:	464d      	mov	r5, r9
 8000544:	d315      	bcc.n	8000572 <__udivmoddi4+0x2ae>
 8000546:	d012      	beq.n	800056e <__udivmoddi4+0x2aa>
 8000548:	b156      	cbz	r6, 8000560 <__udivmoddi4+0x29c>
 800054a:	ebba 030e 	subs.w	r3, sl, lr
 800054e:	eb64 0405 	sbc.w	r4, r4, r5
 8000552:	fa04 f707 	lsl.w	r7, r4, r7
 8000556:	40cb      	lsrs	r3, r1
 8000558:	431f      	orrs	r7, r3
 800055a:	40cc      	lsrs	r4, r1
 800055c:	6037      	str	r7, [r6, #0]
 800055e:	6074      	str	r4, [r6, #4]
 8000560:	2100      	movs	r1, #0
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	4618      	mov	r0, r3
 8000568:	e6f8      	b.n	800035c <__udivmoddi4+0x98>
 800056a:	4690      	mov	r8, r2
 800056c:	e6e0      	b.n	8000330 <__udivmoddi4+0x6c>
 800056e:	45c2      	cmp	sl, r8
 8000570:	d2ea      	bcs.n	8000548 <__udivmoddi4+0x284>
 8000572:	ebb8 0e02 	subs.w	lr, r8, r2
 8000576:	eb69 0503 	sbc.w	r5, r9, r3
 800057a:	3801      	subs	r0, #1
 800057c:	e7e4      	b.n	8000548 <__udivmoddi4+0x284>
 800057e:	4628      	mov	r0, r5
 8000580:	e7d7      	b.n	8000532 <__udivmoddi4+0x26e>
 8000582:	4640      	mov	r0, r8
 8000584:	e791      	b.n	80004aa <__udivmoddi4+0x1e6>
 8000586:	4681      	mov	r9, r0
 8000588:	e7be      	b.n	8000508 <__udivmoddi4+0x244>
 800058a:	4601      	mov	r1, r0
 800058c:	e778      	b.n	8000480 <__udivmoddi4+0x1bc>
 800058e:	3802      	subs	r0, #2
 8000590:	443c      	add	r4, r7
 8000592:	e745      	b.n	8000420 <__udivmoddi4+0x15c>
 8000594:	4608      	mov	r0, r1
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xe6>
 8000598:	f1a8 0802 	sub.w	r8, r8, #2
 800059c:	443d      	add	r5, r7
 800059e:	e72b      	b.n	80003f8 <__udivmoddi4+0x134>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_Init+0x28>)
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x28>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f921 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f808 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f007 ff46 	bl	8008450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_InitTick+0x30>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <HAL_InitTick+0x34>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f93e 	bl	8000866 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 f90e 	bl	8000812 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000064 	.word	0x20000064
 8000604:	10624dd3 	.word	0x10624dd3

08000608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick++;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x18>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a03      	ldr	r2, [pc, #12]	; (8000620 <HAL_IncTick+0x18>)
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000678 	.word	0x20000678

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000678 	.word	0x20000678

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000648:	f7ff ffec 	bl	8000624 <HAL_GetTick>
 800064c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800064e:	bf00      	nop
 8000650:	f7ff ffe8 	bl	8000624 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	1ad2      	subs	r2, r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3f7      	bcc.n	8000650 <HAL_Delay+0x14>
  {
  }
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d6:	4909      	ldr	r1, [pc, #36]	; (80006fc <NVIC_EnableIRQ+0x30>)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	095b      	lsrs	r3, r3, #5
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	f002 021f 	and.w	r2, r2, #31
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e100 	.word	0xe000e100

08000700 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	da0b      	bge.n	800072c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	490d      	ldr	r1, [pc, #52]	; (800074c <NVIC_SetPriority+0x4c>)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	3b04      	subs	r3, #4
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072a:	e009      	b.n	8000740 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	4908      	ldr	r1, [pc, #32]	; (8000750 <NVIC_SetPriority+0x50>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	e000e100 	.word	0xe000e100

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	2201      	movs	r2, #1
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	401a      	ands	r2, r3
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079a:	2101      	movs	r1, #1
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	1e59      	subs	r1, r3, #1
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c8:	d301      	bcc.n	80007ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00f      	b.n	80007ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <SysTick_Config+0x40>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d6:	210f      	movs	r1, #15
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f7ff ff90 	bl	8000700 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_Config+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x40>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff2f 	bl	8000668 <NVIC_SetPriorityGrouping>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff44 	bl	80006b0 <NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff90 	bl	8000754 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5f 	bl	8000700 <NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff37 	bl	80006cc <NVIC_EnableIRQ>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffa2 	bl	80007b8 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d106      	bne.n	800089c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800089a:	e005      	b.n	80008a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f023 0304 	bic.w	r3, r3, #4
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008bc:	f000 f802 	bl	80008c4 <HAL_SYSTICK_Callback>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d005      	beq.n	80008f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2204      	movs	r2, #4
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
        
    status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e027      	b.n	8000946 <HAL_DMA_Abort_IT+0x74>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	f022 020e 	bic.w	r2, r2, #14
 8000904:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	f022 0201 	bic.w	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <HAL_DMA_Abort_IT+0x74>
    {
      hdma->XferAbortCallback(hdma);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	4798      	blx	r3
    } 
  }
  return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000966:	e17f      	b.n	8000c68 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8171 	beq.w	8000c62 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0x40>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d123      	bne.n	80009d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	691a      	ldr	r2, [r3, #16]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	6939      	ldr	r1, [r7, #16]
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0203 	and.w	r2, r3, #3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00b      	beq.n	8000a2c <HAL_GPIO_Init+0xdc>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a20:	2b11      	cmp	r3, #17
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b12      	cmp	r3, #18
 8000a2a:	d130      	bne.n	8000a8e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	f003 0201 	and.w	r2, r3, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d118      	bne.n	8000acc <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	f003 0201 	and.w	r2, r3, #1
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80ac 	beq.w	8000c62 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4a5e      	ldr	r2, [pc, #376]	; (8000c84 <HAL_GPIO_Init+0x334>)
 8000b0c:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <HAL_GPIO_Init+0x334>)
 8000b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	; 0x60
 8000b16:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <HAL_GPIO_Init+0x334>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b22:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <HAL_GPIO_Init+0x338>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	220f      	movs	r2, #15
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b4c:	d025      	beq.n	8000b9a <HAL_GPIO_Init+0x24a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <HAL_GPIO_Init+0x33c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d01f      	beq.n	8000b96 <HAL_GPIO_Init+0x246>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4d      	ldr	r2, [pc, #308]	; (8000c90 <HAL_GPIO_Init+0x340>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d019      	beq.n	8000b92 <HAL_GPIO_Init+0x242>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_GPIO_Init+0x344>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0x23e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4b      	ldr	r2, [pc, #300]	; (8000c98 <HAL_GPIO_Init+0x348>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_Init+0x23a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <HAL_GPIO_Init+0x34c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d007      	beq.n	8000b86 <HAL_GPIO_Init+0x236>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a49      	ldr	r2, [pc, #292]	; (8000ca0 <HAL_GPIO_Init+0x350>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_GPIO_Init+0x232>
 8000b7e:	2306      	movs	r3, #6
 8000b80:	e00c      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b82:	2307      	movs	r3, #7
 8000b84:	e00a      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b86:	2305      	movs	r3, #5
 8000b88:	e008      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e004      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x24c>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	f002 0203 	and.w	r2, r2, #3
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	4093      	lsls	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bac:	4936      	ldr	r1, [pc, #216]	; (8000c88 <HAL_GPIO_Init+0x338>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bba:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c5c:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_GPIO_Init+0x354>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae78 	bne.w	8000968 <HAL_GPIO_Init+0x18>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000800 	.word	0x48000800
 8000c94:	48000c00 	.word	0x48000c00
 8000c98:	48001000 	.word	0x48001000
 8000c9c:	48001400 	.word	0x48001400
 8000ca0:	48001800 	.word	0x48001800
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b08f      	sub	sp, #60	; 0x3c
 8000cdc:	af0a      	add	r7, sp, #40	; 0x28
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e10d      	b.n	8000f0a <HAL_PCD_Init+0x232>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f007 ff22 	bl	8008b4c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fa05 	bl	8005124 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	687e      	ldr	r6, [r7, #4]
 8000d22:	466d      	mov	r5, sp
 8000d24:	f106 0410 	add.w	r4, r6, #16
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d38:	1d33      	adds	r3, r6, #4
 8000d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f004 f9c2 	bl	80050c6 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 f9fc 	bl	8005146 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e04c      	b.n	8000dee <HAL_PCD_Init+0x116>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	333d      	adds	r3, #61	; 0x3d
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	b2d8      	uxtb	r0, r3
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	333c      	adds	r3, #60	; 0x3c
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	b298      	uxth	r0, r3
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	3342      	adds	r3, #66	; 0x42
 8000d94:	4602      	mov	r2, r0
 8000d96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	333f      	adds	r3, #63	; 0x3f
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0;
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	3344      	adds	r3, #68	; 0x44
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0;
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	3348      	adds	r3, #72	; 0x48
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	3350      	adds	r3, #80	; 0x50
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8ad      	bhi.n	8000d54 <HAL_PCD_Init+0x7c>
  }
  
  for (index = 0; index < 15 ; index++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e052      	b.n	8000ea4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f203 13e1 	addw	r3, r3, #481	; 0x1e1
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	b2d8      	uxtb	r0, r3
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	b298      	uxth	r0, r3
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3342      	adds	r3, #66	; 0x42
 8000e42:	4602      	mov	r2, r0
 8000e44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	f203 13e3 	addw	r3, r3, #483	; 0x1e3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0;
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0;
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  for (index = 0; index < 15 ; index++)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b0e      	cmp	r3, #14
 8000ea8:	d9a9      	bls.n	8000dfe <HAL_PCD_Init+0x126>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	687e      	ldr	r6, [r7, #4]
 8000eb2:	466d      	mov	r5, sp
 8000eb4:	f106 0410 	add.w	r4, r6, #16
 8000eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ec8:	1d33      	adds	r3, r6, #4
 8000eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f004 f961 	bl	8005194 <USB_DevInit>

  hpcd->USB_Address = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  hpcd->State= HAL_PCD_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_PCD_Init+0x218>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 f84a 	bl	8001f84 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d102      	bne.n	8000efe <HAL_PCD_Init+0x226>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f001 f867 	bl	8001fcc <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 f882 	bl	800600c <USB_DevDisconnect>
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f12 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_PCD_Start+0x16>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e012      	b.n	8000f4e <HAL_PCD_Start+0x3c>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 f852 	bl	8005fde <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 f8df 	bl	8005102 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_PCD_Stop>:
  * @brief  Stop The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_PCD_Stop+0x16>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e017      	b.n	8000f9c <HAL_PCD_Stop+0x46>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 f8d3 	bl	8005124 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 ffc1 	bl	8005f0a <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 f83d 	bl	800600c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	623b      	str	r3, [r7, #32]
  uint32_t index = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 80000000;
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_PCD_IRQHandler+0x1d8>)
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 f8c0 	bl	800615c <USB_GetMode>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 850c 	bne.w	80019fc <HAL_PCD_IRQHandler+0xa58>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 f826 	bl	800603a <USB_ReadInterrupts>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 8502 	beq.w	80019fa <HAL_PCD_IRQHandler+0xa56>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 f81d 	bl	800603a <USB_ReadInterrupts>
 8001000:	4603      	mov	r3, r0
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d107      	bne.n	800101a <HAL_PCD_IRQHandler+0x76>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	6952      	ldr	r2, [r2, #20]
 8001014:	f002 0202 	and.w	r2, r2, #2
 8001018:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f005 f80b 	bl	800603a <USB_ReadInterrupts>
 8001024:	4603      	mov	r3, r0
 8001026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800102e:	f040 8135 	bne.w	800129c <HAL_PCD_IRQHandler+0x2f8>
    {
      epnum = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f005 f812 	bl	8006064 <USB_ReadDevAllOutEpInterrupt>
 8001040:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8001042:	e127      	b.n	8001294 <HAL_PCD_IRQHandler+0x2f0>
      {
        if (ep_intr & 0x1)
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 811c 	beq.w	8001288 <HAL_PCD_IRQHandler+0x2e4>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f005 f832 	bl	80060c4 <USB_ReadDevOutEPInterrupt>
 8001060:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80ee 	beq.w	800124a <HAL_PCD_IRQHandler+0x2a6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	015a      	lsls	r2, r3, #5
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	4413      	add	r3, r2
 8001076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800107a:	461a      	mov	r2, r3
 800107c:	2301      	movs	r3, #1
 800107e:	6093      	str	r3, [r2, #8]
            
            /* setup/out transaction management for Core ID 310A */
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_PCD_IRQHandler+0x1dc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d17c      	bne.n	8001184 <HAL_PCD_IRQHandler+0x1e0>
            {
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d162      	bne.n	8001160 <HAL_PCD_IRQHandler+0x1bc>
                {
                  if (hpcd->Init.dma_enable == 1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d13c      	bne.n	800111c <HAL_PCD_IRQHandler+0x178>
                  {
                  	hpcd->OUT_ep[epnum].xfer_count =
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80010b4:	681a      	ldr	r2, [r3, #0]
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	0159      	lsls	r1, r3, #5
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	440b      	add	r3, r1
 80010be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80010c8:	1ad1      	subs	r1, r2, r3
                  	hpcd->OUT_ep[epnum].xfer_count =
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4403      	add	r3, r0
 80010d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010dc:	6019      	str	r1, [r3, #0]

                    hpcd->OUT_ep[epnum].xfer_buff +=
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80010f0:	6819      	ldr	r1, [r3, #0]
                                                  hpcd->OUT_ep[epnum].maxpacket;
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4403      	add	r3, r0
 8001100:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001104:	681b      	ldr	r3, [r3, #0]
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8001106:	4419      	add	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4403      	add	r3, r0
 8001116:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800111a:	6019      	str	r1, [r3, #0]
                  }

                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f007 fd76 	bl	8008c14 <HAL_PCD_DataOutStageCallback>
              
              if(hpcd->Init.dma_enable == 1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d117      	bne.n	8001160 <HAL_PCD_IRQHandler+0x1bc>
              {
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <HAL_PCD_IRQHandler+0x1bc>
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d108      	bne.n	8001160 <HAL_PCD_IRQHandler+0x1bc>
                  {
                    /* this is ZLP, so prepare EP0 for next setup */
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001158:	461a      	mov	r2, r3
 800115a:	2101      	movs	r1, #1
 800115c:	f005 f842 	bl	80061e4 <USB_EP0_OutStart>
                  }
                }
              }

              /* Clear the SetPktRcvd flag*/
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001166:	461a      	mov	r2, r3
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	6093      	str	r3, [r2, #8]
 800117a:	e066      	b.n	800124a <HAL_PCD_IRQHandler+0x2a6>
 800117c:	04c4b400 	.word	0x04c4b400
 8001180:	4f54310a 	.word	0x4f54310a
            }
            else
            {
              if (hpcd->Init.dma_enable == 1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d13c      	bne.n	8001206 <HAL_PCD_IRQHandler+0x262>
              {
                hpcd->OUT_ep[epnum].xfer_count =
                                               hpcd->OUT_ep[epnum].maxpacket -
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800119e:	681a      	ldr	r2, [r3, #0]
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	0159      	lsls	r1, r3, #5
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 80011b2:	1ad1      	subs	r1, r2, r3
                hpcd->OUT_ep[epnum].xfer_count =
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4403      	add	r3, r0
 80011c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011c6:	6019      	str	r1, [r3, #0]
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4403      	add	r3, r0
 80011ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4419      	add	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	4613      	mov	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a9b      	subs	r3, r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4403      	add	r3, r0
 8001200:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001204:	6019      	str	r1, [r3, #0]
              }
              
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f007 fd01 	bl	8008c14 <HAL_PCD_DataOutStageCallback>
              
              if(hpcd->Init.dma_enable == 1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d117      	bne.n	800124a <HAL_PCD_IRQHandler+0x2a6>
              {
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	2b00      	cmp	r3, #0
 800121e:	d114      	bne.n	800124a <HAL_PCD_IRQHandler+0x2a6>
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HAL_PCD_IRQHandler+0x2a6>
                {
                  /* this is ZLP, so prepare EP0 for next setup */
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001242:	461a      	mov	r2, r3
 8001244:	2101      	movs	r1, #1
 8001246:	f004 ffcd 	bl	80061e4 <USB_EP0_OutStart>
                }              
              }
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_PCD_IRQHandler+0x2c8>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f007 fccb 	bl	8008bf0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	4413      	add	r3, r2
 8001262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001266:	461a      	mov	r2, r3
 8001268:	2308      	movs	r3, #8
 800126a:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d008      	beq.n	8001288 <HAL_PCD_IRQHandler+0x2e4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	015a      	lsls	r2, r3, #5
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	4413      	add	r3, r2
 800127e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001282:	461a      	mov	r2, r3
 8001284:	2310      	movs	r3, #16
 8001286:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	3301      	adds	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f aed4 	bne.w	8001044 <HAL_PCD_IRQHandler+0xa0>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 feca 	bl	800603a <USB_ReadInterrupts>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012b0:	f040 80c3 	bne.w	800143a <HAL_PCD_IRQHandler+0x496>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 feeb 	bl	8006094 <USB_ReadDevAllInEpInterrupt>
 80012be:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 80012c4:	e0b5      	b.n	8001432 <HAL_PCD_IRQHandler+0x48e>
      {
        if (ep_intr & 0x1) /* In ITR */
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80aa 	beq.w	8001426 <HAL_PCD_IRQHandler+0x482>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 ff0d 	bl	80060fc <USB_ReadDevInEPInterrupt>
 80012e2:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d05a      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x400>
          {
            fifoemptymsk = 0x1 << epnum;
 80012ee:	2201      	movs	r2, #1
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012fe:	4619      	mov	r1, r3
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4013      	ands	r3, r2
 800130e:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	015a      	lsls	r2, r3, #5
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	4413      	add	r3, r2
 8001318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800131c:	461a      	mov	r2, r3
 800131e:	2301      	movs	r3, #1
 8001320:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d11b      	bne.n	8001362 <HAL_PCD_IRQHandler+0x3be>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3348      	adds	r3, #72	; 0x48
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	3344      	adds	r3, #68	; 0x44
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4419      	add	r1, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4403      	add	r3, r0
 800135e:	3348      	adds	r3, #72	; 0x48
 8001360:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f007 fc6e 	bl	8008c4a <HAL_PCD_DataInStageCallback>
            
            if (hpcd->Init.dma_enable == 1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d116      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x400>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d113      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x400>
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3350      	adds	r3, #80	; 0x50
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x400>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800139c:	461a      	mov	r2, r3
 800139e:	2101      	movs	r1, #1
 80013a0:	f004 ff20 	bl	80061e4 <USB_EP0_OutStart>
              }
            }           
          }
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x41c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <HAL_PCD_IRQHandler+0x438>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d6:	461a      	mov	r2, r3
 80013d8:	2310      	movs	r3, #16
 80013da:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x454>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f2:	461a      	mov	r2, r3
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x470>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140e:	461a      	mov	r2, r3
 8001410:	2302      	movs	r3, #2
 8001412:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_PCD_IRQHandler+0x482>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800141e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fcc4 	bl	8001dae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	3301      	adds	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f af46 	bne.w	80012c6 <HAL_PCD_IRQHandler+0x322>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fdfb 	bl	800603a <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800144e:	d123      	bne.n	8001498 <HAL_PCD_IRQHandler+0x4f4>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001456:	461a      	mov	r2, r3
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6053      	str	r3, [r2, #4]
      
      if(hpcd->LPM_State == LPM_L1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_PCD_IRQHandler+0x4de>
      {
        hpcd->LPM_State = LPM_L0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f007 fef2 	bl	8009264 <HAL_PCDEx_LPM_Callback>
 8001480:	e002      	b.n	8001488 <HAL_PCD_IRQHandler+0x4e4>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f007 fc54 	bl	8008d30 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	6952      	ldr	r2, [r2, #20]
 8001492:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001496:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fdcc 	bl	800603a <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ac:	d112      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x530>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x520>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f007 fc0e 	bl	8008ce0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6952      	ldr	r2, [r2, #20]
 80014ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014d2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fdae 	bl	800603a <USB_ReadInterrupts>
 80014de:	4603      	mov	r3, r0
 80014e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014e8:	d121      	bne.n	800152e <HAL_PCD_IRQHandler+0x58a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	6952      	ldr	r2, [r2, #20]
 80014f4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80014f8:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_PCD_IRQHandler+0x584>
      {   
        hpcd->LPM_State = LPM_L1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	f003 020f 	and.w	r2, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800151e:	2101      	movs	r1, #1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f007 fe9f 	bl	8009264 <HAL_PCDEx_LPM_Callback>
 8001526:	e002      	b.n	800152e <HAL_PCD_IRQHandler+0x58a>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f007 fbd9 	bl	8008ce0 <HAL_PCD_SuspendCallback>
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 fd81 	bl	800603a <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001542:	f040 8091 	bne.w	8001668 <HAL_PCD_IRQHandler+0x6c4>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154c:	461a      	mov	r2, r3
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f003 ff44 	bl	80053f0 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	e014      	b.n	8001598 <HAL_PCD_IRQHandler+0x5f4>
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157a:	461a      	mov	r2, r3
 800157c:	23ff      	movs	r3, #255	; 0xff
 800157e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158c:	461a      	mov	r2, r3
 800158e:	23ff      	movs	r3, #255	; 0xff
 8001590:	6093      	str	r3, [r2, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	3301      	adds	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	429a      	cmp	r2, r3
 80015a0:	d8e5      	bhi.n	800156e <HAL_PCD_IRQHandler+0x5ca>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a8:	461a      	mov	r2, r3
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	461a      	mov	r2, r3
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015c4:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d018      	beq.n	8001600 <HAL_PCD_IRQHandler+0x65c>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d4:	461a      	mov	r2, r3
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e0:	f043 030b 	orr.w	r3, r3, #11
 80015e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ee:	461a      	mov	r2, r3
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	f043 030b 	orr.w	r3, r3, #11
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	e015      	b.n	800162c <HAL_PCD_IRQHandler+0x688>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001606:	461a      	mov	r2, r3
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f043 030b 	orr.w	r3, r3, #11
 8001614:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	461a      	mov	r2, r3
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f043 030b 	orr.w	r3, r3, #11
 800162a:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001632:	461a      	mov	r2, r3
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001640:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	b2d9      	uxtb	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001652:	461a      	mov	r2, r3
 8001654:	f004 fdc6 	bl	80061e4 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6952      	ldr	r2, [r2, #20]
 8001662:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001666:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fce4 	bl	800603a <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167c:	f040 80c2 	bne.w	8001804 <HAL_PCD_IRQHandler+0x860>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fd77 	bl	8006178 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	68d2      	ldr	r2, [r2, #12]
 8001694:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001698:	60da      	str	r2, [r3, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	60da      	str	r2, [r3, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80016a6:	f001 fabf 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 80016aa:	60f8      	str	r0, [r7, #12]
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <HAL_PCD_IRQHandler+0x8f8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d90c      	bls.n	80016ce <HAL_PCD_IRQHandler+0x72a>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <HAL_PCD_IRQHandler+0x8fc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d808      	bhi.n	80016ce <HAL_PCD_IRQHandler+0x72a>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	e08f      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 15000000)&&(hclk < 16000000))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a73      	ldr	r2, [pc, #460]	; (80018a0 <HAL_PCD_IRQHandler+0x8fc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d90c      	bls.n	80016f0 <HAL_PCD_IRQHandler+0x74c>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4a72      	ldr	r2, [pc, #456]	; (80018a4 <HAL_PCD_IRQHandler+0x900>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d808      	bhi.n	80016f0 <HAL_PCD_IRQHandler+0x74c>
      {
        /* hclk Clock Range between 15-16 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	68d2      	ldr	r2, [r2, #12]
 80016e8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	e07e      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 16000000)&&(hclk < 17200000))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a6c      	ldr	r2, [pc, #432]	; (80018a4 <HAL_PCD_IRQHandler+0x900>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d90c      	bls.n	8001712 <HAL_PCD_IRQHandler+0x76e>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a6b      	ldr	r2, [pc, #428]	; (80018a8 <HAL_PCD_IRQHandler+0x904>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d808      	bhi.n	8001712 <HAL_PCD_IRQHandler+0x76e>
      {
        /* hclk Clock Range between 16-17.2 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	e06d      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a64      	ldr	r2, [pc, #400]	; (80018a8 <HAL_PCD_IRQHandler+0x904>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d90c      	bls.n	8001734 <HAL_PCD_IRQHandler+0x790>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a63      	ldr	r2, [pc, #396]	; (80018ac <HAL_PCD_IRQHandler+0x908>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d808      	bhi.n	8001734 <HAL_PCD_IRQHandler+0x790>
      {
        /* hclk Clock Range between 17.2-18.5 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	68d2      	ldr	r2, [r2, #12]
 800172c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	e05c      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <HAL_PCD_IRQHandler+0x908>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d90c      	bls.n	8001756 <HAL_PCD_IRQHandler+0x7b2>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a5c      	ldr	r2, [pc, #368]	; (80018b0 <HAL_PCD_IRQHandler+0x90c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d808      	bhi.n	8001756 <HAL_PCD_IRQHandler+0x7b2>
      {
        /* hclk Clock Range between 18.5-20 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	68d2      	ldr	r2, [r2, #12]
 800174e:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	e04b      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_PCD_IRQHandler+0x90c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d90c      	bls.n	8001778 <HAL_PCD_IRQHandler+0x7d4>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_PCD_IRQHandler+0x910>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d808      	bhi.n	8001778 <HAL_PCD_IRQHandler+0x7d4>
      {
        /* hclk Clock Range between 20-21.8 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	68d2      	ldr	r2, [r2, #12]
 8001770:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	e03a      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a4e      	ldr	r2, [pc, #312]	; (80018b4 <HAL_PCD_IRQHandler+0x910>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d90c      	bls.n	800179a <HAL_PCD_IRQHandler+0x7f6>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <HAL_PCD_IRQHandler+0x914>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d808      	bhi.n	800179a <HAL_PCD_IRQHandler+0x7f6>
      {
        /* hclk Clock Range between 21.8-24 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	68d2      	ldr	r2, [r2, #12]
 8001792:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	e029      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 24000000)&&(hclk < 27700000))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <HAL_PCD_IRQHandler+0x914>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d90c      	bls.n	80017bc <HAL_PCD_IRQHandler+0x818>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a45      	ldr	r2, [pc, #276]	; (80018bc <HAL_PCD_IRQHandler+0x918>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d808      	bhi.n	80017bc <HAL_PCD_IRQHandler+0x818>
      {
        /* hclk Clock Range between 24-27.7 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	68d2      	ldr	r2, [r2, #12]
 80017b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	e018      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 27700000)&&(hclk < 32000000))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <HAL_PCD_IRQHandler+0x918>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d90c      	bls.n	80017de <HAL_PCD_IRQHandler+0x83a>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a3e      	ldr	r2, [pc, #248]	; (80018c0 <HAL_PCD_IRQHandler+0x91c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d808      	bhi.n	80017de <HAL_PCD_IRQHandler+0x83a>
      {
        /* hclk Clock Range between 27.7-32 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	68d2      	ldr	r2, [r2, #12]
 80017d6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	e007      	b.n	80017ee <HAL_PCD_IRQHandler+0x84a>
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	68d2      	ldr	r2, [r2, #12]
 80017e8:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80017ec:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f007 fa53 	bl	8008c9a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	6952      	ldr	r2, [r2, #20]
 80017fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001802:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fc16 	bl	800603a <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	d174      	bne.n	8001902 <HAL_PCD_IRQHandler+0x95e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	6992      	ldr	r2, [r2, #24]
 8001822:	f022 0210 	bic.w	r2, r2, #16
 8001826:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 020f 	and.w	r2, r3, #15
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	0c5b      	lsrs	r3, r3, #17
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	2b02      	cmp	r3, #2
 8001850:	d138      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x920>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d049      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x94e>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	b29b      	uxth	r3, r3
 8001868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6a38      	ldr	r0, [r7, #32]
 8001872:	f004 fa42 	bl	8005cfa <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001882:	441a      	add	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001894:	441a      	add	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	e02a      	b.n	80018f2 <HAL_PCD_IRQHandler+0x94e>
 800189c:	00d8acbf 	.word	0x00d8acbf
 80018a0:	00e4e1bf 	.word	0x00e4e1bf
 80018a4:	00f423ff 	.word	0x00f423ff
 80018a8:	0106737f 	.word	0x0106737f
 80018ac:	011a499f 	.word	0x011a499f
 80018b0:	01312cff 	.word	0x01312cff
 80018b4:	014ca43f 	.word	0x014ca43f
 80018b8:	016e35ff 	.word	0x016e35ff
 80018bc:	01a6ab1f 	.word	0x01a6ab1f
 80018c0:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	0c5b      	lsrs	r3, r3, #17
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d110      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x94e>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80018d6:	2208      	movs	r2, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	6a38      	ldr	r0, [r7, #32]
 80018dc:	f004 fa0d 	bl	8005cfa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ec:	441a      	add	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	6992      	ldr	r2, [r2, #24]
 80018fc:	f042 0210 	orr.w	r2, r2, #16
 8001900:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fb97 	bl	800603a <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d10a      	bne.n	800192c <HAL_PCD_IRQHandler+0x988>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f007 f9b1 	bl	8008c7e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	6952      	ldr	r2, [r2, #20]
 8001926:	f002 0208 	and.w	r2, r2, #8
 800192a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fb82 	bl	800603a <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001940:	d10d      	bne.n	800195e <HAL_PCD_IRQHandler+0x9ba>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f007 fa2d 	bl	8008da8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	6952      	ldr	r2, [r2, #20]
 8001958:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fb69 	bl	800603a <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001972:	d10d      	bne.n	8001990 <HAL_PCD_IRQHandler+0x9ec>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f007 fa02 	bl	8008d84 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	6952      	ldr	r2, [r2, #20]
 800198a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800198e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fb50 	bl	800603a <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d10a      	bne.n	80019bc <HAL_PCD_IRQHandler+0xa18>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f007 fa10 	bl	8008dcc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	6952      	ldr	r2, [r2, #20]
 80019b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019ba:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fb3a 	bl	800603a <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d115      	bne.n	80019fc <HAL_PCD_IRQHandler+0xa58>
    {
      temp = hpcd->Instance->GOTGINT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_PCD_IRQHandler+0xa44>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f007 fa00 	bl	8008de8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	6851      	ldr	r1, [r2, #4]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	e000      	b.n	80019fc <HAL_PCD_IRQHandler+0xa58>
      return;
 80019fa:	bf00      	nop
    }
  }
}
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_PCD_SetAddress+0x1a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e013      	b.n	8001a46 <HAL_PCD_SetAddress+0x42>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  hpcd->USB_Address = address;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 faab 	bl	8005f92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	4608      	mov	r0, r1
 8001a58:	4611      	mov	r1, r2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	70fb      	strb	r3, [r7, #3]
 8001a60:	460b      	mov	r3, r1
 8001a62:	803b      	strh	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 8001a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0c      	bge.n	8001a92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	3338      	adds	r3, #56	; 0x38
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e00b      	b.n	8001aaa <HAL_PCD_EP_Open+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	09db      	lsrs	r3, r3, #7
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001ac6:	883a      	ldrh	r2, [r7, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	78ba      	ldrb	r2, [r7, #2]
 8001ad0:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_EP_Open+0x92>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e00e      	b.n	8001afe <HAL_PCD_EP_Open+0xb0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fcde 	bl	80054b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return ret;
 8001afc:	7afb      	ldrb	r3, [r7, #11]

}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	460b      	mov	r3, r1
 8001b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_EP_Receive+0x5e>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e020      	b.n	8001ba6 <HAL_PCD_EP_Receive+0xa0>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  if ((ep_addr & 0x7F) == 0 )
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_PCD_EP_Receive+0x84>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	6979      	ldr	r1, [r7, #20]
 8001b84:	f003 ff44 	bl	8005a10 <USB_EP0StartXfer>
 8001b88:	e008      	b.n	8001b9c <HAL_PCD_EP_Receive+0x96>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	f003 fd14 	bl	80055c4 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	3338      	adds	r3, #56	; 0x38
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_PCD_EP_Transmit+0x5e>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e020      	b.n	8001c4e <HAL_PCD_EP_Transmit+0xa0>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  if ((ep_addr & 0x7F) == 0 )
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_PCD_EP_Transmit+0x84>
  {
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	f003 fef0 	bl	8005a10 <USB_EP0StartXfer>
 8001c30:	e008      	b.n	8001c44 <HAL_PCD_EP_Transmit+0x96>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	f003 fcc0 	bl	80055c4 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 8001c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0c      	bge.n	8001c88 <HAL_PCD_EP_SetStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3338      	adds	r3, #56	; 0x38
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e009      	b.n	8001c9c <HAL_PCD_EP_SetStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	09db      	lsrs	r3, r3, #7
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_EP_SetStall+0x76>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e01e      	b.n	8001d0a <HAL_PCD_EP_SetStall+0xb4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f837 	bl	8005d4e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <HAL_PCD_EP_SetStall+0xaa>
  {
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	b2d9      	uxtb	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f004 fa72 	bl	80061e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 8001d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da0c      	bge.n	8001d44 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	3338      	adds	r3, #56	; 0x38
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3304      	adds	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e009      	b.n	8001d58 <HAL_PCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	09db      	lsrs	r3, r3, #7
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_EP_ClrStall+0x76>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00e      	b.n	8001da6 <HAL_PCD_EP_ClrStall+0x94>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 f84a 	bl	8005e30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
    
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b08a      	sub	sp, #40	; 0x28
 8001db2:	af02      	add	r7, sp, #8
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  int32_t len = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  uint32_t len32b = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t fifoemptymsk = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]

  ep = &hpcd->IN_ep[epnum];
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
  len = ep->xfer_len - ep->xfer_count;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d202      	bcs.n	8001dfe <PCD_WriteEmptyTxFifo+0x50>
  {
    len = ep->maxpacket;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3) / 4;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3303      	adds	r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da00      	bge.n	8001e08 <PCD_WriteEmptyTxFifo+0x5a>
 8001e06:	3303      	adds	r3, #3
 8001e08:	109b      	asrs	r3, r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8001e0c:	e02e      	b.n	8001e6c <PCD_WriteEmptyTxFifo+0xbe>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d202      	bcs.n	8001e2a <PCD_WriteEmptyTxFifo+0x7c>
    {
      len = ep->maxpacket;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da00      	bge.n	8001e34 <PCD_WriteEmptyTxFifo+0x86>
 8001e32:	3303      	adds	r3, #3
 8001e34:	109b      	asrs	r3, r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	b298      	uxth	r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f003 ff1f 	bl	8005c92 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	441a      	add	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d909      	bls.n	8001e96 <PCD_WriteEmptyTxFifo+0xe8>
          ep->xfer_count < ep->xfer_len &&
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d203      	bcs.n	8001e96 <PCD_WriteEmptyTxFifo+0xe8>
            ep->xfer_len != 0)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1bb      	bne.n	8001e0e <PCD_WriteEmptyTxFifo+0x60>
  }
  
  if(len <= 0)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dc10      	bgt.n	8001ebe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = 0x1 << epnum;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eac:	4619      	mov	r1, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	803b      	strh	r3, [r7, #0]
  uint8_t index = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_PCDEx_SetTxFiFo+0x38>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	883a      	ldrh	r2, [r7, #0]
 8001ef4:	0412      	lsls	r2, r2, #16
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
 8001efe:	e029      	b.n	8001f54 <HAL_PCDEx_SetTxFiFo+0x8c>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < (fifo - 1); index++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e00d      	b.n	8001f30 <HAL_PCDEx_SetTxFiFo+0x68>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3340      	adds	r3, #64	; 0x40
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	4413      	add	r3, r2
 8001f28:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < (fifo - 1); index++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbec      	blt.n	8001f14 <HAL_PCDEx_SetTxFiFo+0x4c>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	883a      	ldrh	r2, [r7, #0]
 8001f44:	0412      	lsls	r2, r2, #16
 8001f46:	4610      	mov	r0, r2
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4302      	orrs	r2, r0
 8001f4c:	3340      	adds	r3, #64	; 0x40
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	f043 0303 	orr.w	r3, r3, #3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = ENABLE; 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_PWREx_GetVoltageRange+0x18>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202a:	d12f      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d037      	beq.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203a:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002048:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	2232      	movs	r2, #50	; 0x32
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800205e:	e002      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_PWREx_ControlVoltageScaling+0x62>
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d0f2      	beq.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d110      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e00f      	b.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002098:	d007      	beq.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209a:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}  
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40007000 	.word	0x40007000
 80020bc:	20000064 	.word	0x20000064
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply. 
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020c8:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d2:	6053      	str	r3, [r2, #4]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40007000 	.word	0x40007000

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80db 	beq.w	80022b4 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80020fe:	4ba2      	ldr	r3, [pc, #648]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8084 	bne.w	8002214 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210c:	4b9e      	ldr	r3, [pc, #632]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e35f      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4b97      	ldr	r3, [pc, #604]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_RCC_OscConfig+0x5a>
 8002134:	4b94      	ldr	r3, [pc, #592]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	e005      	b.n	800214a <HAL_RCC_OscConfig+0x66>
 800213e:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214a:	429a      	cmp	r2, r3
 800214c:	d923      	bls.n	8002196 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fdb8 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e340      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002162:	4a89      	ldr	r2, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4986      	ldr	r1, [pc, #536]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002170:	4b85      	ldr	r3, [pc, #532]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002180:	4981      	ldr	r1, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002182:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e022      	b.n	80021dc <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002198:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4979      	ldr	r1, [pc, #484]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80021a4:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b4:	4974      	ldr	r1, [pc, #464]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80021b6:	4b74      	ldr	r3, [pc, #464]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fd7b 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e303      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80021dc:	f000 fc2a 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80021e0:	4601      	mov	r1, r0
 80021e2:	4b69      	ldr	r3, [pc, #420]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ea:	23f0      	movs	r3, #240	; 0xf0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	4a62      	ldr	r2, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x2a8>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	fa21 f303 	lsr.w	r3, r1, r3
 8002208:	4a61      	ldr	r2, [pc, #388]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe f9df 	bl	80005d0 <HAL_InitTick>
 8002212:	e04f      	b.n	80022b4 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800221c:	4a5a      	ldr	r2, [pc, #360]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800221e:	4b5a      	ldr	r3, [pc, #360]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002228:	f7fe f9fc 	bl	8000624 <HAL_GetTick>
 800222c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002230:	f7fe f9f8 	bl	8000624 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e2d0      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002242:	4b51      	ldr	r3, [pc, #324]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224e:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	494b      	ldr	r1, [pc, #300]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226c:	4946      	ldr	r1, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e018      	b.n	80022b4 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002282:	4a41      	ldr	r2, [pc, #260]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002284:	4b40      	ldr	r3, [pc, #256]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228e:	f7fe f9c9 	bl	8000624 <HAL_GetTick>
 8002292:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002296:	f7fe f9c5 	bl	8000624 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e29d      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d07a      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d00b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d10b      	bne.n	80022fc <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d061      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2d0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d15d      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e273      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0x230>
 8002306:	4a20      	ldr	r2, [pc, #128]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002308:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0x26c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x254>
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0x26c>
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe f964 	bl	8000624 <HAL_GetTick>
 800235c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe f960 	bl	8000624 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e238      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_OscConfig+0x2a4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x27c>
 800237e:	e01a      	b.n	80023b6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe f950 	bl	8000624 <HAL_GetTick>
 8002384:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002386:	e00e      	b.n	80023a6 <HAL_RCC_OscConfig+0x2c2>
 8002388:	40021000 	.word	0x40021000
 800238c:	0800abe8 	.word	0x0800abe8
 8002390:	20000064 	.word	0x20000064
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe f946 	bl	8000624 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e21e      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80023a6:	4bb0      	ldr	r3, [pc, #704]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x2b0>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d07f      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80023c2:	4ba9      	ldr	r3, [pc, #676]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ce:	4ba6      	ldr	r3, [pc, #664]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d127      	bne.n	800242a <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023da:	4ba3      	ldr	r3, [pc, #652]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d121      	bne.n	800242a <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e6:	4ba0      	ldr	r3, [pc, #640]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x31a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1f2      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	489a      	ldr	r0, [pc, #616]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002400:	4b99      	ldr	r3, [pc, #612]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8002410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	61bb      	str	r3, [r7, #24]
  return(result);
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	e04b      	b.n	80024c2 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02e      	beq.n	8002490 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002432:	4a8d      	ldr	r2, [pc, #564]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002434:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe f8f1 	bl	8000624 <HAL_GetTick>
 8002442:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe f8ed 	bl	8000624 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1c5      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002458:	4b83      	ldr	r3, [pc, #524]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4880      	ldr	r0, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002466:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6919      	ldr	r1, [r3, #16]
 8002472:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8002476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	613b      	str	r3, [r7, #16]
  return(result);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	6043      	str	r3, [r0, #4]
 800248e:	e018      	b.n	80024c2 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002490:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002492:	4b75      	ldr	r3, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe f8c2 	bl	8000624 <HAL_GetTick>
 80024a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe f8be 	bl	8000624 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e196      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80024b6:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03c      	beq.n	8002548 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01c      	beq.n	8002510 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4a64      	ldr	r2, [pc, #400]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe f89d 	bl	8000624 <HAL_GetTick>
 80024ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe f899 	bl	8000624 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e171      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ef      	beq.n	80024ee <HAL_RCC_OscConfig+0x40a>
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002512:	4b55      	ldr	r3, [pc, #340]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe f880 	bl	8000624 <HAL_GetTick>
 8002524:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe f87c 	bl	8000624 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e154      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800253c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ef      	bne.n	8002528 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a9 	beq.w	80026a8 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
 8002574:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x588>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002592:	4a36      	ldr	r2, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x588>)
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <HAL_RCC_OscConfig+0x588>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe f841 	bl	8000624 <HAL_GetTick>
 80025a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe f83d 	bl	8000624 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e115      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_RCC_OscConfig+0x588>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_RCC_OscConfig+0x4fa>
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025dc:	e024      	b.n	8002628 <HAL_RCC_OscConfig+0x544>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d110      	bne.n	8002608 <HAL_RCC_OscConfig+0x524>
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x544>
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d016      	beq.n	800265e <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fd fff8 	bl	8000624 <HAL_GetTick>
 8002634:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fd fff4 	bl	8000624 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0ca      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x584>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ed      	beq.n	8002638 <HAL_RCC_OscConfig+0x554>
 800265c:	e01a      	b.n	8002694 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fd ffe1 	bl	8000624 <HAL_GetTick>
 8002662:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002664:	e00f      	b.n	8002686 <HAL_RCC_OscConfig+0x5a2>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fd ffd8 	bl	8000624 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0ae      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002686:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ed      	bne.n	8002670 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4a53      	ldr	r2, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800269e:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8098 	beq.w	80027e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b2:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	f000 808f 	beq.w	80027de <HAL_RCC_OscConfig+0x6fa>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d156      	bne.n	8002776 <HAL_RCC_OscConfig+0x692>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4a48      	ldr	r2, [pc, #288]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fd ffa6 	bl	8000624 <HAL_GetTick>
 80026d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fd ffa2 	bl	8000624 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e07a      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x5f8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	493c      	ldr	r1, [pc, #240]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	3b01      	subs	r3, #1
 8002702:	011a      	lsls	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	045b      	lsls	r3, r3, #17
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	055b      	lsls	r3, r3, #21
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	065b      	lsls	r3, r3, #25
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002736:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002738:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002742:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fd ff69 	bl	8000624 <HAL_GetTick>
 8002752:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7fd ff65 	bl	8000624 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e03d      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x672>
 8002774:	e035      	b.n	80027e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002780:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x6c2>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x6c2>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f023 0303 	bic.w	r3, r3, #3
 80027a4:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fd ff35 	bl	8000624 <HAL_GetTick>
 80027ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x6ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fd ff31 	bl	8000624 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x6ec>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e009      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x708>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x6da>
 80027dc:	e001      	b.n	80027e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x700>
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3730      	adds	r7, #48	; 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80027fe:	4b89      	ldr	r3, [pc, #548]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d210      	bcs.n	800282e <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280c:	4985      	ldr	r1, [pc, #532]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0207 	and.w	r2, r3, #7
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0f6      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283a:	497b      	ldr	r1, [pc, #492]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 808e 	beq.w	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002862:	4b71      	ldr	r3, [pc, #452]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0d4      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0c8      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002892:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0bc      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0b4      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	495d      	ldr	r1, [pc, #372]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80028b4:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 0203 	bic.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fd feae 	bl	8000624 <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fd fea6 	bl	8000624 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e098      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80028ea:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d1ee      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xe4>
 80028f6:	e03e      	b.n	8002976 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d112      	bne.n	8002926 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002902:	f7fd fe8f 	bl	8000624 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e081      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_ClockConfig+0x112>
 8002924:	e027      	b.n	8002976 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11d      	bne.n	800296a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fd fe78 	bl	8000624 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e06a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ee      	bne.n	8002930 <HAL_RCC_ClockConfig+0x140>
 8002952:	e010      	b.n	8002976 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fd fe66 	bl	8000624 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e058      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d1ee      	bne.n	8002954 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d910      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002984:	4927      	ldr	r1, [pc, #156]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_ClockConfig+0x234>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0207 	and.w	r2, r3, #7
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e03a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b2:	491d      	ldr	r1, [pc, #116]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d0:	4915      	ldr	r1, [pc, #84]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80029e4:	f000 f826 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029e8:	4601      	mov	r1, r0
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_RCC_ClockConfig+0x238>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f2:	23f0      	movs	r3, #240	; 0xf0
 80029f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_RCC_ClockConfig+0x23c>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	fa21 f303 	lsr.w	r3, r1, r3
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_RCC_ClockConfig+0x240>)
 8002a12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fd fddb 	bl	80005d0 <HAL_InitTick>

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	0800abe8 	.word	0x0800abe8
 8002a30:	20000064 	.word	0x20000064

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b095      	sub	sp, #84	; 0x54
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a3e:	2300      	movs	r3, #0
 8002a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a42:	2300      	movs	r3, #0
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
 8002a46:	2302      	movs	r3, #2
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002a52:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d13c      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002a6a:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d136      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8002a76:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a88:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002a8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa6:	e00f      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab0:	23f0      	movs	r3, #240	; 0xf0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ac8:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1e8>)
 8002aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d113      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002ae2:	e010      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	e007      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d17b      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b24:	2370      	movs	r3, #112	; 0x70
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	623b      	str	r3, [r7, #32]
  return(result);
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d002      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x116>
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d018      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x146>
 8002b48:	e02f      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002b4a:	4a35      	ldr	r2, [pc, #212]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002b54:	68d2      	ldr	r2, [r2, #12]
 8002b56:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002b5a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002b5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	fa92 f2a2 	rbit	r2, r2
 8002b66:	61ba      	str	r2, [r7, #24]
  return(result);
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	fa21 f202 	lsr.w	r2, r1, r2
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b78:	e02f      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002b8a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	fa92 f2a2 	rbit	r2, r2
 8002b96:	613a      	str	r2, [r7, #16]
  return(result);
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	fa21 f202 	lsr.w	r2, r1, r2
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba8:	e017      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002bba:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002bbe:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fa92 f2a2 	rbit	r2, r2
 8002bc6:	60ba      	str	r2, [r7, #8]
  return(result);
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	fa21 f202 	lsr.w	r2, r1, r2
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002be2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002be6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	603b      	str	r3, [r7, #0]
  return(result);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8002c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3754      	adds	r7, #84	; 0x54
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	0800ac00 	.word	0x0800ac00
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000064 	.word	0x20000064

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002c46:	f7ff ffef 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c58:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	603b      	str	r3, [r7, #0]
  return(result);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	0800abf8 	.word	0x0800abf8

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002c8a:	f7ff ffcd 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002c98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c9c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	603b      	str	r3, [r7, #0]
  return(result);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	0800abf8 	.word	0x0800abf8

08002cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce4:	f7ff f98a 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002ce8:	6178      	str	r0, [r7, #20]
 8002cea:	e014      	b.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d04:	f7ff f97a 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d10b      	bne.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d919      	bls.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2ba0      	cmp	r3, #160	; 0xa0
 8002d28:	d902      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e013      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d30:	2301      	movs	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	e010      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d902      	bls.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e00a      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d102      	bne.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d48:	2302      	movs	r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e004      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d101      	bne.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d54:	2301      	movs	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8002d58:	490b      	ldr	r1, [pc, #44]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da0:	2300      	movs	r3, #0
 8002da2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d03f      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db8:	d01c      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbe:	d802      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dc4:	e01f      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dca:	d003      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002dcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dd0:	d01c      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002dd2:	e018      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dd4:	4a82      	ldr	r2, [pc, #520]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de0:	e015      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fac3 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df2:	e00c      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3320      	adds	r3, #32
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fc0e 	bl	800361c <RCCEx_PLLSAI2_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e04:	e003      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	74fb      	strb	r3, [r7, #19]
      break;
 8002e0a:	e000      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8002e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e14:	4972      	ldr	r1, [pc, #456]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e2a:	e001      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03f      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d01c      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4a:	d802      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e50:	e01f      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e56:	d003      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e5c:	d01c      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e5e:	e018      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e60:	4a5f      	ldr	r2, [pc, #380]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e62:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6c:	e015      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fa7d 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fbc8 	bl	800361c <RCCEx_PLLSAI2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	74fb      	strb	r3, [r7, #19]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea0:	494f      	ldr	r1, [pc, #316]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eb6:	e001      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 809a 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef6:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f02:	f7fd fb8f 	bl	8000624 <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f08:	e009      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fd fb8b 	bl	8000624 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d902      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d15b      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01f      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d019      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fd fb4a 	bl	8000624 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002f92:	e00b      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fd fb46 	bl	8000624 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d902      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	74fb      	strb	r3, [r7, #19]
            break;
 8002faa:	e006      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ec      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc0:	4907      	ldr	r1, [pc, #28]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
 8002fde:	e005      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fec:	7c7b      	ldrb	r3, [r7, #17]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4a9e      	ldr	r2, [pc, #632]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002ff4:	4b9d      	ldr	r3, [pc, #628]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300a:	4998      	ldr	r1, [pc, #608]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800300c:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800302c:	498f      	ldr	r1, [pc, #572]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800302e:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 020c 	bic.w	r2, r3, #12
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304e:	4987      	ldr	r1, [pc, #540]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003070:	497e      	ldr	r1, [pc, #504]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003072:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003092:	4976      	ldr	r1, [pc, #472]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b4:	496d      	ldr	r1, [pc, #436]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030b6:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f8:	495c      	ldr	r1, [pc, #368]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311a:	4954      	ldr	r1, [pc, #336]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800313c:	494b      	ldr	r1, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800315e:	4943      	ldr	r1, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003160:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d028      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003180:	493a      	ldr	r1, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319e:	d106      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a0:	4a32      	ldr	r2, [pc, #200]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031aa:	60d3      	str	r3, [r2, #12]
 80031ac:	e011      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f8d8 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]
      
        if(ret != HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d028      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031de:	4923      	ldr	r1, [pc, #140]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fc:	d106      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fe:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003208:	60d3      	str	r3, [r2, #12]
 800320a:	e011      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f8a9 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02b      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800323c:	490b      	ldr	r1, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325a:	d109      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800325e:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003266:	60d3      	str	r3, [r2, #12]
 8003268:	e014      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f877 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a0:	492b      	ldr	r1, [pc, #172]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f854 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
 80032da:	e011      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f995 	bl	800361c <RCCEx_PLLSAI2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800330c:	4910      	ldr	r1, [pc, #64]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8003346:	7cbb      	ldrb	r3, [r7, #18]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b095      	sub	sp, #84	; 0x54
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003388:	4ba3      	ldr	r3, [pc, #652]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003394:	4ba0      	ldr	r3, [pc, #640]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d117      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
       || 
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80033ac:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033b4:	2370      	movs	r3, #112	; 0x70
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
       || 
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d054      	beq.n	800347e <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80033da:	e050      	b.n	800347e <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d00d      	beq.n	8003400 <RCCEx_PLLSAI1_Config+0x8c>
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d015      	beq.n	8003414 <RCCEx_PLLSAI1_Config+0xa0>
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d123      	bne.n	8003434 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033ec:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d121      	bne.n	800343c <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80033fe:	e01d      	b.n	800343c <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003400:	4b85      	ldr	r3, [pc, #532]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d119      	bne.n	8003440 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003412:	e015      	b.n	8003440 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xd0>
 8003420:	4b7d      	ldr	r3, [pc, #500]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003432:	e007      	b.n	8003444 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 800343a:	e004      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003444:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8003446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800344a:	2b00      	cmp	r3, #0
 800344c:	d117      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800344e:	4c72      	ldr	r4, [pc, #456]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003450:	4b71      	ldr	r3, [pc, #452]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	2370      	movs	r3, #112	; 0x70
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	fa00 f303 	lsl.w	r3, r0, r3
 8003478:	430b      	orrs	r3, r1
 800347a:	4313      	orrs	r3, r2
 800347c:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 800347e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 80c2 	bne.w	800360c <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd f8c6 	bl	8000624 <HAL_GetTick>
 8003498:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fd f8c2 	bl	8000624 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d903      	bls.n	80034b2 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 80034b0:	e005      	b.n	80034be <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80034b2:	4b59      	ldr	r3, [pc, #356]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 80034be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 80a2 	bne.w	800360c <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d126      	bne.n	800351c <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80034ce:	4c52      	ldr	r4, [pc, #328]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034d0:	4b51      	ldr	r3, [pc, #324]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6891      	ldr	r1, [r2, #8]
 80034e0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80034e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e8:	fa92 f2a2 	rbit	r2, r2
 80034ec:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 80034ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f0:	fab2 f282 	clz	r2, r2
 80034f4:	4091      	lsls	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	0910      	lsrs	r0, r2, #4
 80034fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003500:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 800350a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	fa00 f202 	lsl.w	r2, r0, r2
 8003514:	430a      	orrs	r2, r1
 8003516:	4313      	orrs	r3, r2
 8003518:	6123      	str	r3, [r4, #16]
 800351a:	e051      	b.n	80035c0 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d127      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8003522:	4c3d      	ldr	r4, [pc, #244]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003524:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800352c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6891      	ldr	r1, [r2, #8]
 8003534:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003538:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	61ba      	str	r2, [r7, #24]
  return(result);
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	4091      	lsls	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6912      	ldr	r2, [r2, #16]
 800354e:	0852      	lsrs	r2, r2, #1
 8003550:	1e50      	subs	r0, r2, #1
 8003552:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003556:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	623a      	str	r2, [r7, #32]
  return(result);
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	430a      	orrs	r2, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	6123      	str	r3, [r4, #16]
 8003570:	e026      	b.n	80035c0 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8003572:	4c29      	ldr	r4, [pc, #164]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800357c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6891      	ldr	r1, [r2, #8]
 8003584:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003588:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	fa92 f2a2 	rbit	r2, r2
 8003590:	60ba      	str	r2, [r7, #8]
  return(result);
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	4091      	lsls	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6952      	ldr	r2, [r2, #20]
 800359e:	0852      	lsrs	r2, r2, #1
 80035a0:	1e50      	subs	r0, r2, #1
 80035a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80035a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	fa92 f2a2 	rbit	r2, r2
 80035ae:	613a      	str	r2, [r7, #16]
  return(result);
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	fab2 f282 	clz	r2, r2
 80035b6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ba:	430a      	orrs	r2, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd f82a 	bl	8000624 <HAL_GetTick>
 80035d0:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d4:	f7fd f826 	bl	8000624 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d903      	bls.n	80035ea <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80035e8:	e005      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 80035f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035fe:	4906      	ldr	r1, [pc, #24]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 800360c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003610:	4618      	mov	r0, r3
 8003612:	3754      	adds	r7, #84	; 0x54
 8003614:	46bd      	mov	sp, r7
 8003616:	bd90      	pop	{r4, r7, pc}
 8003618:	40021000 	.word	0x40021000

0800361c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b091      	sub	sp, #68	; 0x44
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003630:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800363c:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d117      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
       || 
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 8003654:	4b84      	ldr	r3, [pc, #528]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800365c:	2370      	movs	r3, #112	; 0x70
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
       || 
 8003678:	429a      	cmp	r2, r3
 800367a:	d054      	beq.n	8003726 <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003682:	e050      	b.n	8003726 <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00d      	beq.n	80036a8 <RCCEx_PLLSAI2_Config+0x8c>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d015      	beq.n	80036bc <RCCEx_PLLSAI2_Config+0xa0>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d123      	bne.n	80036dc <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003694:	4b74      	ldr	r3, [pc, #464]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d121      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80036a6:	e01d      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d119      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80036ba:	e015      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0xd0>
 80036c8:	4b67      	ldr	r3, [pc, #412]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80036da:	e007      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 80036e2:	e004      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xd2>
      break;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xd2>
      break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xd2>
      break;
 80036ec:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80036ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d117      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80036f6:	4c5c      	ldr	r4, [pc, #368]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80036f8:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	1e58      	subs	r0, r3, #1
 800370a:	2370      	movs	r3, #112	; 0x70
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	fa00 f303 	lsl.w	r3, r0, r3
 8003720:	430b      	orrs	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 8003726:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 8096 	bne.w	800385c <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003730:	4a4d      	ldr	r2, [pc, #308]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003732:	4b4d      	ldr	r3, [pc, #308]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fc ff72 	bl	8000624 <HAL_GetTick>
 8003740:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8003742:	e00a      	b.n	800375a <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003744:	f7fc ff6e 	bl	8000624 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d903      	bls.n	800375a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8003758:	e005      	b.n	8003766 <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ee      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8003766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800376a:	2b00      	cmp	r3, #0
 800376c:	d176      	bne.n	800385c <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d126      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8003774:	4c3c      	ldr	r4, [pc, #240]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003776:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6891      	ldr	r1, [r2, #8]
 8003786:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800378a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	fa92 f2a2 	rbit	r2, r2
 8003792:	61ba      	str	r2, [r7, #24]
  return(result);
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	fab2 f282 	clz	r2, r2
 800379a:	4091      	lsls	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68d2      	ldr	r2, [r2, #12]
 80037a0:	0910      	lsrs	r0, r2, #4
 80037a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a6:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	fa92 f2a2 	rbit	r2, r2
 80037ae:	623a      	str	r2, [r7, #32]
  return(result);
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	430a      	orrs	r2, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	6163      	str	r3, [r4, #20]
 80037c0:	e026      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80037c2:	4c29      	ldr	r4, [pc, #164]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6891      	ldr	r1, [r2, #8]
 80037d4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80037d8:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	fa92 f2a2 	rbit	r2, r2
 80037e0:	60ba      	str	r2, [r7, #8]
  return(result);
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	fab2 f282 	clz	r2, r2
 80037e8:	4091      	lsls	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6912      	ldr	r2, [r2, #16]
 80037ee:	0852      	lsrs	r2, r2, #1
 80037f0:	1e50      	subs	r0, r2, #1
 80037f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80037f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	613a      	str	r2, [r7, #16]
  return(result);
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	430a      	orrs	r2, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	6163      	str	r3, [r4, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fc ff02 	bl	8000624 <HAL_GetTick>
 8003820:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003822:	e00a      	b.n	800383a <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003824:	f7fc fefe 	bl	8000624 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d903      	bls.n	800383a <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8003838:	e005      	b.n	8003846 <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 8003846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800384e:	4906      	ldr	r1, [pc, #24]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <RCCEx_PLLSAI2_Config+0x24c>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 800385c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003860:	4618      	mov	r0, r3
 8003862:	3744      	adds	r7, #68	; 0x44
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	40021000 	.word	0x40021000

0800386c <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e025      	b.n	80038ca <HAL_RNG_Init+0x5e>
  }
  
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance)); 
  
  __HAL_LOCK(hrng);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	791b      	ldrb	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_RNG_Init+0x1e>
 8003886:	2302      	movs	r3, #2
 8003888:	e01f      	b.n	80038ca <HAL_RNG_Init+0x5e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	795b      	ldrb	r3, [r3, #5]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f004 fe23 	bl	80084ec <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	f042 0204 	orr.w	r2, r2, #4
 80038ba:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e075      	b.n	80039d0 <HAL_RTC_Init+0xfe>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f004 fe17 	bl	800852c <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	22ca      	movs	r2, #202	; 0xca
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2253      	movs	r2, #83	; 0x53
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa12 	bl	8003d40 <RTC_EnterInitMode>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e04c      	b.n	80039d0 <HAL_RTC_Init+0xfe>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6891      	ldr	r1, [r2, #8]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6850      	ldr	r0, [r2, #4]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6912      	ldr	r2, [r2, #16]
 800395c:	4310      	orrs	r0, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6992      	ldr	r2, [r2, #24]
 8003962:	4302      	orrs	r2, r0
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68d2      	ldr	r2, [r2, #12]
 8003970:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6911      	ldr	r1, [r2, #16]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0412      	lsls	r2, r2, #16
 8003982:	430a      	orrs	r2, r1
 8003984:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	68d2      	ldr	r2, [r2, #12]
 8003990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003994:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039a0:	f022 0203 	bic.w	r2, r2, #3
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	69d0      	ldr	r0, [r2, #28]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6952      	ldr	r2, [r2, #20]
 80039b8:	4302      	orrs	r2, r0
 80039ba:	430a      	orrs	r2, r1
 80039bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_RTC_SetTime+0x1e>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0ba      	b.n	8003b6c <HAL_RTC_SetTime+0x194>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d126      	bne.n	8003a5a <HAL_RTC_SetTime+0x82>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <HAL_RTC_SetTime+0x48>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f9b7 	bl	8003d98 <RTC_ByteToBcd2>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9b0 	bl	8003d98 <RTC_ByteToBcd2>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a3c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	789b      	ldrb	r3, [r3, #2]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f9a8 	bl	8003d98 <RTC_ByteToBcd2>
 8003a48:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003a4a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	78db      	ldrb	r3, [r3, #3]
 8003a52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e020      	b.n	8003a9c <HAL_RTC_SetTime+0xc4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_RTC_SetTime+0xa0>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f9b1 	bl	8003dd4 <RTC_Bcd2ToByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e002      	b.n	8003a7e <HAL_RTC_SetTime+0xa6>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003a8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003a90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	22ca      	movs	r2, #202	; 0xca
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2253      	movs	r2, #83	; 0x53
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f947 	bl	8003d40 <RTC_EnterInitMode>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RTC_SetTime+0xfc>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	22ff      	movs	r2, #255	; 0xff
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e04b      	b.n	8003b6c <HAL_RTC_SetTime+0x194>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ade:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003af2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	6891      	ldr	r1, [r2, #8]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68d0      	ldr	r0, [r2, #12]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	6912      	ldr	r2, [r2, #16]
 8003b06:	4302      	orrs	r2, r0
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <HAL_RTC_SetTime+0x17a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f8e0 	bl	8003cf0 <HAL_RTC_WaitForSynchro>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_RTC_SetTime+0x17a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2204      	movs	r2, #4
 8003b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00c      	b.n	8003b6c <HAL_RTC_SetTime+0x194>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}

08003b74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_RTC_SetDate+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0aa      	b.n	8003ce8 <HAL_RTC_SetDate+0x174>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_RTC_SetDate+0x52>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	f023 0310 	bic.w	r3, r3, #16
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	330a      	adds	r3, #10
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11c      	bne.n	8003c06 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	78db      	ldrb	r3, [r3, #3]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f8e1 	bl	8003d98 <RTC_ByteToBcd2>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f8da 	bl	8003d98 <RTC_ByteToBcd2>
 8003be4:	4603      	mov	r3, r0
 8003be6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003be8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	789b      	ldrb	r3, [r3, #2]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f8d2 	bl	8003d98 <RTC_ByteToBcd2>
 8003bf4:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003bf6:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e01c      	b.n	8003c40 <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f8e2 	bl	8003dd4 <RTC_Bcd2ToByte>
 8003c10:	4603      	mov	r3, r0
 8003c12:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	789b      	ldrb	r3, [r3, #2]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f8db 	bl	8003dd4 <RTC_Bcd2ToByte>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003c2e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003c34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	22ca      	movs	r2, #202	; 0xca
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2253      	movs	r2, #83	; 0x53
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f875 	bl	8003d40 <RTC_EnterInitMode>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2204      	movs	r2, #4
 8003c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e037      	b.n	8003ce8 <HAL_RTC_SetDate+0x174>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c96:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <HAL_RTC_SetDate+0x15a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f822 	bl	8003cf0 <HAL_RTC_WaitForSynchro>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_RTC_SetDate+0x15a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RTC_SetDate+0x174>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	22ff      	movs	r2, #255	; 0xff
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003d0c:	f7fc fc8a 	bl	8000624 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003d12:	e009      	b.n	8003d28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d14:	f7fc fc86 	bl	8000624 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d22:	d901      	bls.n	8003d28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e007      	b.n	8003d38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ee      	beq.n	8003d14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d62:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d64:	f7fc fc5e 	bl	8000624 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d6a:	e009      	b.n	8003d80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d6c:	f7fc fc5a 	bl	8000624 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7a:	d901      	bls.n	8003d80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e007      	b.n	8003d90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ee      	beq.n	8003d6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003da6:	e005      	b.n	8003db4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	3b0a      	subs	r3, #10
 8003db2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	d8f6      	bhi.n	8003da8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b2db      	uxtb	r3, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	b2db      	uxtb	r3, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e043      	b.n	8003eaa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f004 fb94 	bl	8008564 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fba9 	bl	80045ac <UART_SetConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e022      	b.n	8003eaa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fec1 	bl	8004bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e90:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 ff48 	bl	8004d38 <UART_CheckIdleState>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b088      	sub	sp, #32
 8003eb6:	af02      	add	r7, sp, #8
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d177      	bne.n	8003fc2 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_UART_Transmit+0x2c>
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e070      	b.n	8003fc4 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Transmit+0x3e>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e069      	b.n	8003fc4 <HAL_UART_Transmit+0x112>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f06:	f7fc fb8d 	bl	8000624 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8003f1c:	e034      	b.n	8003f88 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 ff45 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e03c      	b.n	8003fc4 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f52:	d111      	bne.n	8003f78 <HAL_UART_Transmit+0xc6>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	8812      	ldrh	r2, [r2, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3302      	adds	r3, #2
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	e007      	b.n	8003f88 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1c4      	bne.n	8003f1e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2140      	movs	r1, #64	; 0x40
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 ff13 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e00a      	b.n	8003fc4 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	f040 80ad 	bne.w	8004148 <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_Receive+0x2e>
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0a5      	b.n	800414a <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Receive+0x40>
 8004008:	2302      	movs	r3, #2
 800400a:	e09e      	b.n	800414a <HAL_UART_Receive+0x17e>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2222      	movs	r2, #34	; 0x22
 800401e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004022:	f7fc faff 	bl	8000624 <HAL_GetTick>
 8004026:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d10e      	bne.n	8004060 <HAL_UART_Receive+0x94>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_UART_Receive+0x8a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004054:	e028      	b.n	80040a8 <HAL_UART_Receive+0xdc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800405e:	e023      	b.n	80040a8 <HAL_UART_Receive+0xdc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_UART_Receive+0xb8>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_UART_Receive+0xae>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004078:	e016      	b.n	80040a8 <HAL_UART_Receive+0xdc>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	227f      	movs	r2, #127	; 0x7f
 800407e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004082:	e011      	b.n	80040a8 <HAL_UART_Receive+0xdc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408c:	d10c      	bne.n	80040a8 <HAL_UART_Receive+0xdc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Receive+0xd4>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	227f      	movs	r2, #127	; 0x7f
 800409a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409e:	e003      	b.n	80040a8 <HAL_UART_Receive+0xdc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	223f      	movs	r2, #63	; 0x3f
 80040a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040ae:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 80040b0:	e03a      	b.n	8004128 <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2200      	movs	r2, #0
 80040cc:	2120      	movs	r1, #32
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fe7b 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e035      	b.n	800414a <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e6:	d112      	bne.n	800410e <HAL_UART_Receive+0x142>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10e      	bne.n	800410e <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	8b7b      	ldrh	r3, [r7, #26]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	801a      	strh	r2, [r3, #0]
        pData +=2;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3302      	adds	r3, #2
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	e00c      	b.n	8004128 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	60ba      	str	r2, [r7, #8]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800411a:	b292      	uxth	r2, r2
 800411c:	b2d1      	uxtb	r1, r2
 800411e:	8b7a      	ldrh	r2, [r7, #26]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	400a      	ands	r2, r1
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1be      	bne.n	80040b2 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	d172      	bne.n	8004252 <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Receive_IT+0x26>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e06b      	b.n	8004254 <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Receive_IT+0x38>
 8004186:	2302      	movs	r3, #2
 8004188:	e064      	b.n	8004254 <HAL_UART_Receive_IT+0x102>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d10e      	bne.n	80041d0 <HAL_UART_Receive_IT+0x7e>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_UART_Receive_IT+0x74>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041c4:	e028      	b.n	8004218 <HAL_UART_Receive_IT+0xc6>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041ce:	e023      	b.n	8004218 <HAL_UART_Receive_IT+0xc6>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10d      	bne.n	80041f4 <HAL_UART_Receive_IT+0xa2>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_UART_Receive_IT+0x98>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	22ff      	movs	r2, #255	; 0xff
 80041e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041e8:	e016      	b.n	8004218 <HAL_UART_Receive_IT+0xc6>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	227f      	movs	r2, #127	; 0x7f
 80041ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041f2:	e011      	b.n	8004218 <HAL_UART_Receive_IT+0xc6>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fc:	d10c      	bne.n	8004218 <HAL_UART_Receive_IT+0xc6>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_UART_Receive_IT+0xbe>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	227f      	movs	r2, #127	; 0x7f
 800420a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800420e:	e003      	b.n	8004218 <HAL_UART_Receive_IT+0xc6>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	223f      	movs	r2, #63	; 0x3f
 8004214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2222      	movs	r2, #34	; 0x22
 8004222:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800424c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e000      	b.n	8004254 <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004276:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d12f      	bne.n	80042f6 <HAL_UART_AbortReceive_IT+0x96>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d013      	beq.n	80042d6 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_UART_AbortReceive_IT+0xc0>)
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc fb09 	bl	80008d2 <HAL_DMA_Abort_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d026      	beq.n	8004314 <HAL_UART_AbortReceive_IT+0xb4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
 80042d4:	e01e      	b.n	8004314 <HAL_UART_AbortReceive_IT+0xb4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0; 
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	220f      	movs	r2, #15
 80042e4:	621a      	str	r2, [r3, #32]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f952 	bl	8004598 <HAL_UART_AbortReceiveCpltCallback>
 80042f4:	e00e      	b.n	8004314 <HAL_UART_AbortReceive_IT+0xb4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0; 
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	220f      	movs	r2, #15
 8004304:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f942 	bl	8004598 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	08004ec7 	.word	0x08004ec7

08004324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_UART_IRQHandler+0x42>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fe3b 	bl	8004fda <UART_Receive_IT>
      return;
 8004364:	e0fe      	b.n	8004564 <HAL_UART_IRQHandler+0x240>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80ba 	beq.w	80044ea <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80af 	beq.w	80044ea <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <HAL_UART_IRQHandler+0x90>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <HAL_UART_IRQHandler+0xb8>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2202      	movs	r2, #2
 80043ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <HAL_UART_IRQHandler+0xe0>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	f043 0202 	orr.w	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	f043 0208 	orr.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8091 	beq.w	8004562 <HAL_UART_IRQHandler+0x23e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_UART_IRQHandler+0x136>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fdc0 	bl	8004fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d131      	bne.n	80044d8 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fcf2 	bl	8004e5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d123      	bne.n	80044d0 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004496:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a4:	4a31      	ldr	r2, [pc, #196]	; (800456c <HAL_UART_IRQHandler+0x248>)
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc fa10 	bl	80008d2 <HAL_DMA_Abort_IT>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80044c2:	4610      	mov	r0, r2
 80044c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c6:	e00e      	b.n	80044e6 <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f85b 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	e00a      	b.n	80044e6 <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f857 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d6:	e006      	b.n	80044e6 <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f853 	bl	8004584 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80044e4:	e03d      	b.n	8004562 <HAL_UART_IRQHandler+0x23e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e6:	bf00      	nop
    return;
 80044e8:	e03b      	b.n	8004562 <HAL_UART_IRQHandler+0x23e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  cr3its = READ_REG(huart->Instance->CR3);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_UART_IRQHandler+0x204>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <HAL_UART_IRQHandler+0x204>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800450e:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fdc6 	bl	80050b2 <HAL_UARTEx_WakeupCallback>
    return;
 8004526:	e01d      	b.n	8004564 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_UART_IRQHandler+0x220>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_UART_IRQHandler+0x220>
  {
    UART_Transmit_IT(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fcdc 	bl	8004efa <UART_Transmit_IT>
    return;
 8004542:	e00f      	b.n	8004564 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_UART_IRQHandler+0x240>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fd26 	bl	8004faa <UART_EndTransmit_IT>
    return;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <HAL_UART_IRQHandler+0x240>
    return;
 8004562:	bf00      	nop
  }

}
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	08004e9b 	.word	0x08004e9b

08004570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80045ba:	2310      	movs	r3, #16
 80045bc:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 80045be:	2300      	movs	r3, #0
 80045c0:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 80045c2:	2300      	movs	r3, #0
 80045c4:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	4bab      	ldr	r3, [pc, #684]	; (800489c <UART_SetConfig+0x2f0>)
 80045ee:	400b      	ands	r3, r1
 80045f0:	6979      	ldr	r1, [r7, #20]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	6852      	ldr	r2, [r2, #4]
 8004600:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68d2      	ldr	r2, [r2, #12]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4aa2      	ldr	r2, [pc, #648]	; (80048a0 <UART_SetConfig+0x2f4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a99      	ldr	r2, [pc, #612]	; (80048a4 <UART_SetConfig+0x2f8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d121      	bne.n	8004688 <UART_SetConfig+0xdc>
 8004644:	4b98      	ldr	r3, [pc, #608]	; (80048a8 <UART_SetConfig+0x2fc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d816      	bhi.n	8004680 <UART_SetConfig+0xd4>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xac>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	08004675 	.word	0x08004675
 8004660:	0800466f 	.word	0x0800466f
 8004664:	0800467b 	.word	0x0800467b
 8004668:	2301      	movs	r3, #1
 800466a:	74fb      	strb	r3, [r7, #19]
 800466c:	e0e4      	b.n	8004838 <UART_SetConfig+0x28c>
 800466e:	2302      	movs	r3, #2
 8004670:	74fb      	strb	r3, [r7, #19]
 8004672:	e0e1      	b.n	8004838 <UART_SetConfig+0x28c>
 8004674:	2304      	movs	r3, #4
 8004676:	74fb      	strb	r3, [r7, #19]
 8004678:	e0de      	b.n	8004838 <UART_SetConfig+0x28c>
 800467a:	2308      	movs	r3, #8
 800467c:	74fb      	strb	r3, [r7, #19]
 800467e:	e0db      	b.n	8004838 <UART_SetConfig+0x28c>
 8004680:	2310      	movs	r3, #16
 8004682:	74fb      	strb	r3, [r7, #19]
 8004684:	bf00      	nop
 8004686:	e0d7      	b.n	8004838 <UART_SetConfig+0x28c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a87      	ldr	r2, [pc, #540]	; (80048ac <UART_SetConfig+0x300>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d134      	bne.n	80046fc <UART_SetConfig+0x150>
 8004692:	4b85      	ldr	r3, [pc, #532]	; (80048a8 <UART_SetConfig+0x2fc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d829      	bhi.n	80046f4 <UART_SetConfig+0x148>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0xfc>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080046f5 	.word	0x080046f5
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	080046f5 	.word	0x080046f5
 80046c8:	080046e3 	.word	0x080046e3
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	080046ef 	.word	0x080046ef
 80046dc:	2300      	movs	r3, #0
 80046de:	74fb      	strb	r3, [r7, #19]
 80046e0:	e0aa      	b.n	8004838 <UART_SetConfig+0x28c>
 80046e2:	2302      	movs	r3, #2
 80046e4:	74fb      	strb	r3, [r7, #19]
 80046e6:	e0a7      	b.n	8004838 <UART_SetConfig+0x28c>
 80046e8:	2304      	movs	r3, #4
 80046ea:	74fb      	strb	r3, [r7, #19]
 80046ec:	e0a4      	b.n	8004838 <UART_SetConfig+0x28c>
 80046ee:	2308      	movs	r3, #8
 80046f0:	74fb      	strb	r3, [r7, #19]
 80046f2:	e0a1      	b.n	8004838 <UART_SetConfig+0x28c>
 80046f4:	2310      	movs	r3, #16
 80046f6:	74fb      	strb	r3, [r7, #19]
 80046f8:	bf00      	nop
 80046fa:	e09d      	b.n	8004838 <UART_SetConfig+0x28c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6b      	ldr	r2, [pc, #428]	; (80048b0 <UART_SetConfig+0x304>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d120      	bne.n	8004748 <UART_SetConfig+0x19c>
 8004706:	4b68      	ldr	r3, [pc, #416]	; (80048a8 <UART_SetConfig+0x2fc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004710:	2b10      	cmp	r3, #16
 8004712:	d00f      	beq.n	8004734 <UART_SetConfig+0x188>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d802      	bhi.n	800471e <UART_SetConfig+0x172>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0x17c>
 800471c:	e010      	b.n	8004740 <UART_SetConfig+0x194>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d005      	beq.n	800472e <UART_SetConfig+0x182>
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d009      	beq.n	800473a <UART_SetConfig+0x18e>
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x194>
 8004728:	2300      	movs	r3, #0
 800472a:	74fb      	strb	r3, [r7, #19]
 800472c:	e084      	b.n	8004838 <UART_SetConfig+0x28c>
 800472e:	2302      	movs	r3, #2
 8004730:	74fb      	strb	r3, [r7, #19]
 8004732:	e081      	b.n	8004838 <UART_SetConfig+0x28c>
 8004734:	2304      	movs	r3, #4
 8004736:	74fb      	strb	r3, [r7, #19]
 8004738:	e07e      	b.n	8004838 <UART_SetConfig+0x28c>
 800473a:	2308      	movs	r3, #8
 800473c:	74fb      	strb	r3, [r7, #19]
 800473e:	e07b      	b.n	8004838 <UART_SetConfig+0x28c>
 8004740:	2310      	movs	r3, #16
 8004742:	74fb      	strb	r3, [r7, #19]
 8004744:	bf00      	nop
 8004746:	e077      	b.n	8004838 <UART_SetConfig+0x28c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a59      	ldr	r2, [pc, #356]	; (80048b4 <UART_SetConfig+0x308>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d120      	bne.n	8004794 <UART_SetConfig+0x1e8>
 8004752:	4b55      	ldr	r3, [pc, #340]	; (80048a8 <UART_SetConfig+0x2fc>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d00f      	beq.n	8004780 <UART_SetConfig+0x1d4>
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d802      	bhi.n	800476a <UART_SetConfig+0x1be>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <UART_SetConfig+0x1c8>
 8004768:	e010      	b.n	800478c <UART_SetConfig+0x1e0>
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d005      	beq.n	800477a <UART_SetConfig+0x1ce>
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d009      	beq.n	8004786 <UART_SetConfig+0x1da>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x1e0>
 8004774:	2300      	movs	r3, #0
 8004776:	74fb      	strb	r3, [r7, #19]
 8004778:	e05e      	b.n	8004838 <UART_SetConfig+0x28c>
 800477a:	2302      	movs	r3, #2
 800477c:	74fb      	strb	r3, [r7, #19]
 800477e:	e05b      	b.n	8004838 <UART_SetConfig+0x28c>
 8004780:	2304      	movs	r3, #4
 8004782:	74fb      	strb	r3, [r7, #19]
 8004784:	e058      	b.n	8004838 <UART_SetConfig+0x28c>
 8004786:	2308      	movs	r3, #8
 8004788:	74fb      	strb	r3, [r7, #19]
 800478a:	e055      	b.n	8004838 <UART_SetConfig+0x28c>
 800478c:	2310      	movs	r3, #16
 800478e:	74fb      	strb	r3, [r7, #19]
 8004790:	bf00      	nop
 8004792:	e051      	b.n	8004838 <UART_SetConfig+0x28c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a47      	ldr	r2, [pc, #284]	; (80048b8 <UART_SetConfig+0x30c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d124      	bne.n	80047e8 <UART_SetConfig+0x23c>
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <UART_SetConfig+0x2fc>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ac:	d012      	beq.n	80047d4 <UART_SetConfig+0x228>
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b2:	d802      	bhi.n	80047ba <UART_SetConfig+0x20e>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <UART_SetConfig+0x21c>
 80047b8:	e012      	b.n	80047e0 <UART_SetConfig+0x234>
 80047ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047be:	d006      	beq.n	80047ce <UART_SetConfig+0x222>
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d009      	beq.n	80047da <UART_SetConfig+0x22e>
 80047c6:	e00b      	b.n	80047e0 <UART_SetConfig+0x234>
 80047c8:	2300      	movs	r3, #0
 80047ca:	74fb      	strb	r3, [r7, #19]
 80047cc:	e034      	b.n	8004838 <UART_SetConfig+0x28c>
 80047ce:	2302      	movs	r3, #2
 80047d0:	74fb      	strb	r3, [r7, #19]
 80047d2:	e031      	b.n	8004838 <UART_SetConfig+0x28c>
 80047d4:	2304      	movs	r3, #4
 80047d6:	74fb      	strb	r3, [r7, #19]
 80047d8:	e02e      	b.n	8004838 <UART_SetConfig+0x28c>
 80047da:	2308      	movs	r3, #8
 80047dc:	74fb      	strb	r3, [r7, #19]
 80047de:	e02b      	b.n	8004838 <UART_SetConfig+0x28c>
 80047e0:	2310      	movs	r3, #16
 80047e2:	74fb      	strb	r3, [r7, #19]
 80047e4:	bf00      	nop
 80047e6:	e027      	b.n	8004838 <UART_SetConfig+0x28c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <UART_SetConfig+0x2f4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d123      	bne.n	800483a <UART_SetConfig+0x28e>
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <UART_SetConfig+0x2fc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d012      	beq.n	8004828 <UART_SetConfig+0x27c>
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d802      	bhi.n	800480e <UART_SetConfig+0x262>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <UART_SetConfig+0x270>
 800480c:	e012      	b.n	8004834 <UART_SetConfig+0x288>
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d006      	beq.n	8004822 <UART_SetConfig+0x276>
 8004814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004818:	d009      	beq.n	800482e <UART_SetConfig+0x282>
 800481a:	e00b      	b.n	8004834 <UART_SetConfig+0x288>
 800481c:	2300      	movs	r3, #0
 800481e:	74fb      	strb	r3, [r7, #19]
 8004820:	e00a      	b.n	8004838 <UART_SetConfig+0x28c>
 8004822:	2302      	movs	r3, #2
 8004824:	74fb      	strb	r3, [r7, #19]
 8004826:	e007      	b.n	8004838 <UART_SetConfig+0x28c>
 8004828:	2304      	movs	r3, #4
 800482a:	74fb      	strb	r3, [r7, #19]
 800482c:	e004      	b.n	8004838 <UART_SetConfig+0x28c>
 800482e:	2308      	movs	r3, #8
 8004830:	74fb      	strb	r3, [r7, #19]
 8004832:	e001      	b.n	8004838 <UART_SetConfig+0x28c>
 8004834:	2310      	movs	r3, #16
 8004836:	74fb      	strb	r3, [r7, #19]
 8004838:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <UART_SetConfig+0x2f4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	f040 80f0 	bne.w	8004a26 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d837      	bhi.n	80048c0 <UART_SetConfig+0x314>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x2ac>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800487d 	.word	0x0800487d
 800485c:	080048c1 	.word	0x080048c1
 8004860:	08004885 	.word	0x08004885
 8004864:	080048c1 	.word	0x080048c1
 8004868:	0800488b 	.word	0x0800488b
 800486c:	080048c1 	.word	0x080048c1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048c1 	.word	0x080048c1
 8004878:	08004893 	.word	0x08004893
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800487c:	f7fe f9e0 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004880:	6178      	str	r0, [r7, #20]
      break;
 8004882:	e020      	b.n	80048c6 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <UART_SetConfig+0x310>)
 8004886:	617b      	str	r3, [r7, #20]
      break;
 8004888:	e01d      	b.n	80048c6 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800488a:	f7fe f8d3 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800488e:	6178      	str	r0, [r7, #20]
      break;
 8004890:	e019      	b.n	80048c6 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	617b      	str	r3, [r7, #20]
      break;
 8004898:	e015      	b.n	80048c6 <UART_SetConfig+0x31a>
 800489a:	bf00      	nop
 800489c:	efff69f3 	.word	0xefff69f3
 80048a0:	40008000 	.word	0x40008000
 80048a4:	40013800 	.word	0x40013800
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40004400 	.word	0x40004400
 80048b0:	40004800 	.word	0x40004800
 80048b4:	40004c00 	.word	0x40004c00
 80048b8:	40005000 	.word	0x40005000
 80048bc:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 818a 	beq.w	8004be2 <UART_SetConfig+0x636>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	441a      	add	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d805      	bhi.n	80048ea <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d202      	bcs.n	80048f0 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
 80048ee:	e178      	b.n	8004be2 <UART_SetConfig+0x636>
      }
      else
      {
        switch (clocksource)
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	f200 8084 	bhi.w	8004a00 <UART_SetConfig+0x454>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x354>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004925 	.word	0x08004925
 8004904:	08004a01 	.word	0x08004a01
 8004908:	08004965 	.word	0x08004965
 800490c:	08004a01 	.word	0x08004a01
 8004910:	08004999 	.word	0x08004999
 8004914:	08004a01 	.word	0x08004a01
 8004918:	08004a01 	.word	0x08004a01
 800491c:	08004a01 	.word	0x08004a01
 8004920:	080049d7 	.word	0x080049d7
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004924:	f7fe f98c 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004928:	4603      	mov	r3, r0
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8004932:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004936:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	eb18 0003 	adds.w	r0, r8, r3
 8004948:	eb49 0104 	adc.w	r1, r9, r4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f04f 0400 	mov.w	r4, #0
 8004954:	461a      	mov	r2, r3
 8004956:	4623      	mov	r3, r4
 8004958:	f7fb fc9c 	bl	8000294 <__aeabi_uldivmod>
 800495c:	4603      	mov	r3, r0
 800495e:	460c      	mov	r4, r1
 8004960:	617b      	str	r3, [r7, #20]
          break;
 8004962:	e050      	b.n	8004a06 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	f04f 0400 	mov.w	r4, #0
 800496e:	49a0      	ldr	r1, [pc, #640]	; (8004bf0 <UART_SetConfig+0x644>)
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	eb13 0801 	adds.w	r8, r3, r1
 8004978:	eb44 0902 	adc.w	r9, r4, r2
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f04f 0400 	mov.w	r4, #0
 8004988:	461a      	mov	r2, r3
 800498a:	4623      	mov	r3, r4
 800498c:	f7fb fc82 	bl	8000294 <__aeabi_uldivmod>
 8004990:	4603      	mov	r3, r0
 8004992:	460c      	mov	r4, r1
 8004994:	617b      	str	r3, [r7, #20]
          break;
 8004996:	e036      	b.n	8004a06 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004998:	f7fe f84c 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	021d      	lsls	r5, r3, #8
 80049a6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80049aa:	0214      	lsls	r4, r2, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	461a      	mov	r2, r3
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	18a0      	adds	r0, r4, r2
 80049ba:	eb45 0103 	adc.w	r1, r5, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f04f 0400 	mov.w	r4, #0
 80049c6:	461a      	mov	r2, r3
 80049c8:	4623      	mov	r3, r4
 80049ca:	f7fb fc63 	bl	8000294 <__aeabi_uldivmod>
 80049ce:	4603      	mov	r3, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	617b      	str	r3, [r7, #20]
          break;
 80049d4:	e017      	b.n	8004a06 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80049e4:	f144 0100 	adc.w	r1, r4, #0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f04f 0400 	mov.w	r4, #0
 80049f0:	461a      	mov	r2, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	f7fb fc4e 	bl	8000294 <__aeabi_uldivmod>
 80049f8:	4603      	mov	r3, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	617b      	str	r3, [r7, #20]
          break;
 80049fe:	e002      	b.n	8004a06 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
          break;
 8004a04:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0c:	d308      	bcc.n	8004a20 <UART_SetConfig+0x474>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a14:	d204      	bcs.n	8004a20 <UART_SetConfig+0x474>
        {
           huart->Instance->BRR = tmpreg;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	e0e0      	b.n	8004be2 <UART_SetConfig+0x636>
        }
        else
        {
          ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e0dd      	b.n	8004be2 <UART_SetConfig+0x636>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2e:	d16e      	bne.n	8004b0e <UART_SetConfig+0x562>
  {
    switch (clocksource)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d856      	bhi.n	8004ae4 <UART_SetConfig+0x538>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x490>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a7d 	.word	0x08004a7d
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004ae5 	.word	0x08004ae5
 8004a4c:	08004ab3 	.word	0x08004ab3
 8004a50:	08004ae5 	.word	0x08004ae5
 8004a54:	08004ae5 	.word	0x08004ae5
 8004a58:	08004ae5 	.word	0x08004ae5
 8004a5c:	08004acf 	.word	0x08004acf
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a60:	f7fe f8ee 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004a64:	4603      	mov	r3, r0
 8004a66:	005a      	lsls	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	441a      	add	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	823b      	strh	r3, [r7, #16]
      break;
 8004a7a:	e036      	b.n	8004aea <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a7c:	f7fe f902 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8004a80:	4603      	mov	r3, r0
 8004a82:	005a      	lsls	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	823b      	strh	r3, [r7, #16]
      break;
 8004a96:	e028      	b.n	8004aea <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004aa2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aae:	823b      	strh	r3, [r7, #16]
      break;
 8004ab0:	e01b      	b.n	8004aea <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ab2:	f7fd ffbf 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	005a      	lsls	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	441a      	add	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	823b      	strh	r3, [r7, #16]
      break;
 8004acc:	e00d      	b.n	8004aea <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	823b      	strh	r3, [r7, #16]
      break;
 8004ae2:	e002      	b.n	8004aea <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8004aea:	8a3b      	ldrh	r3, [r7, #16]
 8004aec:	f023 030f 	bic.w	r3, r3, #15
 8004af0:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8004af2:	8a3b      	ldrh	r3, [r7, #16]
 8004af4:	105b      	asrs	r3, r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	89bb      	ldrh	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	89ba      	ldrh	r2, [r7, #12]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	e069      	b.n	8004be2 <UART_SetConfig+0x636>
  }
  else
  {
    switch (clocksource)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d863      	bhi.n	8004bdc <UART_SetConfig+0x630>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x570>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b81 	.word	0x08004b81
 8004b28:	08004bdd 	.word	0x08004bdd
 8004b2c:	08004ba1 	.word	0x08004ba1
 8004b30:	08004bdd 	.word	0x08004bdd
 8004b34:	08004bdd 	.word	0x08004bdd
 8004b38:	08004bdd 	.word	0x08004bdd
 8004b3c:	08004bc1 	.word	0x08004bc1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681c      	ldr	r4, [r3, #0]
 8004b44:	f7fe f87c 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	60e3      	str	r3, [r4, #12]
      break;
 8004b5e:	e040      	b.n	8004be2 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681c      	ldr	r4, [r3, #0]
 8004b64:	f7fe f88e 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	60e3      	str	r3, [r4, #12]
      break;
 8004b7e:	e030      	b.n	8004be2 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	6849      	ldr	r1, [r1, #4]
 8004b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	60d3      	str	r3, [r2, #12]
      break;
 8004b9e:	e020      	b.n	8004be2 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681c      	ldr	r4, [r3, #0]
 8004ba4:	f7fd ff46 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	60e3      	str	r3, [r4, #12]
      break;
 8004bbe:	e010      	b.n	8004be2 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6852      	ldr	r2, [r2, #4]
 8004bc8:	0852      	lsrs	r2, r2, #1
 8004bca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6852      	ldr	r2, [r2, #4]
 8004bd2:	fbb1 f2f2 	udiv	r2, r1, r2
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	60da      	str	r2, [r3, #12]
      break;
 8004bda:	e002      	b.n	8004be2 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	bf00      	nop
    }
  }

  return ret;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]

}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bee:	bf00      	nop
 8004bf0:	f4240000 	.word	0xf4240000

08004bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	6852      	ldr	r2, [r2, #4]
 8004c12:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6852      	ldr	r2, [r2, #4]
 8004c34:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6892      	ldr	r2, [r2, #8]
 8004cbc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	6852      	ldr	r2, [r2, #4]
 8004cde:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf2:	d10a      	bne.n	8004d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	6852      	ldr	r2, [r2, #4]
 8004cfe:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6852      	ldr	r2, [r2, #4]
 8004d20:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d4a:	f7fb fc6b 	bl	8000624 <HAL_GetTick>
 8004d4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d10e      	bne.n	8004d7c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f82c 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e022      	b.n	8004dc2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d10e      	bne.n	8004da8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f816 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e00c      	b.n	8004dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	e02c      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d028      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8004dea:	f7fb fc1b 	bl	8000624 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	1ad2      	subs	r2, r2, r3
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d91d      	bls.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6892      	ldr	r2, [r2, #8]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	401a      	ands	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0c3      	beq.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e74:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	6892      	ldr	r2, [r2, #8]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fb63 	bl	8004584 <HAL_UART_ErrorCallback>
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fb53 	bl	8004598 <HAL_UART_AbortReceiveCpltCallback>
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b21      	cmp	r3, #33	; 0x21
 8004f0c:	d146      	bne.n	8004f9c <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d111      	bne.n	8004f3e <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f28:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f38:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e02f      	b.n	8004f9e <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f46:	d114      	bne.n	8004f72 <UART_Transmit_IT+0x78>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d110      	bne.n	8004f72 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f54:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	8812      	ldrh	r2, [r2, #0]
 8004f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f62:	b292      	uxth	r2, r2
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f70:	e009      	b.n	8004f86 <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	1c58      	adds	r0, r3, #1
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	64c8      	str	r0, [r1, #76]	; 0x4c
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fad0 	bl	8004570 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fe8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b22      	cmp	r3, #34	; 0x22
 8004ff4:	d14e      	bne.n	8005094 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ffc:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d112      	bne.n	800502e <UART_Receive_IT+0x54>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10e      	bne.n	800502e <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005016:	89ba      	ldrh	r2, [r7, #12]
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	4013      	ands	r3, r2
 800501c:	b29a      	uxth	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
 800502c:	e00b      	b.n	8005046 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6551      	str	r1, [r2, #84]	; 0x54
 8005038:	89ba      	ldrh	r2, [r7, #12]
 800503a:	b2d1      	uxtb	r1, r2
 800503c:	89fa      	ldrh	r2, [r7, #14]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	400a      	ands	r2, r1
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4619      	mov	r1, r3
 8005056:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 800505a:	2b00      	cmp	r3, #0
 800505c:	d118      	bne.n	8005090 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800506c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	6892      	ldr	r2, [r2, #8]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f003 fb3c 	bl	8008704 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e00c      	b.n	80050aa <UART_Receive_IT+0xd0>
    }

    return HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	e00a      	b.n	80050aa <UART_Receive_IT+0xd0>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	8b12      	ldrh	r2, [r2, #24]
 800509e:	b292      	uxth	r2, r2
 80050a0:	f042 0208 	orr.w	r2, r2, #8
 80050a4:	b292      	uxth	r2, r2
 80050a6:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c6:	b084      	sub	sp, #16
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	f107 0014 	add.w	r0, r7, #20
 80050d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 f8b3 	bl	8006250 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fe:	b004      	add	sp, #16
 8005100:	4770      	bx	lr

08005102 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 0201 	bic.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_HOST_MODE)
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d106      	bne.n	8005172 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e008      	b.n	8005184 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_DEVICE_MODE)
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8005184:	2032      	movs	r0, #50	; 0x32
 8005186:	f7fb fa59 	bl	800063c <HAL_Delay>
  
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 001c 	add.w	r0, r7, #28
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80051b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051e6:	461a      	mov	r2, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	461a      	mov	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6013      	str	r3, [r2, #0]
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80051fe:	2103      	movs	r1, #3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f93d 	bl	8005480 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8005206:	2110      	movs	r1, #16
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8f1 	bl	80053f0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f914 	bl	800543c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	461a      	mov	r2, r3
 8005242:	2300      	movs	r3, #0
 8005244:	61d3      	str	r3, [r2, #28]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e034      	b.n	80052b6 <USB_DevInit+0x122>
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d10a      	bne.n	800527a <USB_DevInit+0xe6>
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e008      	b.n	800528c <USB_DevInit+0xf8>
    }
    else
    {
      USBx_INEP(index)->DIEPCTL = 0;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	461a      	mov	r2, r3
 8005288:	2300      	movs	r3, #0
 800528a:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	461a      	mov	r2, r3
 800529a:	2300      	movs	r3, #0
 800529c:	6113      	str	r3, [r2, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	461a      	mov	r2, r3
 80052ac:	23ff      	movs	r3, #255	; 0xff
 80052ae:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d8c6      	bhi.n	800524c <USB_DevInit+0xb8>
  }
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e034      	b.n	800532e <USB_DevInit+0x19a>
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052da:	d10a      	bne.n	80052f2 <USB_DevInit+0x15e>
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e008      	b.n	8005304 <USB_DevInit+0x170>
    }
    else
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	2300      	movs	r3, #0
 8005302:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	23ff      	movs	r3, #255	; 0xff
 8005326:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8c6      	bhi.n	80052c4 <USB_DevInit+0x130>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534a:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1)
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2b01      	cmp	r3, #1
 8005350:	d117      	bne.n	8005382 <USB_DevInit+0x1ee>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005358:	461a      	mov	r2, r3
 800535a:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <USB_DevInit+0x254>)
 800535c:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	f043 0303 	orr.w	r3, r3, #3
 8005376:	6313      	str	r3, [r2, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800538e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <USB_DevInit+0x20e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f043 0210 	orr.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	619a      	str	r2, [r3, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <USB_DevInit+0x258>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f043 0208 	orr.w	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d107      	bne.n	80053d6 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e2:	b004      	add	sp, #16
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	00800100 	.word	0x00800100
 80053ec:	803c3800 	.word	0x803c3800

080053f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <USB_FlushTxFifo+0x48>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d0f0      	beq.n	800540a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	00030d40 	.word	0x00030d40

0800543c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2210      	movs	r2, #16
 800544c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <USB_FlushRxFifo+0x40>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e006      	b.n	800546e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b10      	cmp	r3, #16
 800546a:	d0f0      	beq.n	800544e <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	00030d40 	.word	0x00030d40

08005480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	4619      	mov	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d13e      	bne.n	8005540 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	4619      	mov	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	2301      	movs	r3, #1
 80054da:	4083      	lsls	r3, r0
 80054dc:	b29b      	uxth	r3, r3
 80054de:	4313      	orrs	r3, r2
 80054e0:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d15c      	bne.n	80055b4 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	4618      	mov	r0, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	78c9      	ldrb	r1, [r1, #3]
 8005526:	0489      	lsls	r1, r1, #18
 8005528:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	7809      	ldrb	r1, [r1, #0]
 800552e:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8005530:	430b      	orrs	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	e039      	b.n	80055b4 <USB_ActivateEndpoint+0x104>
    } 

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	4619      	mov	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	7812      	ldrb	r2, [r2, #0]
 8005554:	4610      	mov	r0, r2
 8005556:	2201      	movs	r2, #1
 8005558:	4082      	lsls	r2, r0
 800555a:	0412      	lsls	r2, r2, #16
 800555c:	4313      	orrs	r3, r2
 800555e:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11d      	bne.n	80055b4 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	4618      	mov	r0, r3
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	78c9      	ldrb	r1, [r1, #3]
 80055a4:	0489      	lsls	r1, r1, #18
 80055a6:	430b      	orrs	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	f040 8137 	bne.w	800584e <USB_EPStartXfer+0x28a>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d13b      	bne.n	8005660 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	4619      	mov	r1, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800560c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005610:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	4619      	mov	r1, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005636:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	4619      	mov	r1, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	0cdb      	lsrs	r3, r3, #19
 800565a:	04db      	lsls	r3, r3, #19
 800565c:	610b      	str	r3, [r1, #16]
 800565e:	e086      	b.n	800576e <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	4619      	mov	r1, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	0cdb      	lsrs	r3, r3, #19
 8005682:	04db      	lsls	r3, r3, #19
 8005684:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	4619      	mov	r1, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	4618      	mov	r0, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6959      	ldr	r1, [r3, #20]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	440b      	add	r3, r1
 80056da:	1e59      	subs	r1, r3, #1
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e4:	04d9      	lsls	r1, r3, #19
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <USB_EPStartXfer+0x338>)
 80056e8:	400b      	ands	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	4619      	mov	r1, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	78db      	ldrb	r3, [r3, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d125      	bne.n	800576e <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	4619      	mov	r1, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005746:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	4619      	mov	r1, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576c:	610b      	str	r3, [r1, #16]
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	78db      	ldrb	r3, [r3, #3]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d012      	beq.n	800579c <USB_EPStartXfer+0x1d8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <USB_EPStartXfer+0x1d8>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	4619      	mov	r1, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	4610      	mov	r0, r2
 8005794:	2201      	movs	r2, #1
 8005796:	4082      	lsls	r2, r0
 8005798:	4313      	orrs	r3, r2
 800579a:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }

    if (ep->type == EP_TYPE_ISOC)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	78db      	ldrb	r3, [r3, #3]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d12e      	bne.n	8005802 <USB_EPStartXfer+0x23e>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d113      	bne.n	80057dc <USB_EPStartXfer+0x218>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	4619      	mov	r1, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d8:	600b      	str	r3, [r1, #0]
 80057da:	e012      	b.n	8005802 <USB_EPStartXfer+0x23e>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	4619      	mov	r1, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005800:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	4619      	mov	r1, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005826:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	78db      	ldrb	r3, [r3, #3]
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 80e8 	bne.w	8005a02 <USB_EPStartXfer+0x43e>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	b298      	uxth	r0, r3
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	4603      	mov	r3, r0
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fa23 	bl	8005c92 <USB_WritePacket>
 800584c:	e0d9      	b.n	8005a02 <USB_EPStartXfer+0x43e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	4619      	mov	r1, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	0cdb      	lsrs	r3, r3, #19
 8005870:	04db      	lsls	r3, r3, #19
 8005872:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	4619      	mov	r1, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005898:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800589c:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len == 0)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12c      	bne.n	8005900 <USB_EPStartXfer+0x33c>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	4619      	mov	r1, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ce:	4313      	orrs	r3, r2
 80058d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	4619      	mov	r1, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f6:	610b      	str	r3, [r1, #16]
 80058f8:	e03d      	b.n	8005976 <USB_EPStartXfer+0x3b2>
 80058fa:	bf00      	nop
 80058fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4413      	add	r3, r2
 800590a:	1e5a      	subs	r2, r3, #1
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	4619      	mov	r1, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	8afb      	ldrh	r3, [r7, #22]
 8005938:	04db      	lsls	r3, r3, #19
 800593a:	4618      	mov	r0, r3
 800593c:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <USB_EPStartXfer+0x448>)
 800593e:	4003      	ands	r3, r0
 8005940:	4313      	orrs	r3, r2
 8005942:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	4618      	mov	r0, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	8af9      	ldrh	r1, [r7, #22]
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005972:	4313      	orrs	r3, r2
 8005974:	6103      	str	r3, [r0, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d12e      	bne.n	80059dc <USB_EPStartXfer+0x418>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <USB_EPStartXfer+0x3f2>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	4619      	mov	r1, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059b2:	600b      	str	r3, [r1, #0]
 80059b4:	e012      	b.n	80059dc <USB_EPStartXfer+0x418>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	4619      	mov	r1, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059da:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	4619      	mov	r1, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a00:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	1ff80000 	.word	0x1ff80000

08005a10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	f040 80c2 	bne.w	8005bac <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d13b      	bne.n	8005aa8 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a58:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	4619      	mov	r1, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	4619      	mov	r1, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	0cdb      	lsrs	r3, r3, #19
 8005aa2:	04db      	lsls	r3, r3, #19
 8005aa4:	610b      	str	r3, [r1, #16]
 8005aa6:	e05a      	b.n	8005b5e <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	0cdb      	lsrs	r3, r3, #19
 8005aca:	04db      	lsls	r3, r3, #19
 8005acc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	4619      	mov	r1, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af6:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b30:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	4619      	mov	r1, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <USB_EP0StartXfer+0x174>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4082      	lsls	r2, r0
 8005b80:	4313      	orrs	r3, r2
 8005b82:	634b      	str	r3, [r1, #52]	; 0x34
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	4619      	mov	r1, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ba8:	600b      	str	r3, [r1, #0]
 8005baa:	e06b      	b.n	8005c84 <USB_EP0StartXfer+0x274>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	0cdb      	lsrs	r3, r3, #19
 8005bce:	04db      	lsls	r3, r3, #19
 8005bd0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	4619      	mov	r1, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bfa:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <USB_EP0StartXfer+0x1fc>
    {
      ep->xfer_len = ep->maxpacket;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	4619      	mov	r1, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	610b      	str	r3, [r1, #16]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c82:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	71fb      	strb	r3, [r7, #7]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80bb      	strh	r3, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  count32b =  (len + 3) / 4;
 8005cb0:	88bb      	ldrh	r3, [r7, #4]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da00      	bge.n	8005cba <USB_WritePacket+0x28>
 8005cb8:	3303      	adds	r3, #3
 8005cba:	109b      	asrs	r3, r3, #2
 8005cbc:	613b      	str	r3, [r7, #16]
  for (index = 0; index < count32b; index++, src += 4)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e00f      	b.n	8005ce4 <USB_WritePacket+0x52>
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	031a      	lsls	r2, r3, #12
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6013      	str	r3, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3eb      	bcc.n	8005cc4 <USB_WritePacket+0x32>
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	4613      	mov	r3, r2
 8005d06:	80fb      	strh	r3, [r7, #6]
  uint32_t index=0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	3303      	adds	r3, #3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da00      	bge.n	8005d16 <USB_ReadPacket+0x1c>
 8005d14:	3303      	adds	r3, #3
 8005d16:	109b      	asrs	r3, r3, #2
 8005d18:	613b      	str	r3, [r7, #16]
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e00b      	b.n	8005d38 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	601a      	str	r2, [r3, #0]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	3304      	adds	r3, #4
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d3ef      	bcc.n	8005d20 <USB_ReadPacket+0x26>
    
  }
  return ((void *)dest);
 8005d40:	68bb      	ldr	r3, [r7, #8]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <USB_EPSetStall>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d130      	bne.n	8005dc2 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db12      	blt.n	8005d9a <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	4619      	mov	r1, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	4619      	mov	r1, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dbe:	600b      	str	r3, [r1, #0]
 8005dc0:	e02f      	b.n	8005e22 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db12      	blt.n	8005dfc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	4619      	mov	r1, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dfa:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e20:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_EPClearStall>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d12e      	bne.n	8005ea0 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	4619      	mov	r1, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e66:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d003      	beq.n	8005e78 <USB_EPClearStall+0x48>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d141      	bne.n	8005efc <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	4619      	mov	r1, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	e02d      	b.n	8005efc <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	4619      	mov	r1, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec4:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d003      	beq.n	8005ed6 <USB_EPClearStall+0xa6>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	78db      	ldrb	r3, [r3, #3]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d112      	bne.n	8005efc <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e014      	b.n	8005f42 <USB_StopDevice+0x38>
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	461a      	mov	r2, r3
 8005f26:	23ff      	movs	r3, #255	; 0xff
 8005f28:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	461a      	mov	r2, r3
 8005f38:	23ff      	movs	r3, #255	; 0xff
 8005f3a:	6093      	str	r3, [r2, #8]
  for (index = 0; index < 15 ; index++)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b0e      	cmp	r3, #14
 8005f46:	d9e7      	bls.n	8005f18 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
 8005f54:	6193      	str	r3, [r2, #24]
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	61d3      	str	r3, [r2, #28]
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fa5e 	bl	800543c <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 8005f80:	2110      	movs	r1, #16
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fa34 	bl	80053f0 <USB_FlushTxFifo>
  
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USB_SetDevAddress>:
  * @param  address: new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fba:	4619      	mov	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f023 0302 	bic.w	r3, r3, #2
 8005ffa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8005ffc:	2003      	movs	r0, #3
 8005ffe:	f7fa fb1d 	bl	800063c <HAL_Delay>
  
  return HAL_OK;  
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800602a:	2003      	movs	r0, #3
 800602c:	f7fa fb06 	bl	800063c <HAL_Delay>
  
  return HAL_OK;  
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->GINTSTS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4013      	ands	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  return tmpreg;  
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xffff0000) >> 16);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	0c1b      	lsrs	r3, r3, #16
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4013      	ands	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xFFFF));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	b29b      	uxth	r3, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4013      	ands	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0, msk = 0, emp = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
  
  msk = USBx_DEVICE->DIEPMSK;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	b2db      	uxtb	r3, r3
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4013      	ands	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
  return tmpreg;
 800614e:	697b      	ldr	r3, [r7, #20]
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0301 	and.w	r3, r3, #1
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006194:	f023 0307 	bic.w	r3, r3, #7
 8006198:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0306 	and.w	r3, r3, #6
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d10a      	bne.n	80061c0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f043 0303 	orr.w	r3, r3, #3
 80061be:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup: pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	460b      	mov	r3, r1
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	72fb      	strb	r3, [r7, #11]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006212:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f043 0318 	orr.w	r3, r3, #24
 8006228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	461a      	mov	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800623e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <USB_CoreReset+0x64>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e01b      	b.n	80062a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	daf2      	bge.n	800625c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f043 0201 	orr.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <USB_CoreReset+0x64>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e006      	b.n	80062a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d0f0      	beq.n	8006286 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	00030d40 	.word	0x00030d40

080062b8 <NVIC_SystemReset>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80062bc:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80062c0:	4905      	ldr	r1, [pc, #20]	; (80062d8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <NVIC_SystemReset+0x20>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80062ca:	4b04      	ldr	r3, [pc, #16]	; (80062dc <NVIC_SystemReset+0x24>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60cb      	str	r3, [r1, #12]
 80062d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80062d4:	bf00      	nop
    __NOP();
 80062d6:	e7fd      	b.n	80062d4 <NVIC_SystemReset+0x1c>
 80062d8:	e000ed00 	.word	0xe000ed00
 80062dc:	05fa0004 	.word	0x05fa0004

080062e0 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  
 /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_DFU_HandleTypeDef));
 80062ec:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80062f0:	f003 f808 	bl	8009304 <USBD_static_malloc>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL; 
 8006306:	2302      	movs	r3, #2
 8006308:	e03f      	b.n	800638a <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006310:	60fb      	str	r3, [r7, #12]
    
    hdfu->alt_setting = 0;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006320:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    hdfu->wblock_num = 0;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    
    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
    hdfu->dev_state = DFU_STATE_IDLE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;   
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = DFU_STATE_IDLE;    
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0;    
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    
    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8006384:	2302      	movs	r3, #2
 8006386:	e000      	b.n	800638a <USBD_DFU_Init+0xaa>
    }   
  }
  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063a4:	60fb      	str	r3, [r7, #12]
  
  hdfu->wblock_num = 0;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wlength = 0;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

  hdfu->dev_state = DFU_STATE_IDLE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit(); 
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063e8:	4618      	mov	r0, r3
 80063ea:	f002 ff99 	bl	8009320 <USBD_static_free>
    pdev->pClassData = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  } 

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint8_t *pbuf = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
  uint16_t len = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	827b      	strh	r3, [r7, #18]
  uint8_t ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	747b      	strb	r3, [r7, #17]
  USBD_DFU_HandleTypeDef   *hdfu;
  
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800641c:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006426:	2b00      	cmp	r3, #0
 8006428:	d03d      	beq.n	80064a6 <USBD_DFU_Setup+0xa6>
 800642a:	2b20      	cmp	r3, #32
 800642c:	d17b      	bne.n	8006526 <USBD_DFU_Setup+0x126>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d82f      	bhi.n	8006496 <USBD_DFU_Setup+0x96>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <USBD_DFU_Setup+0x3c>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800648d 	.word	0x0800648d
 8006440:	08006459 	.word	0x08006459
 8006444:	08006463 	.word	0x08006463
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006485 	.word	0x08006485
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa4c 	bl	80068f8 <DFU_Download>
      break;
 8006460:	e020      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_UPLOAD:
      DFU_Upload(pdev, req);   
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fab1 	bl	80069cc <DFU_Upload>
      break;
 800646a:	e01b      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fb89 	bl	8006b84 <DFU_GetStatus>
      break;
 8006472:	e017      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc37 	bl	8006ce8 <DFU_ClearStatus>
      break;      
 800647a:	e013      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_GETSTATE:
      DFU_GetState(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc83 	bl	8006d88 <DFU_GetState>
      break;  
 8006482:	e00f      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_ABORT:
      DFU_Abort(pdev);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fc93 	bl	8006db0 <DFU_Abort>
      break;
 800648a:	e00b      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
    case DFU_DETACH:
      DFU_Detach(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9d2 	bl	8006838 <DFU_Detach>
      break;
 8006494:	e006      	b.n	80064a4 <USBD_DFU_Setup+0xa4>
      
      
    default:
      USBD_CtlError (pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fbd1 	bl	8007c40 <USBD_CtlError>
      ret = USBD_FAIL; 
 800649e:	2302      	movs	r3, #2
 80064a0:	747b      	strb	r3, [r7, #17]
    }
    break;
 80064a2:	e040      	b.n	8006526 <USBD_DFU_Setup+0x126>
 80064a4:	e03f      	b.n	8006526 <USBD_DFU_Setup+0x126>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b0a      	cmp	r3, #10
 80064ac:	d018      	beq.n	80064e0 <USBD_DFU_Setup+0xe0>
 80064ae:	2b0b      	cmp	r3, #11
 80064b0:	d01f      	beq.n	80064f2 <USBD_DFU_Setup+0xf2>
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d131      	bne.n	800651a <USBD_DFU_Setup+0x11a>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	885b      	ldrh	r3, [r3, #2]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b21      	cmp	r3, #33	; 0x21
 80064c0:	d107      	bne.n	80064d2 <USBD_DFU_Setup+0xd2>
      {
        pbuf = USBD_DFU_CfgDesc + (9 * (USBD_DFU_MAX_ITF_NUM + 1));
 80064c2:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <USBD_DFU_Setup+0x130>)
 80064c4:	617b      	str	r3, [r7, #20]
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	88db      	ldrh	r3, [r3, #6]
 80064ca:	2b09      	cmp	r3, #9
 80064cc:	bf28      	it	cs
 80064ce:	2309      	movcs	r3, #9
 80064d0:	827b      	strh	r3, [r7, #18]
      }
      
      USBD_CtlSendData (pdev, 
 80064d2:	8a7b      	ldrh	r3, [r7, #18]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 fc1d 	bl	8007d18 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 80064de:	e022      	b.n	8006526 <USBD_DFU_Setup+0x126>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hdfu->alt_setting,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f203 4314 	addw	r3, r3, #1044	; 0x414
      USBD_CtlSendData (pdev,
 80064e6:	2201      	movs	r2, #1
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fc14 	bl	8007d18 <USBD_CtlSendData>
                        1);
      break;
 80064f0:	e019      	b.n	8006526 <USBD_DFU_Setup+0x126>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <USBD_DFU_Setup+0x10c>
      {
        hdfu->alt_setting = (uint8_t)(req->wValue);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	885b      	ldrh	r3, [r3, #2]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;  
      }
      break;
 800650a:	e00c      	b.n	8006526 <USBD_DFU_Setup+0x126>
        USBD_CtlError (pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fb96 	bl	8007c40 <USBD_CtlError>
        ret = USBD_FAIL;  
 8006514:	2302      	movs	r3, #2
 8006516:	747b      	strb	r3, [r7, #17]
      break;
 8006518:	e005      	b.n	8006526 <USBD_DFU_Setup+0x126>
      
    default:
      USBD_CtlError (pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fb8f 	bl	8007c40 <USBD_CtlError>
      ret = USBD_FAIL;     
 8006522:	2302      	movs	r3, #2
 8006524:	747b      	strb	r3, [r7, #17]
    }
  }
  return ret;
 8006526:	7c7b      	ldrb	r3, [r7, #17]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	2000004e 	.word	0x2000004e

08006534 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc (uint16_t *length)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DFU_CfgDesc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	221b      	movs	r2, #27
 8006540:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	2000003c 	.word	0x2000003c

08006554 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 uint32_t addr;
 USBD_SetupReqTypedef     req; 
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006592:	617b      	str	r3, [r7, #20]
  
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800659a:	2b04      	cmp	r3, #4
 800659c:	f040 80cb 	bne.w	8006736 <USBD_DFU_EP0_TxReady+0x1b2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0)   
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 8086 	bne.w	80066b8 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] ==  DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1))
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <USBD_DFU_EP0_TxReady+0x3c>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	f000 809b 	beq.w	80066f6 <USBD_DFU_EP0_TxReady+0x172>
      {
       
      }
      else if  (( hdfu->buffer.d8[0] ==  DFU_CMD_SETADDRESSPOINTER ) && (hdfu->wlength == 5))
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b21      	cmp	r3, #33	; 0x21
 80065c6:	d129      	bne.n	800661c <USBD_DFU_EP0_TxReady+0x98>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d124      	bne.n	800661c <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	461a      	mov	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	7892      	ldrb	r2, [r2, #2]
 80065e8:	0212      	lsls	r2, r2, #8
 80065ea:	441a      	add	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	78d2      	ldrb	r2, [r2, #3]
 80065fc:	0412      	lsls	r2, r2, #16
 80065fe:	441a      	add	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	7912      	ldrb	r2, [r2, #4]
 8006610:	0612      	lsls	r2, r2, #24
 8006612:	441a      	add	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800661a:	e06c      	b.n	80066f6 <USBD_DFU_EP0_TxReady+0x172>
      }
      else if (( hdfu->buffer.d8[0] ==  DFU_CMD_ERASE ) && (hdfu->wlength == 5))
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b41      	cmp	r3, #65	; 0x41
 8006622:	d136      	bne.n	8006692 <USBD_DFU_EP0_TxReady+0x10e>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800662a:	2b05      	cmp	r3, #5
 800662c:	d131      	bne.n	8006692 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	461a      	mov	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	7892      	ldrb	r2, [r2, #2]
 8006644:	0212      	lsls	r2, r2, #8
 8006646:	441a      	add	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	78d2      	ldrb	r2, [r2, #3]
 8006658:	0412      	lsls	r2, r2, #16
 800665a:	441a      	add	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	7912      	ldrb	r2, [r2, #4]
 800666c:	0612      	lsls	r2, r2, #24
 800666e:	441a      	add	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
       
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	f8d2 2410 	ldr.w	r2, [r2, #1040]	; 0x410
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d033      	beq.n	80066f6 <USBD_DFU_EP0_TxReady+0x172>
        {
          return USBD_FAIL;
 800668e:	2302      	movs	r3, #2
 8006690:	e05a      	b.n	8006748 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        hdfu->wblock_num = 0;     
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	723b      	strb	r3, [r7, #8]
        req.wLength = 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError (pdev, &req);
 80066aa:	f107 0308 	add.w	r3, r7, #8
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fac5 	bl	8007c40 <USBD_CtlError>
 80066b6:	e01e      	b.n	80066f6 <USBD_DFU_EP0_TxReady+0x172>
      }
    }
    /* Regular Download Command */
    else if (hdfu->wblock_num > 1)  
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d919      	bls.n	80066f6 <USBD_DFU_EP0_TxReady+0x172>
    {
      /* Decode the required address */
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80066c8:	4b21      	ldr	r3, [pc, #132]	; (8006750 <USBD_DFU_EP0_TxReady+0x1cc>)
 80066ca:	4413      	add	r3, r2
 80066cc:	029a      	lsls	r2, r3, #10
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80066d4:	4413      	add	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
      
      /* Preform the write operation */
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	6939      	ldr	r1, [r7, #16]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
 80066ea:	4798      	blx	r3
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <USBD_DFU_EP0_TxReady+0x172>
      {
        return USBD_FAIL;
 80066f2:	2302      	movs	r3, #2
 80066f4:	e028      	b.n	8006748 <USBD_DFU_EP0_TxReady+0x1c4>
      }      
    }
    /* Reset the global length and block number */
    hdfu->wlength = 0;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->wblock_num = 0;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    
    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2203      	movs	r2, #3
 800670a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

    hdfu->dev_status[1] = 0;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;    
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    return USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e008      	b.n	8006748 <USBD_DFU_EP0_TxReady+0x1c4>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress*/
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800673c:	2b07      	cmp	r3, #7
 800673e:	d102      	bne.n	8006746 <USBD_DFU_EP0_TxReady+0x1c2>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fb83 	bl	8006e4c <DFU_Leave>
  }
  
  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	003ffffe 	.word	0x003ffffe

08006754 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF (USBD_HandleTypeDef *pdev)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc (uint16_t *length)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DFU_DeviceQualifierDesc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	220a      	movs	r2, #10
 80067c4:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20000058 	.word	0x20000058

080067d8 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING == 1)  
static uint8_t* USBD_DFU_GetUsrStringDesc (USBD_HandleTypeDef *pdev, uint8_t index , uint16_t *length)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	460b      	mov	r3, r1
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b06      	cmp	r3, #6
 80067ea:	d80a      	bhi.n	8006802 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString ((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4905      	ldr	r1, [pc, #20]	; (800680c <USBD_DFU_GetUsrStringDesc+0x34>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fa32 	bl	8007c62 <USBD_GetString>
    return USBD_StrDesc;  
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_DFU_GetUsrStringDesc+0x34>)
 8006800:	e000      	b.n	8006804 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8006802:	2300      	movs	r3, #0
  }
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000148 	.word	0x20000148

08006810 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia    (USBD_HandleTypeDef   *pdev, 
                                    USBD_DFU_MediaTypeDef *fops)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData= fops;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006848:	60fb      	str	r3, [r7, #12]
 
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006850:	2b02      	cmp	r3, #2
 8006852:	d013      	beq.n	800687c <DFU_Detach+0x44>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800685a:	2b03      	cmp	r3, #3
 800685c:	d00e      	beq.n	800687c <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006864:	2b05      	cmp	r3, #5
 8006866:	d009      	beq.n	800687c <DFU_Detach+0x44>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800686e:	2b06      	cmp	r3, #6
 8006870:	d004      	beq.n	800687c <DFU_Detach+0x44>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006878:	2b09      	cmp	r3, #9
 800687a:	d125      	bne.n	80068c8 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0; /*iString*/
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    hdfu->wblock_num = 0;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  } 
  
  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12 + (9 * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <DFU_Detach+0xbc>)
 80068ca:	7d5b      	ldrb	r3, [r3, #21]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d006      	beq.n	80068e2 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop (pdev);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb5a 	bl	8006f8e <USBD_Stop>
    USBD_Start (pdev);  
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb4b 	bl	8006f76 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay (req->wValue);  
  }
}
 80068e0:	e004      	b.n	80068ec <DFU_Detach+0xb4>
    USBD_Delay (req->wValue);  
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7f9 fea8 	bl	800063c <HAL_Delay>
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	2000003c 	.word	0x2000003c

080068f8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006908:	60fb      	str	r3, [r7, #12]
 
  /* Data setup request */
  if (req->wLength > 0)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	88db      	ldrh	r3, [r3, #6]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02e      	beq.n	8006970 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006918:	2b02      	cmp	r3, #2
 800691a:	d004      	beq.n	8006926 <DFU_Download+0x2e>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006922:	2b05      	cmp	r3, #5
 8006924:	d11f      	bne.n	8006966 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	461a      	mov	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      hdfu->wlength = req->wLength;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88db      	ldrh	r3, [r3, #6]
 8006936:	461a      	mov	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      
      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2203      	movs	r2, #3
 8006942:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[4] = hdfu->dev_state;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
      
      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx (pdev,
                         (uint8_t*)hdfu->buffer.d8,                                  
 8006952:	68f9      	ldr	r1, [r7, #12]
                         hdfu->wlength);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
      USBD_CtlPrepareRx (pdev,
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fa08 	bl	8007d74 <USBD_CtlPrepareRx>
 8006964:	e02e      	b.n	80069c4 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 f969 	bl	8007c40 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
    }
  }  
}
 800696e:	e029      	b.n	80069c4 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006976:	2b05      	cmp	r3, #5
 8006978:	d004      	beq.n	8006984 <DFU_Download+0x8c>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006980:	2b02      	cmp	r3, #2
 8006982:	d11a      	bne.n	80069ba <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2206      	movs	r2, #6
 8006990:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;        
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 80069b8:	e004      	b.n	80069c4 <DFU_Download+0xcc>
      USBD_CtlError (pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 f93f 	bl	8007c40 <USBD_CtlError>
}
 80069c2:	e7ff      	b.n	80069c4 <DFU_Download+0xcc>
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069dc:	617b      	str	r3, [r7, #20]
 
  uint8_t *phaddr = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  
  /* Data setup request */
  if (req->wLength > 0)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	88db      	ldrh	r3, [r3, #6]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80ac 	beq.w	8006b48 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d005      	beq.n	8006a06 <DFU_Upload+0x3a>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006a00:	2b09      	cmp	r3, #9
 8006a02:	f040 8094 	bne.w	8006b2e <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	885b      	ldrh	r3, [r3, #2]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      hdfu->wlength = req->wLength;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	88db      	ldrh	r3, [r3, #6]
 8006a16:	461a      	mov	r2, r3
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      
      /* DFU Get Command */
      if (hdfu->wblock_num == 0)  
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d12c      	bne.n	8006a82 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d901      	bls.n	8006a36 <DFU_Upload+0x6a>
 8006a32:	2202      	movs	r2, #2
 8006a34:	e000      	b.n	8006a38 <DFU_Upload+0x6c>
 8006a36:	2209      	movs	r2, #9
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    
        hdfu->dev_status[1] = 0;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;       
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
        
        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2221      	movs	r2, #33	; 0x21
 8006a6c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2241      	movs	r2, #65	; 0x41
 8006a72:	709a      	strb	r2, [r3, #2]
        
        /* Send the status data over EP0 */
        USBD_CtlSendData (pdev,
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2203      	movs	r2, #3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f94c 	bl	8007d18 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0)  
 8006a80:	e079      	b.n	8006b76 <DFU_Upload+0x1aa>
                          (uint8_t *)(&(hdfu->buffer.d8[0])),
                          3);
      }
      else if (hdfu->wblock_num > 1)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d935      	bls.n	8006af8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE ;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2209      	movs	r2, #9
 8006a90:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        
        hdfu->dev_status[1] = 0;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
        
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006abe:	4b30      	ldr	r3, [pc, #192]	; (8006b80 <DFU_Upload+0x1b4>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	029a      	lsls	r2, r3, #10
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006aca:	4413      	add	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
        
        /* Return the physical address where data are stored */
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	6979      	ldr	r1, [r7, #20]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
 8006ae0:	4798      	blx	r3
 8006ae2:	6138      	str	r0, [r7, #16]
        
        /* Send the status data over EP0 */
        USBD_CtlSendData (pdev,
                          phaddr,
                          hdfu->wlength);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
        USBD_CtlSendData (pdev,
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	6939      	ldr	r1, [r7, #16]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f911 	bl	8007d18 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0)  
 8006af6:	e03e      	b.n	8006b76 <DFU_Upload+0x1aa>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	220f      	movs	r2, #15
 8006afc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        
        hdfu->dev_status[1] = 0;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;        
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
        
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req); 
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f88a 	bl	8007c40 <USBD_CtlError>
      if (hdfu->wblock_num == 0)  
 8006b2c:	e023      	b.n	8006b76 <DFU_Upload+0x1aa>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      hdfu->wblock_num = 0;   
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f87d 	bl	8007c40 <USBD_CtlError>
    hdfu->dev_status[1] = 0;
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8006b46:	e016      	b.n	8006b76 <DFU_Upload+0x1aa>
    hdfu->dev_state = DFU_STATE_IDLE;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    hdfu->dev_status[1] = 0;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
}
 8006b74:	e7ff      	b.n	8006b76 <DFU_Upload+0x1aa>
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	003ffffe 	.word	0x003ffffe

08006b84 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b92:	60fb      	str	r3, [r7, #12]
 
  switch (hdfu->dev_state)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d002      	beq.n	8006ba4 <DFU_GetStatus+0x20>
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d055      	beq.n	8006c4e <DFU_GetStatus+0xca>
      hdfu->dev_status[4] = hdfu->dev_state;      
    }
    break;
    
  default :
    break;
 8006ba2:	e092      	b.n	8006cca <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d038      	beq.n	8006c20 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d110      	bne.n	8006c06 <DFU_GetStatus+0x82>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b41      	cmp	r3, #65	; 0x41
 8006bea:	d10c      	bne.n	8006c06 <DFU_GetStatus+0x82>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f202 4201 	addw	r2, r2, #1025	; 0x401
 8006c00:	2100      	movs	r1, #0
 8006c02:	4798      	blx	r3
    break;
 8006c04:	e061      	b.n	8006cca <DFU_GetStatus+0x146>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f202 4201 	addw	r2, r2, #1025	; 0x401
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4798      	blx	r3
    break;
 8006c1e:	e054      	b.n	8006cca <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2205      	movs	r2, #5
 8006c24:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;     
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    break;
 8006c4c:	e03d      	b.n	8006cca <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d116      	bne.n	8006c86 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 1;             /*bwPollTimeout = 1ms*/
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;   
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    break;
 8006c84:	e020      	b.n	8006cc8 <DFU_GetStatus+0x144>
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11b      	bne.n	8006cc8 <DFU_GetStatus+0x144>
      ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04))
 8006c90:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <DFU_GetStatus+0x160>)
 8006c92:	7d1b      	ldrb	r3, [r3, #20]
 8006c94:	f003 0304 	and.w	r3, r3, #4
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <DFU_GetStatus+0x144>
      hdfu->dev_state = DFU_STATE_IDLE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;      
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    break;
 8006cc8:	bf00      	nop
  }
  
  /* Send the status data over EP0 */
  USBD_CtlSendData (pdev,
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f203 4301 	addw	r3, r3, #1025	; 0x401
 8006cd0:	2206      	movs	r2, #6
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f81f 	bl	8007d18 <USBD_CtlSendData>
                    (uint8_t *)(&(hdfu->dev_status[0])),
                    6);
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2000003c 	.word	0x2000003c

08006ce8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cf6:	60fb      	str	r3, [r7, #12]
 
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006cfe:	2b0a      	cmp	r3, #10
 8006d00:	d11e      	bne.n	8006d40 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2202      	movs	r2, #2
 8006d06:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0;/*iString*/
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0;/*iString*/
  }
}
 8006d3e:	e01d      	b.n	8006d7c <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	220a      	movs	r2, #10
 8006d44:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	220e      	movs	r2, #14
 8006d4c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0;/*iString*/
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d96:	60fb      	str	r3, [r7, #12]
 
  /* Return the current state of the DFU interface */
  USBD_CtlSendData (pdev, 
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 ffb8 	bl	8007d18 <USBD_CtlSendData>
                    &hdfu->dev_state,
                    1);  
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006dbe:	60fb      	str	r3, [r7, #12]
 
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d013      	beq.n	8006df2 <DFU_Abort+0x42>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d00e      	beq.n	8006df2 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d009      	beq.n	8006df2 <DFU_Abort+0x42>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006de4:	2b06      	cmp	r3, #6
 8006de6:	d004      	beq.n	8006df2 <DFU_Abort+0x42>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006dee:	2b09      	cmp	r3, #9
 8006df0:	d125      	bne.n	8006e3e <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0; /*iString*/
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    hdfu->wblock_num = 0;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  }  
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006e5a:	60fb      	str	r3, [r7, #12]
 
 hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407

  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <DFU_Leave+0x9c>)
 8006e66:	7d1b      	ldrb	r3, [r3, #20]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d016      	beq.n	8006e9e <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2206      	movs	r2, #6
 8006e74:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

    hdfu->dev_status[1] = 0;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;       
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    return;
 8006e9c:	e020      	b.n	8006ee0 <DFU_Leave+0x94>
  }
  else
  {
    
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    
    hdfu->dev_status[1] = 0;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;     
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
    
    /* Disconnect the USB device */
    USBD_Stop (pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f85f 	bl	8006f8e <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4798      	blx	r3
    
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8006eda:	f7ff f9ed 	bl	80062b8 <NVIC_SystemReset>
   
    /* This instruction will not be reached (system reset) */
    for(;;);
 8006ede:	e7fe      	b.n	8006ede <DFU_Leave+0x92>
  }  
}
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2000003c 	.word	0x2000003c

08006eec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8006f00:	2302      	movs	r3, #2
 8006f02:	e01a      	b.n	8006f3a <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	79fa      	ldrb	r2, [r7, #7]
 8006f30:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f001 ff66 	bl	8008e04 <USBD_LL_Init>
  
  return USBD_OK; 
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e001      	b.n	8006f68 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8006f64:	2302      	movs	r3, #2
 8006f66:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 ff8c 	bl	8008e9c <USBD_LL_Start>
  
  return USBD_OK;  
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6852      	ldr	r2, [r2, #4]
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 ffa8 	bl	8008f00 <USBD_LL_Stop>
  
  return USBD_OK;  
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	4611      	mov	r1, r2
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fdbd 	bl	8007bc6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2b01      	cmp	r3, #1
 800706e:	d00b      	beq.n	8007088 <USBD_LL_SetupStage+0x54>
 8007070:	2b02      	cmp	r3, #2
 8007072:	d011      	beq.n	8007098 <USBD_LL_SetupStage+0x64>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d117      	bne.n	80070a8 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f9c7 	bl	8007414 <USBD_StdDevReq>
    break;
 8007086:	e01a      	b.n	80070be <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa0f 	bl	80074b4 <USBD_StdItfReq>
    break;
 8007096:	e012      	b.n	80070be <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa3a 	bl	800751a <USBD_StdEPReq>
    break;
 80070a6:	e00a      	b.n	80070be <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80070ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 ff92 	bl	8008fe0 <USBD_LL_StallEP>
    break;
 80070bc:	bf00      	nop
  }  
  return USBD_OK;  
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	460b      	mov	r3, r1
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d138      	bne.n	800714e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80070e2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d142      	bne.n	8007174 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d914      	bls.n	8007124 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4293      	cmp	r3, r2
 8007112:	bf28      	it	cs
 8007114:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fe47 	bl	8007db0 <USBD_CtlContinueRx>
 8007122:	e027      	b.n	8007174 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007136:	2b03      	cmp	r3, #3
 8007138:	d105      	bne.n	8007146 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fe44 	bl	8007dd4 <USBD_CtlSendStatus>
 800714c:	e012      	b.n	8007174 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8007160:	2b03      	cmp	r3, #3
 8007162:	d107      	bne.n	8007174 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	7afa      	ldrb	r2, [r7, #11]
 800716e:	4611      	mov	r1, r2
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	4798      	blx	r3
  }  
  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	460b      	mov	r3, r1
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d16c      	bne.n	800726c <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3314      	adds	r3, #20
 8007196:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d157      	bne.n	8007252 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d915      	bls.n	80071da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fdc2 	bl	8007d50 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f002 f80c 	bl	80091f0 <USBD_LL_PrepareReceive>
 80071d8:	e03b      	b.n	8007252 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	68d2      	ldr	r2, [r2, #12]
 80071e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e6:	fb02 f201 	mul.w	r2, r2, r1
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d11c      	bne.n	800722a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d316      	bcc.n	800722a <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8007206:	429a      	cmp	r2, r3
 8007208:	d20f      	bcs.n	800722a <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fd9e 	bl	8007d50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800721c:	2300      	movs	r3, #0
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 ffe4 	bl	80091f0 <USBD_LL_PrepareReceive>
 8007228:	e013      	b.n	8007252 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800723c:	2b03      	cmp	r3, #3
 800723e:	d105      	bne.n	800724c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fdd4 	bl	8007dfa <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007258:	2b01      	cmp	r3, #1
 800725a:	d11a      	bne.n	8007292 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff feac 	bl	8006fba <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800726a:	e012      	b.n	8007292 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800727e:	2b03      	cmp	r3, #3
 8007280:	d107      	bne.n	8007292 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	7afa      	ldrb	r2, [r7, #11]
 800728c:	4611      	mov	r1, r2
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	4798      	blx	r3
  }  
  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80072a4:	2340      	movs	r3, #64	; 0x40
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fe5a 	bl	8008f64 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2240      	movs	r2, #64	; 0x40
 80072b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80072b8:	2340      	movs	r3, #64	; 0x40
 80072ba:	2200      	movs	r2, #0
 80072bc:	2180      	movs	r1, #128	; 0x80
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fe50 	bl	8008f64 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2240      	movs	r2, #64	; 0x40
 80072c8:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	4611      	mov	r1, r2
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 
  
  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007374:	2b03      	cmp	r3, #3
 8007376:	d10b      	bne.n	8007390 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6852      	ldr	r2, [r2, #4]
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	4611      	mov	r1, r2
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
   
  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b09      	cmp	r3, #9
 8007428:	d839      	bhi.n	800749e <USBD_StdDevReq+0x8a>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <USBD_StdDevReq+0x1c>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007481 	.word	0x08007481
 8007434:	08007495 	.word	0x08007495
 8007438:	0800749f 	.word	0x0800749f
 800743c:	0800748b 	.word	0x0800748b
 8007440:	0800749f 	.word	0x0800749f
 8007444:	08007463 	.word	0x08007463
 8007448:	08007459 	.word	0x08007459
 800744c:	0800749f 	.word	0x0800749f
 8007450:	08007477 	.word	0x08007477
 8007454:	0800746d 	.word	0x0800746d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f936 	bl	80076cc <USBD_GetDescriptor>
    break;
 8007460:	e022      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa49 	bl	80078fc <USBD_SetAddress>
    break;
 800746a:	e01d      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa82 	bl	8007978 <USBD_SetConfig>
    break;
 8007474:	e018      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb05 	bl	8007a88 <USBD_GetConfig>
    break;
 800747e:	e013      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fb32 	bl	8007aec <USBD_GetStatus>
    break;
 8007488:	e00e      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fb57 	bl	8007b40 <USBD_SetFeature>
    break;
 8007492:	e009      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb6d 	bl	8007b76 <USBD_ClrFeature>
    break;
 800749c:	e004      	b.n	80074a8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbcd 	bl	8007c40 <USBD_CtlError>
    break;
 80074a6:	bf00      	nop
  }
  
  return ret;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop

080074b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d11b      	bne.n	8007504 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	889b      	ldrh	r3, [r3, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d811      	bhi.n	80074fa <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	88db      	ldrh	r3, [r3, #6]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d110      	bne.n	800750e <USBD_StdItfReq+0x5a>
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10d      	bne.n	800750e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc6e 	bl	8007dd4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80074f8:	e009      	b.n	800750e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb9f 	bl	8007c40 <USBD_CtlError>
    break;
 8007502:	e004      	b.n	800750e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb9a 	bl	8007c40 <USBD_CtlError>
    break;
 800750c:	e000      	b.n	8007510 <USBD_StdItfReq+0x5c>
    break;
 800750e:	bf00      	nop
  }
  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	889b      	ldrh	r3, [r3, #4]
 800752c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007536:	2b20      	cmp	r3, #32
 8007538:	d108      	bne.n	800754c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
    
    return USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e0ba      	b.n	80076c2 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d039      	beq.n	80075c8 <USBD_StdEPReq+0xae>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d002      	beq.n	800755e <USBD_StdEPReq+0x44>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d06b      	beq.n	8007634 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800755c:	e0b0      	b.n	80076c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007564:	2b02      	cmp	r3, #2
 8007566:	d002      	beq.n	800756e <USBD_StdEPReq+0x54>
 8007568:	2b03      	cmp	r3, #3
 800756a:	d00c      	beq.n	8007586 <USBD_StdEPReq+0x6c>
 800756c:	e025      	b.n	80075ba <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d027      	beq.n	80075c4 <USBD_StdEPReq+0xaa>
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d024      	beq.n	80075c4 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fd2e 	bl	8008fe0 <USBD_LL_StallEP>
      break;	
 8007584:	e01e      	b.n	80075c4 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <USBD_StdEPReq+0x8a>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d004      	beq.n	80075a4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fd1e 	bl	8008fe0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc0e 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 80075b8:	e005      	b.n	80075c6 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb3f 	bl	8007c40 <USBD_CtlError>
      break;    
 80075c2:	e000      	b.n	80075c6 <USBD_StdEPReq+0xac>
      break;	
 80075c4:	bf00      	nop
    break;
 80075c6:	e07b      	b.n	80076c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d002      	beq.n	80075d8 <USBD_StdEPReq+0xbe>
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d00c      	beq.n	80075f0 <USBD_StdEPReq+0xd6>
 80075d6:	e024      	b.n	8007622 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d026      	beq.n	800762c <USBD_StdEPReq+0x112>
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d023      	beq.n	800762c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fcf9 	bl	8008fe0 <USBD_LL_StallEP>
      break;	
 80075ee:	e01d      	b.n	800762c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11b      	bne.n	8007630 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fd20 	bl	800904c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fbda 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 8007620:	e006      	b.n	8007630 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb0b 	bl	8007c40 <USBD_CtlError>
      break;    
 800762a:	e002      	b.n	8007632 <USBD_StdEPReq+0x118>
      break;	
 800762c:	bf00      	nop
 800762e:	e047      	b.n	80076c0 <USBD_StdEPReq+0x1a6>
      break;
 8007630:	bf00      	nop
    break;
 8007632:	e045      	b.n	80076c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800763a:	2b02      	cmp	r3, #2
 800763c:	d002      	beq.n	8007644 <USBD_StdEPReq+0x12a>
 800763e:	2b03      	cmp	r3, #3
 8007640:	d00b      	beq.n	800765a <USBD_StdEPReq+0x140>
 8007642:	e036      	b.n	80076b2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764a:	2b00      	cmp	r3, #0
 800764c:	d036      	beq.n	80076bc <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fcc4 	bl	8008fe0 <USBD_LL_StallEP>
      break;	
 8007658:	e030      	b.n	80076bc <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800765a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da08      	bge.n	8007674 <USBD_StdEPReq+0x15a>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007668:	3301      	adds	r3, #1
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4413      	add	r3, r2
 8007670:	3304      	adds	r3, #4
 8007672:	e007      	b.n	8007684 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800767a:	3310      	adds	r3, #16
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	3304      	adds	r3, #4
 8007684:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fd14 	bl	80090b8 <USBD_LL_IsStallEP>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e002      	b.n	80076a4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80076a4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80076a6:	2202      	movs	r2, #2
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fb34 	bl	8007d18 <USBD_CtlSendData>
      break;
 80076b0:	e005      	b.n	80076be <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fac3 	bl	8007c40 <USBD_CtlError>
      break;
 80076ba:	e000      	b.n	80076be <USBD_StdEPReq+0x1a4>
      break;	
 80076bc:	bf00      	nop
    break;
 80076be:	bf00      	nop
  }
  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	2b0e      	cmp	r3, #14
 80076e2:	f200 80ed 	bhi.w	80078c0 <USBD_GetDescriptor+0x1f4>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBD_GetDescriptor+0x20>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007741 	.word	0x08007741
 80076f0:	08007759 	.word	0x08007759
 80076f4:	08007799 	.word	0x08007799
 80076f8:	080078c1 	.word	0x080078c1
 80076fc:	080078c1 	.word	0x080078c1
 8007700:	0800786d 	.word	0x0800786d
 8007704:	08007893 	.word	0x08007893
 8007708:	080078c1 	.word	0x080078c1
 800770c:	080078c1 	.word	0x080078c1
 8007710:	080078c1 	.word	0x080078c1
 8007714:	080078c1 	.word	0x080078c1
 8007718:	080078c1 	.word	0x080078c1
 800771c:	080078c1 	.word	0x080078c1
 8007720:	080078c1 	.word	0x080078c1
 8007724:	08007729 	.word	0x08007729
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 010a 	add.w	r1, r7, #10
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
    break;
 800773e:	e0c4      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 010a 	add.w	r1, r7, #10
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
    break;
 8007756:	e0b8      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c1b      	ldrb	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	f107 020a 	add.w	r2, r7, #10
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800777a:	e0a6      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	f107 020a 	add.w	r2, r7, #10
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
    break;
 8007796:	e098      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	885b      	ldrh	r3, [r3, #2]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d856      	bhi.n	8007850 <USBD_GetDescriptor+0x184>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBD_GetDescriptor+0xdc>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077f1 	.word	0x080077f1
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007821 	.word	0x08007821
 80077bc:	08007839 	.word	0x08007839
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	7c12      	ldrb	r2, [r2, #16]
 80077cc:	f107 010a 	add.w	r1, r7, #10
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
      break;
 80077d6:	e048      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	f107 010a 	add.w	r1, r7, #10
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
      break;
 80077ee:	e03c      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 010a 	add.w	r1, r7, #10
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
      break;
 8007806:	e030      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7c12      	ldrb	r2, [r2, #16]
 8007814:	f107 010a 	add.w	r1, r7, #10
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
      break;
 800781e:	e024      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	f107 010a 	add.w	r1, r7, #10
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
      break;
 8007836:	e018      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7c12      	ldrb	r2, [r2, #16]
 8007844:	f107 010a 	add.w	r1, r7, #10
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
      break;
 800784e:	e00c      	b.n	800786a <USBD_GetDescriptor+0x19e>
      
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	8852      	ldrh	r2, [r2, #2]
 800785c:	b2d1      	uxtb	r1, r2
 800785e:	f107 020a 	add.w	r2, r7, #10
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	60f8      	str	r0, [r7, #12]
      break;
 8007868:	bf00      	nop
#else      
       USBD_CtlError(pdev , req);
      return;
#endif   
    }
    break;
 800786a:	e02e      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7c1b      	ldrb	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <USBD_GetDescriptor+0x1bc>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f107 020a 	add.w	r2, r7, #10
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
      break;
 8007886:	e020      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9d8 	bl	8007c40 <USBD_CtlError>
      return;
 8007890:	e030      	b.n	80078f4 <USBD_GetDescriptor+0x228>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7c1b      	ldrb	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <USBD_GetDescriptor+0x1ea>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f107 020a 	add.w	r2, r7, #10
 80078a6:	4610      	mov	r0, r2
 80078a8:	4798      	blx	r3
 80078aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	2207      	movs	r2, #7
 80078b2:	701a      	strb	r2, [r3, #0]
      break; 
 80078b4:	e009      	b.n	80078ca <USBD_GetDescriptor+0x1fe>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9c1 	bl	8007c40 <USBD_CtlError>
      return;
 80078be:	e019      	b.n	80078f4 <USBD_GetDescriptor+0x228>
    }

  default: 
     USBD_CtlError(pdev , req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9bc 	bl	8007c40 <USBD_CtlError>
    return;
 80078c8:	e014      	b.n	80078f4 <USBD_GetDescriptor+0x228>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80078ca:	897b      	ldrh	r3, [r7, #10]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <USBD_GetDescriptor+0x228>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00d      	beq.n	80078f4 <USBD_GetDescriptor+0x228>
  {
    
    len = MIN(len , req->wLength);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88da      	ldrh	r2, [r3, #6]
 80078dc:	897b      	ldrh	r3, [r7, #10]
 80078de:	4293      	cmp	r3, r2
 80078e0:	bf28      	it	cs
 80078e2:	4613      	movcs	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa12 	bl	8007d18 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	889b      	ldrh	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d12c      	bne.n	8007968 <USBD_SetAddress+0x6c>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d128      	bne.n	8007968 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	885b      	ldrh	r3, [r3, #2]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007920:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007928:	2b03      	cmp	r3, #3
 800792a:	d104      	bne.n	8007936 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f986 	bl	8007c40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007934:	e01c      	b.n	8007970 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7bfa      	ldrb	r2, [r7, #15]
 800793a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fbe4 	bl	8009110 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fa43 	bl	8007dd4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800795c:	e008      	b.n	8007970 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007966:	e003      	b.n	8007970 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f968 	bl	8007c40 <USBD_CtlError>
  } 
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <USBD_SetConfig+0x10c>)
 800798a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800798c:	4b3d      	ldr	r3, [pc, #244]	; (8007a84 <USBD_SetConfig+0x10c>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d904      	bls.n	800799e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f952 	bl	8007c40 <USBD_CtlError>
 800799c:	e06f      	b.n	8007a7e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d002      	beq.n	80079ae <USBD_SetConfig+0x36>
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d023      	beq.n	80079f4 <USBD_SetConfig+0x7c>
 80079ac:	e062      	b.n	8007a74 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80079ae:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <USBD_SetConfig+0x10c>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01a      	beq.n	80079ec <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80079b6:	4b33      	ldr	r3, [pc, #204]	; (8007a84 <USBD_SetConfig+0x10c>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2203      	movs	r2, #3
 80079c4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80079c8:	4b2e      	ldr	r3, [pc, #184]	; (8007a84 <USBD_SetConfig+0x10c>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fafe 	bl	8006fd0 <USBD_SetClassConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d104      	bne.n	80079e4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f92f 	bl	8007c40 <USBD_CtlError>
          return;
 80079e2:	e04c      	b.n	8007a7e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f9f5 	bl	8007dd4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80079ea:	e048      	b.n	8007a7e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9f1 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 80079f2:	e044      	b.n	8007a7e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80079f4:	4b23      	ldr	r3, [pc, #140]	; (8007a84 <USBD_SetConfig+0x10c>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d112      	bne.n	8007a22 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007a04:	4b1f      	ldr	r3, [pc, #124]	; (8007a84 <USBD_SetConfig+0x10c>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <USBD_SetConfig+0x10c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fafa 	bl	800700e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9da 	bl	8007dd4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007a20:	e02d      	b.n	8007a7e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8007a22:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <USBD_SetConfig+0x10c>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d01d      	beq.n	8007a6c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fae8 	bl	800700e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <USBD_SetConfig+0x10c>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <USBD_SetConfig+0x10c>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff fabe 	bl	8006fd0 <USBD_SetClassConfig>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d104      	bne.n	8007a64 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f8ef 	bl	8007c40 <USBD_CtlError>
          return;
 8007a62:	e00c      	b.n	8007a7e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f9b5 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 8007a6a:	e008      	b.n	8007a7e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9b1 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 8007a72:	e004      	b.n	8007a7e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8e2 	bl	8007c40 <USBD_CtlError>
      break;
 8007a7c:	bf00      	nop
    }
  }
}
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000247 	.word	0x20000247

08007a88 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d004      	beq.n	8007aa4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f8cf 	bl	8007c40 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007aa2:	e01f      	b.n	8007ae4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d002      	beq.n	8007ab4 <USBD_GetConfig+0x2c>
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d00b      	beq.n	8007aca <USBD_GetConfig+0x42>
 8007ab2:	e012      	b.n	8007ada <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f928 	bl	8007d18 <USBD_CtlSendData>
      break;
 8007ac8:	e00c      	b.n	8007ae4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f920 	bl	8007d18 <USBD_CtlSendData>
      break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8af 	bl	8007c40 <USBD_CtlError>
      break;
 8007ae2:	bf00      	nop
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007afc:	3b02      	subs	r3, #2
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d815      	bhi.n	8007b2e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f043 0202 	orr.w	r2, r3, #2
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8007b22:	2202      	movs	r2, #2
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8f6 	bl	8007d18 <USBD_CtlSendData>
                      2);
    break;
 8007b2c:	e004      	b.n	8007b38 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f885 	bl	8007c40 <USBD_CtlError>
    break;
 8007b36:	bf00      	nop
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	885b      	ldrh	r3, [r3, #2]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10d      	bne.n	8007b6e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f933 	bl	8007dd4 <USBD_CtlSendStatus>
  }

}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007b86:	3b02      	subs	r3, #2
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d812      	bhi.n	8007bb2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d113      	bne.n	8007bbc <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f912 	bl	8007dd4 <USBD_CtlSendStatus>
    }
    break;
 8007bb0:	e004      	b.n	8007bbc <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f843 	bl	8007c40 <USBD_CtlError>
    break;
 8007bba:	e000      	b.n	8007bbe <USBD_ClrFeature+0x48>
    break;
 8007bbc:	bf00      	nop
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	785a      	ldrb	r2, [r3, #1]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	3302      	adds	r3, #2
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3303      	adds	r3, #3
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3305      	adds	r3, #5
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	3306      	adds	r3, #6
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	3307      	adds	r3, #7
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	80da      	strh	r2, [r3, #6]

}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f9c7 	bl	8008fe0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007c52:	2100      	movs	r1, #0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f9c3 	bl	8008fe0 <USBD_LL_StallEP>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d033      	beq.n	8007ce0 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f835 	bl	8007ce8 <USBD_GetLen>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	3301      	adds	r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	75fa      	strb	r2, [r7, #23]
 8007c92:	461a      	mov	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4413      	add	r3, r2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	8812      	ldrh	r2, [r2, #0]
 8007c9c:	b2d2      	uxtb	r2, r2
 8007c9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	75fa      	strb	r2, [r7, #23]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	2203      	movs	r2, #3
 8007cae:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8007cb0:	e012      	b.n	8007cd8 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	75fa      	strb	r2, [r7, #23]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1c59      	adds	r1, r3, #1
 8007cc2:	60f9      	str	r1, [r7, #12]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	75fa      	strb	r2, [r7, #23]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e8      	bne.n	8007cb2 <USBD_GetString+0x50>
    }
  } 
}
 8007ce0:	bf00      	nop
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8007cf4:	e005      	b.n	8007d02 <USBD_GetLen+0x1a>
    {
        len++;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f5      	bne.n	8007cf6 <USBD_GetLen+0xe>
    }

    return len;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fa1b 	bl	800917c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	2100      	movs	r1, #0
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 fa09 	bl	800917c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2203      	movs	r2, #3
 8007d86:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 fa25 	bl	80091f0 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f001 fa13 	bl	80091f0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f9c6 	bl	800917c <USBD_LL_Transmit>
  
  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f9ed 	bl	80091f0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <SWO_Init>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#define CPU_CORE_FREQUENCY_HZ 800000000 /* CPU core frequency in Hz */
static void SWO_Init(uint32_t portBits, uint32_t cpuCoreFreqHz) {
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
//  uint32_t SWOSpeed = 4500000; /* default 2000k baud rate */
//  uint32_t SWOPrescaler = (cpuCoreFreqHz / SWOSpeed) - 1; /* SWOSpeed in Hz, note that cpuCoreFreqHz is expected to be match the CPU core clock */

  CoreDebug->DEMCR = CoreDebug_DEMCR_TRCENA_Msk; /* enable trace in core debug */
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <SWO_Init+0x4c>)
 8007e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e30:	60da      	str	r2, [r3, #12]
//  *((volatile unsigned *)(ITM_BASE + 0x400F0)) = 0x00000002; /* "Selected PIN Protocol Register": Select which protocol to use for trace output (2: SWO NRZ, 1: SWO Manchester encoding) */
//  *((volatile unsigned *)(ITM_BASE + 0x40010)) = SWOPrescaler; /* "Async Clock Prescaler Register". Scale the baud rate of the asynchronous output */
//  *((volatile unsigned *)(ITM_BASE + 0x00FB0)) = 0xC5ACCE55; /* ITM Lock Access Register, C5ACCE55 enables more write access to Control Register 0xE00 :: 0xFFC */
  ITM->TCR = ITM_TCR_TraceBusID_Msk | ITM_TCR_SWOENA_Msk | ITM_TCR_SYNCENA_Msk | ITM_TCR_ITMENA_Msk; /* ITM Trace Control Register */
 8007e32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007e36:	4a0e      	ldr	r2, [pc, #56]	; (8007e70 <SWO_Init+0x50>)
 8007e38:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  ITM->TPR = ITM_TPR_PRIVMASK_Msk; /* ITM Trace Privilege Register */
 8007e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007e40:	220f      	movs	r2, #15
 8007e42:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
  ITM->TER = portBits; /* ITM Trace Enable Register. Enabled tracing on stimulus ports. One bit per stimulus port. */
 8007e46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  *((volatile unsigned *)(ITM_BASE + 0x01000)) = 0x400003FE; /* DWT_CTRL */
 8007e50:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <SWO_Init+0x54>)
 8007e52:	4a09      	ldr	r2, [pc, #36]	; (8007e78 <SWO_Init+0x58>)
 8007e54:	601a      	str	r2, [r3, #0]
  *((volatile unsigned *)(ITM_BASE + 0x40304)) = 0x00000100; /* Formatter and Flush Control Register */
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <SWO_Init+0x5c>)
 8007e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	e000edf0 	.word	0xe000edf0
 8007e70:	007f0015 	.word	0x007f0015
 8007e74:	e0001000 	.word	0xe0001000
 8007e78:	400003fe 	.word	0x400003fe
 8007e7c:	e0040304 	.word	0xe0040304

08007e80 <GetWifiResponse>:

char* GetWifiResponse(FILE* wifiRd, char* response, uint32_t responseSize, uint32_t* responseLen, char* terminator, uint32_t timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
    fpos_t wifiRdPtr = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
    uint32_t deadline = HAL_GetTick() + timeout;
 8007e92:	f7f8 fbc7 	bl	8000624 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	4413      	add	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
    char* result = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
    uint32_t terminatorLen = strlen(terminator);
 8007ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea4:	f7f8 f9ee 	bl	8000284 <strlen>
 8007ea8:	6178      	str	r0, [r7, #20]
    if(responseSize < terminatorLen + 1) return NULL;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d901      	bls.n	8007eb8 <GetWifiResponse+0x38>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e049      	b.n	8007f4c <GetWifiResponse+0xcc>
    *responseLen = 0;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
    memset(response, 0x00, responseSize);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	68b8      	ldr	r0, [r7, #8]
 8007ec4:	f001 feb5 	bl	8009c32 <memset>

    do
    {
        if(fgets(&response[*responseLen], responseSize - *responseLen, wifiRd) == NULL)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	18d0      	adds	r0, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4619      	mov	r1, r3
 8007edc:	f001 fbdc 	bl	8009698 <fgets>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <GetWifiResponse+0x74>
        {
            fsetpos(wifiRd, &wifiRdPtr);
 8007ee6:	f107 0310 	add.w	r3, r7, #16
 8007eea:	4619      	mov	r1, r3
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f001 fd6f 	bl	80099d0 <fsetpos>
 8007ef2:	e005      	b.n	8007f00 <GetWifiResponse+0x80>
        }
        else
        {
            *responseLen = strlen(response);
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f7f8 f9c5 	bl	8000284 <strlen>
 8007efa:	4602      	mov	r2, r0
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	601a      	str	r2, [r3, #0]
        }

        //Exit criteria
        if((*responseLen >= terminatorLen) &&
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d30f      	bcc.n	8007f2a <GetWifiResponse+0xaa>
           (!strcmp(&response[*responseLen - terminatorLen], terminator)))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7f8 f9a9 	bl	8000270 <strcmp>
 8007f1e:	4603      	mov	r3, r0
        if((*responseLen >= terminatorLen) &&
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <GetWifiResponse+0xaa>
        {
//            fprintf(stderr, "GetWifiResponse() found terminator.\r\n");
            result = response;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61fb      	str	r3, [r7, #28]
            break;
 8007f28:	e00f      	b.n	8007f4a <GetWifiResponse+0xca>
        }

        if(deadline <= HAL_GetTick())
 8007f2a:	f7f8 fb7b 	bl	8000624 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d206      	bcs.n	8007f44 <GetWifiResponse+0xc4>
        {
//            fprintf(stderr, "GetWifiResponse() timeout.\r\n");
            break;
        }

        if(*responseLen + 1 >= responseSize)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d202      	bcs.n	8007f48 <GetWifiResponse+0xc8>
        if(fgets(&response[*responseLen], responseSize - *responseLen, wifiRd) == NULL)
 8007f42:	e7c1      	b.n	8007ec8 <GetWifiResponse+0x48>
            break;
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <GetWifiResponse+0xca>
        {
//            fprintf(stderr, "GetWifiResponse() out of space.\r\n");
            break;
 8007f48:	bf00      	nop
        }
    }
    while(1);

    return result;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <main>:

/* USER CODE END 0 */

int main(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8007f5a:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
//  HAL_StatusTypeDef result;
  FILE* wifiWr = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
  FILE* wifiRd = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
  fpos_t wifiRdPtr = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
  char wifiRdBuf[2048] = {0};
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f76:	461a      	mov	r2, r3
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f001 fe5a 	bl	8009c32 <memset>
  uint32_t wifiRdLen = 0;
 8007f7e:	463b      	mov	r3, r7
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f84:	f7f8 fb0e 	bl	80005a4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8007f88:	f000 f892 	bl	80080b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f8c:	f000 f9fc 	bl	8008388 <MX_GPIO_Init>
  MX_RNG_Init();
 8007f90:	f000 f932 	bl	80081f8 <MX_RNG_Init>
  MX_RTC_Init();
 8007f94:	f000 f944 	bl	8008220 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8007f98:	f000 f996 	bl	80082c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007f9c:	f000 f9c4 	bl	8008328 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8007fa0:	f000 fdb2 	bl	8008b08 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  SWO_Init(0x1, CPU_CORE_FREQUENCY_HZ);
 8007fa4:	4935      	ldr	r1, [pc, #212]	; (800807c <main+0x128>)
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7ff ff3a 	bl	8007e20 <SWO_Init>
  wifiWr = fopen("wifi", "wb");
 8007fac:	4934      	ldr	r1, [pc, #208]	; (8008080 <main+0x12c>)
 8007fae:	4835      	ldr	r0, [pc, #212]	; (8008084 <main+0x130>)
 8007fb0:	f001 fc6a 	bl	8009888 <fopen>
 8007fb4:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c
  wifiRd = fopen("wifi", "rb");
 8007fb8:	4933      	ldr	r1, [pc, #204]	; (8008088 <main+0x134>)
 8007fba:	4832      	ldr	r0, [pc, #200]	; (8008084 <main+0x130>)
 8007fbc:	f001 fc64 	bl	8009888 <fopen>
 8007fc0:	f8c7 0808 	str.w	r0, [r7, #2056]	; 0x808

  printf("==========================\r\n");
 8007fc4:	4831      	ldr	r0, [pc, #196]	; (800808c <main+0x138>)
 8007fc6:	f002 fa45 	bl	800a454 <puts>
  printf("    DICE APP: Sample! \r\n");
 8007fca:	4831      	ldr	r0, [pc, #196]	; (8008090 <main+0x13c>)
 8007fcc:	f002 fa42 	bl	800a454 <puts>
  printf("==========================\r\n");
 8007fd0:	482e      	ldr	r0, [pc, #184]	; (800808c <main+0x138>)
 8007fd2:	f002 fa3f 	bl	800a454 <puts>
#ifdef NDEBUG
  printf("DICE Certificate Bag(%lu):\r\n%s\r\n", DICERAMAREA->info.certBagLen, DICERAMAREA->info.certBag);
#endif

  fprintf(wifiWr, "ATE0\r\n");
 8007fd6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8007fda:	2206      	movs	r2, #6
 8007fdc:	2101      	movs	r1, #1
 8007fde:	482d      	ldr	r0, [pc, #180]	; (8008094 <main+0x140>)
 8007fe0:	f001 fd86 	bl	8009af0 <fwrite>
  if(GetWifiResponse(wifiRd, wifiRdBuf, sizeof(wifiRdBuf), &wifiRdLen, "OK\r\n", 1000) != NULL)
 8007fe4:	463a      	mov	r2, r7
 8007fe6:	1d39      	adds	r1, r7, #4
 8007fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	4b2a      	ldr	r3, [pc, #168]	; (8008098 <main+0x144>)
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff8:	f8d7 0808 	ldr.w	r0, [r7, #2056]	; 0x808
 8007ffc:	f7ff ff40 	bl	8007e80 <GetWifiResponse>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d006      	beq.n	8008014 <main+0xc0>
  {
      printf("(%03d)\r\n%s", wifiRdLen, wifiRdBuf);
 8008006:	463b      	mov	r3, r7
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	1d3a      	adds	r2, r7, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4823      	ldr	r0, [pc, #140]	; (800809c <main+0x148>)
 8008010:	f002 f9ac 	bl	800a36c <iprintf>
  }

  fprintf(wifiWr, "AT+CWLAP\r\n");
 8008014:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8008018:	220a      	movs	r2, #10
 800801a:	2101      	movs	r1, #1
 800801c:	4820      	ldr	r0, [pc, #128]	; (80080a0 <main+0x14c>)
 800801e:	f001 fd67 	bl	8009af0 <fwrite>
  if(GetWifiResponse(wifiRd, wifiRdBuf, sizeof(wifiRdBuf), &wifiRdLen, "OK\r\n", 10000) != NULL)
 8008022:	463a      	mov	r2, r7
 8008024:	1d39      	adds	r1, r7, #4
 8008026:	f242 7310 	movw	r3, #10000	; 0x2710
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <main+0x144>)
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008036:	f8d7 0808 	ldr.w	r0, [r7, #2056]	; 0x808
 800803a:	f7ff ff21 	bl	8007e80 <GetWifiResponse>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d006      	beq.n	8008052 <main+0xfe>
  {
      printf("(%03d)\r\n%s", wifiRdLen, wifiRdBuf);
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1d3a      	adds	r2, r7, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4813      	ldr	r0, [pc, #76]	; (800809c <main+0x148>)
 800804e:	f002 f98d 	bl	800a36c <iprintf>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
      fprintf(stdout, "Hello stdio\r\n");
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <main+0x150>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	220d      	movs	r2, #13
 800805a:	2101      	movs	r1, #1
 800805c:	4812      	ldr	r0, [pc, #72]	; (80080a8 <main+0x154>)
 800805e:	f001 fd47 	bl	8009af0 <fwrite>
      fprintf(stderr, "Hello stderr\r\n");
 8008062:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <main+0x150>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	220e      	movs	r2, #14
 800806a:	2101      	movs	r1, #1
 800806c:	480f      	ldr	r0, [pc, #60]	; (80080ac <main+0x158>)
 800806e:	f001 fd3f 	bl	8009af0 <fwrite>
      HAL_Delay(1000);
 8008072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008076:	f7f8 fae1 	bl	800063c <HAL_Delay>
      fprintf(stdout, "Hello stdio\r\n");
 800807a:	e7ea      	b.n	8008052 <main+0xfe>
 800807c:	2faf0800 	.word	0x2faf0800
 8008080:	0800aa94 	.word	0x0800aa94
 8008084:	0800aa98 	.word	0x0800aa98
 8008088:	0800aaa0 	.word	0x0800aaa0
 800808c:	0800aaa4 	.word	0x0800aaa4
 8008090:	0800aac0 	.word	0x0800aac0
 8008094:	0800aad8 	.word	0x0800aad8
 8008098:	0800aae0 	.word	0x0800aae0
 800809c:	0800aae8 	.word	0x0800aae8
 80080a0:	0800aaf4 	.word	0x0800aaf4
 80080a4:	200000c8 	.word	0x200000c8
 80080a8:	0800ab00 	.word	0x0800ab00
 80080ac:	0800ab10 	.word	0x0800ab10

080080b0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b0b8      	sub	sp, #224	; 0xe0
 80080b4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80080b6:	2314      	movs	r3, #20
 80080b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080bc:	2301      	movs	r3, #1
 80080be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80080ce:	2380      	movs	r3, #128	; 0x80
 80080d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080d4:	2302      	movs	r3, #2
 80080d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80080da:	2301      	movs	r3, #1
 80080dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80080e6:	230a      	movs	r3, #10
 80080e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80080ec:	2307      	movs	r3, #7
 80080ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80080f2:	2302      	movs	r3, #2
 80080f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80080f8:	2302      	movs	r3, #2
 80080fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008102:	4618      	mov	r0, r3
 8008104:	f7f9 ffee 	bl	80020e4 <HAL_RCC_OscConfig>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800810e:	f000 f99b 	bl	8008448 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008112:	230f      	movs	r3, #15
 8008114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008118:	2303      	movs	r3, #3
 800811a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800811e:	2300      	movs	r3, #0
 8008120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008124:	2300      	movs	r3, #0
 8008126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800812a:	2300      	movs	r3, #0
 800812c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008130:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008134:	2104      	movs	r1, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fa fb5a 	bl	80027f0 <HAL_RCC_ClockConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8008142:	f000 f981 	bl	8008448 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8008146:	4b29      	ldr	r3, [pc, #164]	; (80081ec <SystemClock_Config+0x13c>)
 8008148:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800814e:	2300      	movs	r3, #0
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800815a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800815e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8008160:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008164:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008166:	2301      	movs	r3, #1
 8008168:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800816a:	2301      	movs	r3, #1
 800816c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800816e:	230c      	movs	r3, #12
 8008170:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008172:	2307      	movs	r3, #7
 8008174:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8008176:	2304      	movs	r3, #4
 8008178:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800817a:	2302      	movs	r3, #2
 800817c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800817e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008182:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008184:	463b      	mov	r3, r7
 8008186:	4618      	mov	r0, r3
 8008188:	f7fa fe00 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8008192:	f000 f959 	bl	8008448 <Error_Handler>
  }

    /**Configure LSE Drive Capability 
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <SystemClock_Config+0x140>)
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <SystemClock_Config+0x140>)
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	f023 0318 	bic.w	r3, r3, #24
 80081a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80081a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081aa:	f7f9 ff35 	bl	8002018 <HAL_PWREx_ControlVoltageScaling>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80081b4:	f000 f948 	bl	8008448 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80081b8:	f7fa fd36 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 80081bc:	4602      	mov	r2, r0
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <SystemClock_Config+0x144>)
 80081c0:	fba3 2302 	umull	r2, r3, r3, r2
 80081c4:	099b      	lsrs	r3, r3, #6
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 fb4d 	bl	8000866 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80081cc:	2004      	movs	r0, #4
 80081ce:	f7f8 fb57 	bl	8000880 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80081d2:	f7fb f8bf 	bl	8003354 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	f04f 30ff 	mov.w	r0, #4294967295
 80081de:	f7f8 fb18 	bl	8000812 <HAL_NVIC_SetPriority>
}
 80081e2:	bf00      	nop
 80081e4:	37e0      	adds	r7, #224	; 0xe0
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	00062006 	.word	0x00062006
 80081f0:	40021000 	.word	0x40021000
 80081f4:	10624dd3 	.word	0x10624dd3

080081f8 <MX_RNG_Init>:

/* RNG init function */
static void MX_RNG_Init(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <MX_RNG_Init+0x20>)
 80081fe:	4a07      	ldr	r2, [pc, #28]	; (800821c <MX_RNG_Init+0x24>)
 8008200:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8008202:	4805      	ldr	r0, [pc, #20]	; (8008218 <MX_RNG_Init+0x20>)
 8008204:	f7fb fb32 	bl	800386c <HAL_RNG_Init>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800820e:	f000 f91b 	bl	8008448 <Error_Handler>
  }

}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000710 	.word	0x20000710
 800821c:	50060800 	.word	0x50060800

08008220 <MX_RTC_Init>:

/* RTC init function */
static void MX_RTC_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 8008226:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008228:	4a26      	ldr	r2, [pc, #152]	; (80082c4 <MX_RTC_Init+0xa4>)
 800822a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800822c:	4b24      	ldr	r3, [pc, #144]	; (80082c0 <MX_RTC_Init+0xa0>)
 800822e:	2200      	movs	r2, #0
 8008230:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008232:	4b23      	ldr	r3, [pc, #140]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008234:	227f      	movs	r2, #127	; 0x7f
 8008236:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008238:	4b21      	ldr	r3, [pc, #132]	; (80082c0 <MX_RTC_Init+0xa0>)
 800823a:	22ff      	movs	r2, #255	; 0xff
 800823c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800823e:	4b20      	ldr	r3, [pc, #128]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008240:	2200      	movs	r2, #0
 8008242:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008244:	4b1e      	ldr	r3, [pc, #120]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008246:	2200      	movs	r2, #0
 8008248:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800824a:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <MX_RTC_Init+0xa0>)
 800824c:	2200      	movs	r2, #0
 800824e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008252:	2200      	movs	r2, #0
 8008254:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008256:	481a      	ldr	r0, [pc, #104]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008258:	f7fb fb3b 	bl	80038d2 <HAL_RTC_Init>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8008262:	f000 f8f1 	bl	8008448 <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  sTime.Hours = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008272:	2300      	movs	r3, #0
 8008274:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	2200      	movs	r2, #0
 800827e:	4619      	mov	r1, r3
 8008280:	480f      	ldr	r0, [pc, #60]	; (80082c0 <MX_RTC_Init+0xa0>)
 8008282:	f7fb fba9 	bl	80039d8 <HAL_RTC_SetTime>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_RTC_Init+0x70>
  {
    Error_Handler();
 800828c:	f000 f8dc 	bl	8008448 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008290:	2301      	movs	r3, #1
 8008292:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8008294:	2301      	movs	r3, #1
 8008296:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8008298:	2301      	movs	r3, #1
 800829a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80082a0:	463b      	mov	r3, r7
 80082a2:	2200      	movs	r2, #0
 80082a4:	4619      	mov	r1, r3
 80082a6:	4806      	ldr	r0, [pc, #24]	; (80082c0 <MX_RTC_Init+0xa0>)
 80082a8:	f7fb fc64 	bl	8003b74 <HAL_RTC_SetDate>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 80082b2:	f000 f8c9 	bl	8008448 <Error_Handler>
  }

}
 80082b6:	bf00      	nop
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200006ec 	.word	0x200006ec
 80082c4:	40002800 	.word	0x40002800

080082c8 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80082cc:	4b14      	ldr	r3, [pc, #80]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <MX_USART2_UART_Init+0x5c>)
 80082d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80082d2:	4b13      	ldr	r3, [pc, #76]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082dc:	2200      	movs	r2, #0
 80082de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80082e6:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082ee:	220c      	movs	r2, #12
 80082f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082f2:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <MX_USART2_UART_Init+0x58>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <MX_USART2_UART_Init+0x58>)
 8008300:	2200      	movs	r2, #0
 8008302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008304:	4b06      	ldr	r3, [pc, #24]	; (8008320 <MX_USART2_UART_Init+0x58>)
 8008306:	2200      	movs	r2, #0
 8008308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <MX_USART2_UART_Init+0x58>)
 800830c:	f7fb fd80 	bl	8003e10 <HAL_UART_Init>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008316:	f000 f897 	bl	8008448 <Error_Handler>
  }

}
 800831a:	bf00      	nop
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	2000071c 	.word	0x2000071c
 8008324:	40004400 	.word	0x40004400

08008328 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800832c:	4b14      	ldr	r3, [pc, #80]	; (8008380 <MX_USART3_UART_Init+0x58>)
 800832e:	4a15      	ldr	r2, [pc, #84]	; (8008384 <MX_USART3_UART_Init+0x5c>)
 8008330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800833a:	4b11      	ldr	r3, [pc, #68]	; (8008380 <MX_USART3_UART_Init+0x58>)
 800833c:	2200      	movs	r2, #0
 800833e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008342:	2200      	movs	r2, #0
 8008344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008346:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008348:	2200      	movs	r2, #0
 800834a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <MX_USART3_UART_Init+0x58>)
 800834e:	220c      	movs	r2, #12
 8008350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008354:	2200      	movs	r2, #0
 8008356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <MX_USART3_UART_Init+0x58>)
 800835a:	2200      	movs	r2, #0
 800835c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008360:	2200      	movs	r2, #0
 8008362:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008364:	4b06      	ldr	r3, [pc, #24]	; (8008380 <MX_USART3_UART_Init+0x58>)
 8008366:	2200      	movs	r2, #0
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <MX_USART3_UART_Init+0x58>)
 800836c:	f7fb fd50 	bl	8003e10 <HAL_UART_Init>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008376:	f000 f867 	bl	8008448 <Error_Handler>
  }

}
 800837a:	bf00      	nop
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	2000067c 	.word	0x2000067c
 8008384:	40004800 	.word	0x40004800

08008388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800838e:	4a2b      	ldr	r2, [pc, #172]	; (800843c <MX_GPIO_Init+0xb4>)
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <MX_GPIO_Init+0xb4>)
 8008392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008394:	f043 0304 	orr.w	r3, r3, #4
 8008398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800839a:	4b28      	ldr	r3, [pc, #160]	; (800843c <MX_GPIO_Init+0xb4>)
 800839c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80083a6:	4a25      	ldr	r2, [pc, #148]	; (800843c <MX_GPIO_Init+0xb4>)
 80083a8:	4b24      	ldr	r3, [pc, #144]	; (800843c <MX_GPIO_Init+0xb4>)
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083b2:	4b22      	ldr	r3, [pc, #136]	; (800843c <MX_GPIO_Init+0xb4>)
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083be:	4a1f      	ldr	r2, [pc, #124]	; (800843c <MX_GPIO_Init+0xb4>)
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <MX_GPIO_Init+0xb4>)
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083ca:	4b1c      	ldr	r3, [pc, #112]	; (800843c <MX_GPIO_Init+0xb4>)
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d6:	4a19      	ldr	r2, [pc, #100]	; (800843c <MX_GPIO_Init+0xb4>)
 80083d8:	4b18      	ldr	r3, [pc, #96]	; (800843c <MX_GPIO_Init+0xb4>)
 80083da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083dc:	f043 0302 	orr.w	r3, r3, #2
 80083e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <MX_GPIO_Init+0xb4>)
 80083e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80083ee:	2200      	movs	r2, #0
 80083f0:	2120      	movs	r1, #32
 80083f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083f6:	f7f8 fc57 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80083fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008400:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <MX_GPIO_Init+0xb8>)
 8008402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	4619      	mov	r1, r3
 800840e:	480d      	ldr	r0, [pc, #52]	; (8008444 <MX_GPIO_Init+0xbc>)
 8008410:	f7f8 fa9e 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008414:	2320      	movs	r3, #32
 8008416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008418:	2301      	movs	r3, #1
 800841a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008420:	2300      	movs	r3, #0
 8008422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	4619      	mov	r1, r3
 800842a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800842e:	f7f8 fa8f 	bl	8000950 <HAL_GPIO_Init>

}
 8008432:	bf00      	nop
 8008434:	3728      	adds	r7, #40	; 0x28
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000
 8008440:	10210000 	.word	0x10210000
 8008444:	48000800 	.word	0x48000800

08008448 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800844c:	e7fe      	b.n	800844c <Error_Handler+0x4>
	...

08008450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008456:	4a24      	ldr	r2, [pc, #144]	; (80084e8 <HAL_MspInit+0x98>)
 8008458:	4b23      	ldr	r3, [pc, #140]	; (80084e8 <HAL_MspInit+0x98>)
 800845a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	6613      	str	r3, [r2, #96]	; 0x60
 8008462:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <HAL_MspInit+0x98>)
 8008464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	607b      	str	r3, [r7, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <HAL_MspInit+0x98>)
 8008470:	4b1d      	ldr	r3, [pc, #116]	; (80084e8 <HAL_MspInit+0x98>)
 8008472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008478:	6593      	str	r3, [r2, #88]	; 0x58
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_MspInit+0x98>)
 800847c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008486:	2003      	movs	r0, #3
 8008488:	f7f8 f9b8 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	f06f 000b 	mvn.w	r0, #11
 8008494:	f7f8 f9bd 	bl	8000812 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	f06f 000a 	mvn.w	r0, #10
 80084a0:	f7f8 f9b7 	bl	8000812 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80084a4:	2200      	movs	r2, #0
 80084a6:	2100      	movs	r1, #0
 80084a8:	f06f 0009 	mvn.w	r0, #9
 80084ac:	f7f8 f9b1 	bl	8000812 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	f06f 0004 	mvn.w	r0, #4
 80084b8:	f7f8 f9ab 	bl	8000812 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	f06f 0003 	mvn.w	r0, #3
 80084c4:	f7f8 f9a5 	bl	8000812 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	f06f 0001 	mvn.w	r0, #1
 80084d0:	f7f8 f99f 	bl	8000812 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	f7f8 f999 	bl	8000812 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40021000 	.word	0x40021000

080084ec <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]

  if(hrng->Instance==RNG)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <HAL_RNG_MspInit+0x38>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10b      	bne.n	8008516 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <HAL_RNG_MspInit+0x3c>)
 8008500:	4b09      	ldr	r3, [pc, #36]	; (8008528 <HAL_RNG_MspInit+0x3c>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <HAL_RNG_MspInit+0x3c>)
 800850c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	50060800 	.word	0x50060800
 8008528:	40021000 	.word	0x40021000

0800852c <HAL_RTC_MspInit>:
  /* USER CODE END RNG_MspDeInit 1 */

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a08      	ldr	r2, [pc, #32]	; (800855c <HAL_RTC_MspInit+0x30>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d107      	bne.n	800854e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800853e:	4a08      	ldr	r2, [pc, #32]	; (8008560 <HAL_RTC_MspInit+0x34>)
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <HAL_RTC_MspInit+0x34>)
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40002800 	.word	0x40002800
 8008560:	40021000 	.word	0x40021000

08008564 <HAL_UART_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a26      	ldr	r2, [pc, #152]	; (800860c <HAL_UART_MspInit+0xa8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d11d      	bne.n	80085b2 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008576:	4a26      	ldr	r2, [pc, #152]	; (8008610 <HAL_UART_MspInit+0xac>)
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <HAL_UART_MspInit+0xac>)
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008580:	6593      	str	r3, [r2, #88]	; 0x58
 8008582:	4b23      	ldr	r3, [pc, #140]	; (8008610 <HAL_UART_MspInit+0xac>)
 8008584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800858e:	230c      	movs	r3, #12
 8008590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008592:	2302      	movs	r3, #2
 8008594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800859a:	2303      	movs	r3, #3
 800859c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800859e:	2307      	movs	r3, #7
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a2:	f107 0314 	add.w	r3, r7, #20
 80085a6:	4619      	mov	r1, r3
 80085a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085ac:	f7f8 f9d0 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80085b0:	e028      	b.n	8008604 <HAL_UART_MspInit+0xa0>
  else if(huart->Instance==USART3)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HAL_UART_MspInit+0xb0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d123      	bne.n	8008604 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <HAL_UART_MspInit+0xac>)
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <HAL_UART_MspInit+0xac>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085c6:	6593      	str	r3, [r2, #88]	; 0x58
 80085c8:	4b11      	ldr	r3, [pc, #68]	; (8008610 <HAL_UART_MspInit+0xac>)
 80085ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80085d4:	2330      	movs	r3, #48	; 0x30
 80085d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d8:	2302      	movs	r3, #2
 80085da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085dc:	2301      	movs	r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085e0:	2303      	movs	r3, #3
 80085e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80085e4:	2307      	movs	r3, #7
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	4619      	mov	r1, r3
 80085ee:	480a      	ldr	r0, [pc, #40]	; (8008618 <HAL_UART_MspInit+0xb4>)
 80085f0:	f7f8 f9ae 	bl	8000950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80085f4:	2200      	movs	r2, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	2027      	movs	r0, #39	; 0x27
 80085fa:	f7f8 f90a 	bl	8000812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80085fe:	2027      	movs	r0, #39	; 0x27
 8008600:	f7f8 f923 	bl	800084a <HAL_NVIC_EnableIRQ>
}
 8008604:	bf00      	nop
 8008606:	3728      	adds	r7, #40	; 0x28
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	40004400 	.word	0x40004400
 8008610:	40021000 	.word	0x40021000
 8008614:	40004800 	.word	0x40004800
 8008618:	48000800 	.word	0x48000800

0800861c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008620:	f7f7 fff2 	bl	8000608 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8008624:	f7f8 f948 	bl	80008b8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008628:	bf00      	nop
 800862a:	bd80      	pop	{r7, pc}

0800862c <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008630:	4802      	ldr	r0, [pc, #8]	; (800863c <USART3_IRQHandler+0x10>)
 8008632:	f7fb fe77 	bl	8004324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008636:	bf00      	nop
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	2000067c 	.word	0x2000067c

08008640 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB OTG FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008644:	4802      	ldr	r0, [pc, #8]	; (8008650 <OTG_FS_IRQHandler+0x10>)
 8008646:	f7f8 fcad 	bl	8000fa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200009c4 	.word	0x200009c4

08008654 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800865c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008660:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d013      	beq.n	8008694 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800866c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008670:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8008674:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800867c:	e000      	b.n	8008680 <ITM_SendChar+0x2c>
 800867e:	bf00      	nop
 8008680:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0f9      	beq.n	800867e <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800868a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008694:	687b      	ldr	r3, [r7, #4]
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <ITM_ReceiveChar>:
  \details Inputs a character via the external variable \ref ITM_RxBuffer.
  \return             Received character.
  \return         -1  No character pending.
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
  int32_t ch = -1;                           /* no character available */
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295
 80086ae:	607b      	str	r3, [r7, #4]

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 80086b0:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <ITM_ReceiveChar+0x30>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <ITM_ReceiveChar+0x34>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d005      	beq.n	80086c6 <ITM_ReceiveChar+0x22>
  {
    ch = ITM_RxBuffer;
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <ITM_ReceiveChar+0x30>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	607b      	str	r3, [r7, #4]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 80086c0:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <ITM_ReceiveChar+0x30>)
 80086c2:	4a05      	ldr	r2, [pc, #20]	; (80086d8 <ITM_ReceiveChar+0x34>)
 80086c4:	601a      	str	r2, [r3, #0]
  }

  return (ch);
 80086c6:	687b      	ldr	r3, [r7, #4]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	2000079c 	.word	0x2000079c
 80086d8:	5aa55aa5 	.word	0x5aa55aa5

080086dc <ITM_CheckChar>:
  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
  \return          0  No character available.
  \return          1  Character available.
 */
__STATIC_INLINE int32_t ITM_CheckChar (void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0

  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
 80086e0:	4b06      	ldr	r3, [pc, #24]	; (80086fc <ITM_CheckChar+0x20>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a06      	ldr	r2, [pc, #24]	; (8008700 <ITM_CheckChar+0x24>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d101      	bne.n	80086ee <ITM_CheckChar+0x12>
  {
    return (0);                              /* no character available */
 80086ea:	2300      	movs	r3, #0
 80086ec:	e000      	b.n	80086f0 <ITM_CheckChar+0x14>
  }
  else
  {
    return (1);                              /*    character available */
 80086ee:	2301      	movs	r3, #1
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	2000079c 	.word	0x2000079c
 8008700:	5aa55aa5 	.word	0x5aa55aa5

08008704 <HAL_UART_RxCpltCallback>:
uint8_t **environ = __env;
volatile int32_t ITM_RxBuffer;

/* Functions */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
    if(huart == &huart3)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a0b      	ldr	r2, [pc, #44]	; (800873c <HAL_UART_RxCpltCallback+0x38>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10f      	bne.n	8008734 <HAL_UART_RxCpltCallback+0x30>
    {
        wifiRxWr = (wifiRxWr + 1) % sizeof(wifiRxBuf);
 8008714:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <HAL_UART_RxCpltCallback+0x3c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3301      	adds	r3, #1
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	4a08      	ldr	r2, [pc, #32]	; (8008740 <HAL_UART_RxCpltCallback+0x3c>)
 8008720:	6013      	str	r3, [r2, #0]
        HAL_UART_Receive_IT(huart, &wifiRxBuf[wifiRxWr], 1);
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <HAL_UART_RxCpltCallback+0x3c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a07      	ldr	r2, [pc, #28]	; (8008744 <HAL_UART_RxCpltCallback+0x40>)
 8008728:	4413      	add	r3, r2
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fb fd0f 	bl	8004152 <HAL_UART_Receive_IT>
    }
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2000067c 	.word	0x2000067c
 8008740:	2000024c 	.word	0x2000024c
 8008744:	2000078c 	.word	0x2000078c

08008748 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	if(file == 1)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d109      	bne.n	800876e <_write+0x26>
	{
		HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	b29a      	uxth	r2, r3
 800875e:	f04f 33ff 	mov.w	r3, #4294967295
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	4817      	ldr	r0, [pc, #92]	; (80087c4 <_write+0x7c>)
 8008766:	f7fb fba4 	bl	8003eb2 <HAL_UART_Transmit>
		return len;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	e025      	b.n	80087ba <_write+0x72>
	}
	else if (file == 2)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d112      	bne.n	800879a <_write+0x52>
	{
		for(uint32_t n = 0; n < len; n++)
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e009      	b.n	800878e <_write+0x46>
		{
			ITM_SendChar(ptr[n]);
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff ff66 	bl	8008654 <ITM_SendChar>
		for(uint32_t n = 0; n < len; n++)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3301      	adds	r3, #1
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	429a      	cmp	r2, r3
 8008794:	d3f1      	bcc.n	800877a <_write+0x32>
		}
		return len;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	e00f      	b.n	80087ba <_write+0x72>
	}
    else if (file == 4)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d107      	bne.n	80087b0 <_write+0x68>
    {
        HAL_UART_Transmit(&huart3, ptr, len, HAL_MAX_DELAY);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	68b9      	ldr	r1, [r7, #8]
 80087aa:	4807      	ldr	r0, [pc, #28]	; (80087c8 <_write+0x80>)
 80087ac:	f7fb fb81 	bl	8003eb2 <HAL_UART_Transmit>
    }
	errno = ENOSYS;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <_write+0x84>)
 80087b2:	2258      	movs	r2, #88	; 0x58
 80087b4:	601a      	str	r2, [r3, #0]
	return -1;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	2000071c 	.word	0x2000071c
 80087c8:	2000067c 	.word	0x2000067c
 80087cc:	20000f90 	.word	0x20000f90

080087d0 <_sbrk>:

void * _sbrk(int32_t incr)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <_sbrk+0x38>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <_sbrk+0x16>
		heap_end = & end;
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <_sbrk+0x38>)
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <_sbrk+0x3c>)
 80087e4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <_sbrk+0x38>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80087ec:	4b06      	ldr	r3, [pc, #24]	; (8008808 <_sbrk+0x38>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <_sbrk+0x38>)
 80087f6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000250 	.word	0x20000250
 800880c:	20000f94 	.word	0x20000f94

08008810 <_close>:

int _close(int32_t file)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
    if(file == 4)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d10f      	bne.n	800883e <_close+0x2e>
    {
        HAL_UART_AbortReceive_IT(&huart3);
 800881e:	480c      	ldr	r0, [pc, #48]	; (8008850 <_close+0x40>)
 8008820:	f7fb fd1e 	bl	8004260 <HAL_UART_AbortReceive_IT>
        memset(wifiRxBuf, 0x00, sizeof(wifiRxBuf));
 8008824:	2210      	movs	r2, #16
 8008826:	2100      	movs	r1, #0
 8008828:	480a      	ldr	r0, [pc, #40]	; (8008854 <_close+0x44>)
 800882a:	f001 fa02 	bl	8009c32 <memset>
        wifiRxRd = 0;
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <_close+0x48>)
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
        wifiRxWr = 0;
 8008834:	4b09      	ldr	r3, [pc, #36]	; (800885c <_close+0x4c>)
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
        return 0;
 800883a:	2300      	movs	r3, #0
 800883c:	e004      	b.n	8008848 <_close+0x38>
    }
//    else if (file == 5)
//    {
//        return 0;
//    }
    errno = ENOSYS;
 800883e:	4b08      	ldr	r3, [pc, #32]	; (8008860 <_close+0x50>)
 8008840:	2258      	movs	r2, #88	; 0x58
 8008842:	601a      	str	r2, [r3, #0]
    return -1;
 8008844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	2000067c 	.word	0x2000067c
 8008854:	2000078c 	.word	0x2000078c
 8008858:	20000248 	.word	0x20000248
 800885c:	2000024c 	.word	0x2000024c
 8008860:	20000f90 	.word	0x20000f90

08008864 <_fstat>:

int _fstat(int32_t file, struct stat *st)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
    if(file == 4)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b04      	cmp	r3, #4
 8008872:	d121      	bne.n	80088b8 <_fstat+0x54>
    {
        st->st_mode = S_IFCHR;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800887a:	605a      	str	r2, [r3, #4]
        st->st_size = (wifiRxWr > wifiRxRd) ? (wifiRxWr - wifiRxRd) : (wifiRxWr < wifiRxRd) ? ((sizeof(wifiRxBuf) - wifiRxRd) + wifiRxWr) : 0;
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <_fstat+0x6c>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <_fstat+0x70>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d905      	bls.n	8008894 <_fstat+0x30>
 8008888:	4b11      	ldr	r3, [pc, #68]	; (80088d0 <_fstat+0x6c>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <_fstat+0x70>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	e00d      	b.n	80088b0 <_fstat+0x4c>
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <_fstat+0x6c>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <_fstat+0x70>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d206      	bcs.n	80088ae <_fstat+0x4a>
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <_fstat+0x6c>)
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <_fstat+0x70>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	3310      	adds	r3, #16
 80088ac:	e000      	b.n	80088b0 <_fstat+0x4c>
 80088ae:	2300      	movs	r3, #0
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	6113      	str	r3, [r2, #16]
        return 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e004      	b.n	80088c2 <_fstat+0x5e>
    }
	errno = ENOSYS;
 80088b8:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <_fstat+0x74>)
 80088ba:	2258      	movs	r2, #88	; 0x58
 80088bc:	601a      	str	r2, [r3, #0]
	return -1;
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	2000024c 	.word	0x2000024c
 80088d4:	20000248 	.word	0x20000248
 80088d8:	20000f90 	.word	0x20000f90

080088dc <_isatty>:

int _isatty(int32_t file)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    if(file == 4)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d101      	bne.n	80088ee <_isatty+0x12>
    {
        return 1;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e003      	b.n	80088f6 <_isatty+0x1a>
    }
	errno = ENOSYS;
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <_isatty+0x28>)
 80088f0:	2258      	movs	r2, #88	; 0x58
 80088f2:	601a      	str	r2, [r3, #0]
	return 0;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20000f90 	.word	0x20000f90

08008908 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
    if(file == 4)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b04      	cmp	r3, #4
 8008918:	d101      	bne.n	800891e <_lseek+0x16>
    {
        return 0;
 800891a:	2300      	movs	r3, #0
 800891c:	e004      	b.n	8008928 <_lseek+0x20>
    }
	errno = ENOSYS;
 800891e:	4b05      	ldr	r3, [pc, #20]	; (8008934 <_lseek+0x2c>)
 8008920:	2258      	movs	r2, #88	; 0x58
 8008922:	601a      	str	r2, [r3, #0]
	return -1;
 8008924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	20000f90 	.word	0x20000f90

08008938 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef halResp = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	75fb      	strb	r3, [r7, #23]
	if(file == 1)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d111      	bne.n	8008972 <_read+0x3a>
	{
	    halResp = HAL_UART_Receive(&huart2, ptr, 1, 0);
 800894e:	2300      	movs	r3, #0
 8008950:	2201      	movs	r2, #1
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	4821      	ldr	r0, [pc, #132]	; (80089dc <_read+0xa4>)
 8008956:	f7fb fb39 	bl	8003fcc <HAL_UART_Receive>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]
        if(halResp == HAL_OK)
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <_read+0x30>
        {
            return 1;
 8008964:	2301      	movs	r3, #1
 8008966:	e035      	b.n	80089d4 <_read+0x9c>
        }
        else if(halResp == HAL_TIMEOUT)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d12d      	bne.n	80089ca <_read+0x92>
	    {
	        return 0;
 800896e:	2300      	movs	r3, #0
 8008970:	e030      	b.n	80089d4 <_read+0x9c>
	    }
	}
	else if(file == 2)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d10e      	bne.n	8008996 <_read+0x5e>
	{
	    if(ITM_CheckChar())
 8008978:	f7ff feb0 	bl	80086dc <ITM_CheckChar>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <_read+0x5a>
	    {
            ptr[0] = ITM_ReceiveChar();
 8008982:	f7ff fe8f 	bl	80086a4 <ITM_ReceiveChar>
 8008986:	4603      	mov	r3, r0
 8008988:	b2da      	uxtb	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	701a      	strb	r2, [r3, #0]
            return 1;
 800898e:	2301      	movs	r3, #1
 8008990:	e020      	b.n	80089d4 <_read+0x9c>
	    }
	    else
	    {
            return 0;
 8008992:	2300      	movs	r3, #0
 8008994:	e01e      	b.n	80089d4 <_read+0x9c>
	    }
	}
	else if(file == 4)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b04      	cmp	r3, #4
 800899a:	d116      	bne.n	80089ca <_read+0x92>
    {
        if(wifiRxRd != wifiRxWr)
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <_read+0xa8>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <_read+0xac>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d00e      	beq.n	80089c6 <_read+0x8e>
        {
            ptr[0] = wifiRxBuf[wifiRxRd];
 80089a8:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <_read+0xa8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a0e      	ldr	r2, [pc, #56]	; (80089e8 <_read+0xb0>)
 80089ae:	5cd2      	ldrb	r2, [r2, r3]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	701a      	strb	r2, [r3, #0]
            wifiRxRd = (wifiRxRd + 1) % sizeof(wifiRxBuf);
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <_read+0xa8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <_read+0xa8>)
 80089c0:	6013      	str	r3, [r2, #0]
            return 1;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e006      	b.n	80089d4 <_read+0x9c>
        }
        else
        {
            return 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e004      	b.n	80089d4 <_read+0x9c>
        }
    }
	errno = ENOSYS;
 80089ca:	4b08      	ldr	r3, [pc, #32]	; (80089ec <_read+0xb4>)
 80089cc:	2258      	movs	r2, #88	; 0x58
 80089ce:	601a      	str	r2, [r3, #0]
	return -1;
 80089d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	2000071c 	.word	0x2000071c
 80089e0:	20000248 	.word	0x20000248
 80089e4:	2000024c 	.word	0x2000024c
 80089e8:	2000078c 	.word	0x2000078c
 80089ec:	20000f90 	.word	0x20000f90

080089f0 <_open>:
  errno = ENOSYS;
  return -1;
}

int _open(const uint8_t *path, int32_t flags, int32_t mode)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
    if(strcmp((char*)path, "wifi") == 0)
 80089fc:	4920      	ldr	r1, [pc, #128]	; (8008a80 <_open+0x90>)
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7f7 fc36 	bl	8000270 <strcmp>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d131      	bne.n	8008a6e <_open+0x7e>
    {
        if((flags == 0) || (flags == 0x10000)) //character or binary
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <_open+0x28>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a16:	d11f      	bne.n	8008a58 <_open+0x68>
        {
            memset(wifiRxBuf, 0x00, sizeof(wifiRxBuf));
 8008a18:	2210      	movs	r2, #16
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4819      	ldr	r0, [pc, #100]	; (8008a84 <_open+0x94>)
 8008a1e:	f001 f908 	bl	8009c32 <memset>
            wifiRxRd = 0;
 8008a22:	4b19      	ldr	r3, [pc, #100]	; (8008a88 <_open+0x98>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
            wifiRxWr = 0;
 8008a28:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <_open+0x9c>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
            __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8008a2e:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <_open+0xa0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <_open+0xa0>)
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	6812      	ldr	r2, [r2, #0]
 8008a38:	f042 0220 	orr.w	r2, r2, #32
 8008a3c:	601a      	str	r2, [r3, #0]
            return (HAL_UART_Receive_IT(&huart3, &wifiRxBuf[0], 1) == HAL_OK) ? 4 : -1;
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4910      	ldr	r1, [pc, #64]	; (8008a84 <_open+0x94>)
 8008a42:	4813      	ldr	r0, [pc, #76]	; (8008a90 <_open+0xa0>)
 8008a44:	f7fb fb85 	bl	8004152 <HAL_UART_Receive_IT>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <_open+0x62>
 8008a4e:	2304      	movs	r3, #4
 8008a50:	e012      	b.n	8008a78 <_open+0x88>
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	e00f      	b.n	8008a78 <_open+0x88>
        }
        else if ((flags == 0x601) || (flags == 0x10601)) //character or binary
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f240 6201 	movw	r2, #1537	; 0x601
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <_open+0x7a>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4a0b      	ldr	r2, [pc, #44]	; (8008a94 <_open+0xa4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d101      	bne.n	8008a6e <_open+0x7e>
        {
            return 4;
 8008a6a:	2304      	movs	r3, #4
 8008a6c:	e004      	b.n	8008a78 <_open+0x88>
        }
    }
    errno = ENOSYS;
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <_open+0xa8>)
 8008a70:	2258      	movs	r2, #88	; 0x58
 8008a72:	601a      	str	r2, [r3, #0]
    return -1;
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	0800ab20 	.word	0x0800ab20
 8008a84:	2000078c 	.word	0x2000078c
 8008a88:	20000248 	.word	0x20000248
 8008a8c:	2000024c 	.word	0x2000024c
 8008a90:	2000067c 	.word	0x2000067c
 8008a94:	00010601 	.word	0x00010601
 8008a98:	20000f90 	.word	0x20000f90

08008a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008aa0:	4a17      	ldr	r2, [pc, #92]	; (8008b00 <SystemInit+0x64>)
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <SystemInit+0x64>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <SystemInit+0x68>)
 8008ab2:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <SystemInit+0x68>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <SystemInit+0x68>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <SystemInit+0x68>)
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <SystemInit+0x68>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008acc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008ad0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <SystemInit+0x68>)
 8008ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ad8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <SystemInit+0x68>)
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <SystemInit+0x68>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <SystemInit+0x68>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <SystemInit+0x64>)
 8008aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008af2:	609a      	str	r2, [r3, #8]
#endif
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000ed00 	.word	0xe000ed00
 8008b04:	40021000 	.word	0x40021000

08008b08 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	490b      	ldr	r1, [pc, #44]	; (8008b3c <MX_USB_DEVICE_Init+0x34>)
 8008b10:	480b      	ldr	r0, [pc, #44]	; (8008b40 <MX_USB_DEVICE_Init+0x38>)
 8008b12:	f7fe f9eb 	bl	8006eec <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU);
 8008b16:	490b      	ldr	r1, [pc, #44]	; (8008b44 <MX_USB_DEVICE_Init+0x3c>)
 8008b18:	4809      	ldr	r0, [pc, #36]	; (8008b40 <MX_USB_DEVICE_Init+0x38>)
 8008b1a:	f7fe fa12 	bl	8006f42 <USBD_RegisterClass>
  USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS);
 8008b1e:	490a      	ldr	r1, [pc, #40]	; (8008b48 <MX_USB_DEVICE_Init+0x40>)
 8008b20:	4807      	ldr	r0, [pc, #28]	; (8008b40 <MX_USB_DEVICE_Init+0x38>)
 8008b22:	f7fd fe75 	bl	8006810 <USBD_DFU_RegisterMedia>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8008b26:	4806      	ldr	r0, [pc, #24]	; (8008b40 <MX_USB_DEVICE_Init+0x38>)
 8008b28:	f000 fc0a 	bl	8009340 <USBD_LL_BatteryCharging>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 8008b32:	4803      	ldr	r0, [pc, #12]	; (8008b40 <MX_USB_DEVICE_Init+0x38>)
 8008b34:	f7fe fa1f 	bl	8006f76 <USBD_Start>
  }
}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000068 	.word	0x20000068
 8008b40:	200007a0 	.word	0x200007a0
 8008b44:	20000000 	.word	0x20000000
 8008b48:	200000ac 	.word	0x200000ac

08008b4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5c:	d142      	bne.n	8008be4 <HAL_PCD_MspInit+0x98>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b64:	2302      	movs	r3, #2
 8008b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b70:	230a      	movs	r3, #10
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b74:	f107 0314 	add.w	r3, r7, #20
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b7e:	f7f7 fee7 	bl	8000950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b82:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b8e:	4b17      	ldr	r3, [pc, #92]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d114      	bne.n	8008bd0 <HAL_PCD_MspInit+0x84>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba6:	4a11      	ldr	r2, [pc, #68]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8008bb2:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008bbe:	f7f9 fa81 	bl	80020c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc2:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bc4:	4b09      	ldr	r3, [pc, #36]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8008bce:	e001      	b.n	8008bd4 <HAL_PCD_MspInit+0x88>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008bd0:	f7f9 fa78 	bl	80020c4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	2043      	movs	r0, #67	; 0x43
 8008bda:	f7f7 fe1a 	bl	8000812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bde:	2043      	movs	r0, #67	; 0x43
 8008be0:	f7f7 fe33 	bl	800084a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008be4:	bf00      	nop
 8008be6:	3728      	adds	r7, #40	; 0x28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40021000 	.word	0x40021000

08008bf0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7fe fa14 	bl	8007034 <USBD_LL_SetupStage>
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f7fe fa43 	bl	80070c8 <USBD_LL_DataOutStage>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8008c5c:	78fa      	ldrb	r2, [r7, #3]
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	3348      	adds	r3, #72	; 0x48
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7fe fa84 	bl	800717e <USBD_LL_DataInStage>
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fb6a 	bl	8007366 <USBD_LL_SOF>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d102      	bne.n	8008cb4 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb2:	e002      	b.n	8008cba <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;    
 8008cb8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cc0:	7bfa      	ldrb	r2, [r7, #15]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fb18 	bl	80072fa <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fae3 	bl	800729c <USBD_LL_Reset>
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fb06 	bl	800731a <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d16:	4a05      	ldr	r2, [pc, #20]	; (8008d2c <HAL_PCD_SuspendCallback+0x4c>)
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <HAL_PCD_SuspendCallback+0x4c>)
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f043 0306 	orr.w	r3, r3, #6
 8008d20:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	e000ed00 	.word	0xe000ed00

08008d30 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <HAL_PCD_ResumeCallback+0x3a>
  {    
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));    
 8008d5a:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <HAL_PCD_ResumeCallback+0x50>)
 8008d5c:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <HAL_PCD_ResumeCallback+0x50>)
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f023 0306 	bic.w	r3, r3, #6
 8008d64:	6113      	str	r3, [r2, #16]
	SystemClockConfig_Resume();
 8008d66:	f000 fae5 	bl	8009334 <SystemClockConfig_Resume>
  }  
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fae7 	bl	8007344 <USBD_LL_Resume>
  
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fb0a 	bl	80073b4 <USBD_LL_IsoOUTIncomplete>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe faeb 	bl	800739a <USBD_LL_IsoINIncomplete>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe faf7 	bl	80073ce <USBD_LL_DevConnected>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe faf4 	bl	80073e4 <USBD_LL_DevDisconnected>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13c      	bne.n	8008e8e <USBD_LL_Init+0x8a>
  /* enable USB power on Pwrctrl CR2 register */
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8008e14:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c2 33c8 	str.w	r3, [r2, #968]	; 0x3c8
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e20:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e24:	4b1c      	ldr	r3, [pc, #112]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e2e:	2206      	movs	r2, #6
 8008e30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e32:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8008e38:	4b17      	ldr	r3, [pc, #92]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e44:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e4a:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008e56:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e62:	480d      	ldr	r0, [pc, #52]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e64:	f7f7 ff38 	bl	8000cd8 <HAL_PCD_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <USBD_LL_Init+0x6e>
  {
    Error_Handler();
 8008e6e:	f7ff faeb 	bl	8008448 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e72:	2180      	movs	r1, #128	; 0x80
 8008e74:	4808      	ldr	r0, [pc, #32]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e76:	f7f9 f874 	bl	8001f62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e7a:	2240      	movs	r2, #64	; 0x40
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4806      	ldr	r0, [pc, #24]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e80:	f7f9 f822 	bl	8001ec8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e84:	2280      	movs	r2, #128	; 0x80
 8008e86:	2101      	movs	r1, #1
 8008e88:	4803      	ldr	r0, [pc, #12]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e8a:	f7f9 f81d 	bl	8001ec8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200009c4 	.word	0x200009c4

08008e9c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f8 f82d 	bl	8000f12 <HAL_PCD_Start>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d816      	bhi.n	8008ef0 <USBD_LL_Start+0x54>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <USBD_LL_Start+0x2c>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008edf 	.word	0x08008edf
 8008ed0:	08008ee5 	.word	0x08008ee5
 8008ed4:	08008eeb 	.word	0x08008eeb
    case HAL_OK :
      usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e00b      	b.n	8008ef6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e008      	b.n	8008ef6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	e005      	b.n	8008ef6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	73fb      	strb	r3, [r7, #15]
    break;
 8008eee:	e002      	b.n	8008ef6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	bf00      	nop
  }
  return usb_status;  
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Stop(pdev->pData);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f8 f81d 	bl	8000f56 <HAL_PCD_Stop>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d816      	bhi.n	8008f54 <USBD_LL_Stop+0x54>
 8008f26:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <USBD_LL_Stop+0x2c>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f3d 	.word	0x08008f3d
 8008f30:	08008f43 	.word	0x08008f43
 8008f34:	08008f49 	.word	0x08008f49
 8008f38:	08008f4f 	.word	0x08008f4f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f40:	e00b      	b.n	8008f5a <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f42:	2302      	movs	r3, #2
 8008f44:	73fb      	strb	r3, [r7, #15]
    break;
 8008f46:	e008      	b.n	8008f5a <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4c:	e005      	b.n	8008f5a <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	73fb      	strb	r3, [r7, #15]
    break;
 8008f52:	e002      	b.n	8008f5a <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008f54:	2302      	movs	r3, #2
 8008f56:	73fb      	strb	r3, [r7, #15]
    break;
 8008f58:	bf00      	nop
  }
  return usb_status; 
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	461a      	mov	r2, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	70fb      	strb	r3, [r7, #3]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70bb      	strb	r3, [r7, #2]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008f8c:	78bb      	ldrb	r3, [r7, #2]
 8008f8e:	883a      	ldrh	r2, [r7, #0]
 8008f90:	78f9      	ldrb	r1, [r7, #3]
 8008f92:	f7f8 fd5c 	bl	8001a4e <HAL_PCD_EP_Open>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d817      	bhi.n	8008fd0 <USBD_LL_OpenEP+0x6c>
 8008fa0:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <USBD_LL_OpenEP+0x44>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fb9 	.word	0x08008fb9
 8008fac:	08008fbf 	.word	0x08008fbf
 8008fb0:	08008fc5 	.word	0x08008fc5
 8008fb4:	08008fcb 	.word	0x08008fcb
    case HAL_OK :
      usb_status = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbc:	e00b      	b.n	8008fd6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc2:	e008      	b.n	8008fd6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc8:	e005      	b.n	8008fd6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fce:	e002      	b.n	8008fd6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	bf00      	nop
  }
  return usb_status; 
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f8 fe29 	bl	8001c56 <HAL_PCD_EP_SetStall>
 8009004:	4603      	mov	r3, r0
 8009006:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d816      	bhi.n	800903c <USBD_LL_StallEP+0x5c>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_LL_StallEP+0x34>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009025 	.word	0x08009025
 8009018:	0800902b 	.word	0x0800902b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009037 	.word	0x08009037
    case HAL_OK :
      usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e00b      	b.n	8009042 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800902a:	2302      	movs	r3, #2
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e008      	b.n	8009042 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e005      	b.n	8009042 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009036:	2302      	movs	r3, #2
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e002      	b.n	8009042 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800903c:	2302      	movs	r3, #2
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	bf00      	nop
  }
  return usb_status;  
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7f8 fe51 	bl	8001d12 <HAL_PCD_EP_ClrStall>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d816      	bhi.n	80090a8 <USBD_LL_ClearStallEP+0x5c>
 800907a:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <USBD_LL_ClearStallEP+0x34>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	08009091 	.word	0x08009091
 8009084:	08009097 	.word	0x08009097
 8009088:	0800909d 	.word	0x0800909d
 800908c:	080090a3 	.word	0x080090a3
    case HAL_OK :
      usb_status = USBD_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
    break;
 8009094:	e00b      	b.n	80090ae <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009096:	2302      	movs	r3, #2
 8009098:	73fb      	strb	r3, [r7, #15]
    break;
 800909a:	e008      	b.n	80090ae <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800909c:	2301      	movs	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
    break;
 80090a0:	e005      	b.n	80090ae <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090a2:	2302      	movs	r3, #2
 80090a4:	73fb      	strb	r3, [r7, #15]
    break;
 80090a6:	e002      	b.n	80090ae <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80090a8:	2302      	movs	r3, #2
 80090aa:	73fb      	strb	r3, [r7, #15]
    break;
 80090ac:	bf00      	nop
  }
  return usb_status; 
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80090ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80090cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da0b      	bge.n	80090ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	333e      	adds	r3, #62	; 0x3e
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	e00b      	b.n	8009104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	4613      	mov	r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	f503 73f1 	add.w	r3, r3, #482	; 0x1e2
 8009102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f7f8 fc68 	bl	8001a04 <HAL_PCD_SetAddress>
 8009134:	4603      	mov	r3, r0
 8009136:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d816      	bhi.n	800916c <USBD_LL_SetUSBAddress+0x5c>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <USBD_LL_SetUSBAddress+0x34>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	08009155 	.word	0x08009155
 8009148:	0800915b 	.word	0x0800915b
 800914c:	08009161 	.word	0x08009161
 8009150:	08009167 	.word	0x08009167
    case HAL_OK :
      usb_status = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
    break;
 8009158:	e00b      	b.n	8009172 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800915a:	2302      	movs	r3, #2
 800915c:	73fb      	strb	r3, [r7, #15]
    break;
 800915e:	e008      	b.n	8009172 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009160:	2301      	movs	r3, #1
 8009162:	73fb      	strb	r3, [r7, #15]
    break;
 8009164:	e005      	b.n	8009172 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009166:	2302      	movs	r3, #2
 8009168:	73fb      	strb	r3, [r7, #15]
    break;
 800916a:	e002      	b.n	8009172 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800916c:	2302      	movs	r3, #2
 800916e:	73fb      	strb	r3, [r7, #15]
    break;
 8009170:	bf00      	nop
  }
  return usb_status;  
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	461a      	mov	r2, r3
 8009188:	460b      	mov	r3, r1
 800918a:	72fb      	strb	r3, [r7, #11]
 800918c:	4613      	mov	r3, r2
 800918e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800919e:	893b      	ldrh	r3, [r7, #8]
 80091a0:	7af9      	ldrb	r1, [r7, #11]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	f7f8 fd03 	bl	8001bae <HAL_PCD_EP_Transmit>
 80091a8:	4603      	mov	r3, r0
 80091aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80091ac:	7dbb      	ldrb	r3, [r7, #22]
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d816      	bhi.n	80091e0 <USBD_LL_Transmit+0x64>
 80091b2:	a201      	add	r2, pc, #4	; (adr r2, 80091b8 <USBD_LL_Transmit+0x3c>)
 80091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b8:	080091c9 	.word	0x080091c9
 80091bc:	080091cf 	.word	0x080091cf
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091db 	.word	0x080091db
    case HAL_OK :
      usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	75fb      	strb	r3, [r7, #23]
    break;
 80091cc:	e00b      	b.n	80091e6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ce:	2302      	movs	r3, #2
 80091d0:	75fb      	strb	r3, [r7, #23]
    break;
 80091d2:	e008      	b.n	80091e6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
    break;
 80091d8:	e005      	b.n	80091e6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091da:	2302      	movs	r3, #2
 80091dc:	75fb      	strb	r3, [r7, #23]
    break;
 80091de:	e002      	b.n	80091e6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80091e0:	2302      	movs	r3, #2
 80091e2:	75fb      	strb	r3, [r7, #23]
    break;
 80091e4:	bf00      	nop
  }
  return usb_status;    
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	461a      	mov	r2, r3
 80091fc:	460b      	mov	r3, r1
 80091fe:	72fb      	strb	r3, [r7, #11]
 8009200:	4613      	mov	r3, r2
 8009202:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009212:	893b      	ldrh	r3, [r7, #8]
 8009214:	7af9      	ldrb	r1, [r7, #11]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	f7f8 fc75 	bl	8001b06 <HAL_PCD_EP_Receive>
 800921c:	4603      	mov	r3, r0
 800921e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009220:	7dbb      	ldrb	r3, [r7, #22]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d816      	bhi.n	8009254 <USBD_LL_PrepareReceive+0x64>
 8009226:	a201      	add	r2, pc, #4	; (adr r2, 800922c <USBD_LL_PrepareReceive+0x3c>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	0800923d 	.word	0x0800923d
 8009230:	08009243 	.word	0x08009243
 8009234:	08009249 	.word	0x08009249
 8009238:	0800924f 	.word	0x0800924f
    case HAL_OK :
      usb_status = USBD_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	75fb      	strb	r3, [r7, #23]
    break;
 8009240:	e00b      	b.n	800925a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009242:	2302      	movs	r3, #2
 8009244:	75fb      	strb	r3, [r7, #23]
    break;
 8009246:	e008      	b.n	800925a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009248:	2301      	movs	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]
    break;
 800924c:	e005      	b.n	800925a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800924e:	2302      	movs	r3, #2
 8009250:	75fb      	strb	r3, [r7, #23]
    break;
 8009252:	e002      	b.n	800925a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009254:	2302      	movs	r3, #2
 8009256:	75fb      	strb	r3, [r7, #23]
    break;
 8009258:	bf00      	nop
  }
  return usb_status; 
 800925a:	7dfb      	ldrb	r3, [r7, #23]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval HAL status
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  switch ( msg)
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_PCDEx_LPM_Callback+0x18>
 8009276:	2b01      	cmp	r3, #1
 8009278:	d020      	beq.n	80092bc <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }     
    break;   
  }
}
 800927a:	e03d      	b.n	80092f8 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009284:	f7fe ff14 	bl	80080b0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009288:	4a1d      	ldr	r2, [pc, #116]	; (8009300 <HAL_PCDEx_LPM_Callback+0x9c>)
 800928a:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <HAL_PCDEx_LPM_Callback+0x9c>)
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f023 0306 	bic.w	r3, r3, #6
 8009292:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800929c:	461a      	mov	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);    
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe f845 	bl	8007344 <USBD_LL_Resume>
    break;
 80092ba:	e01d      	b.n	80092f8 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092c4:	461a      	mov	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe f81c 	bl	800731a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ea:	4a05      	ldr	r2, [pc, #20]	; (8009300 <HAL_PCDEx_LPM_Callback+0x9c>)
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <HAL_PCDEx_LPM_Callback+0x9c>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f043 0306 	orr.w	r3, r3, #6
 80092f4:	6113      	str	r3, [r2, #16]
    break;   
 80092f6:	bf00      	nop
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	e000ed00 	.word	0xe000ed00

08009304 <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <USBD_static_malloc+0x18>)
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	20000254 	.word	0x20000254

08009320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <SystemClockConfig_Resume>:
  *         enable HSI, PLL and select PLL as system clock source.
  * @param  None
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009338:	f7fe feba 	bl	80080b0 <SystemClock_Config>
}
 800933c:	bf00      	nop
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800934e:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE) 
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2212      	movs	r2, #18
 800937c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20000088 	.word	0x20000088

08009390 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2204      	movs	r2, #4
 80093a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093a2:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	200000a8 	.word	0x200000a8

080093b4 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d105      	bne.n	80093d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4907      	ldr	r1, [pc, #28]	; (80093e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80093ca:	4808      	ldr	r0, [pc, #32]	; (80093ec <USBD_FS_ProductStrDescriptor+0x38>)
 80093cc:	f7fe fc49 	bl	8007c62 <USBD_GetString>
 80093d0:	e004      	b.n	80093dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4904      	ldr	r1, [pc, #16]	; (80093e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80093d6:	4805      	ldr	r0, [pc, #20]	; (80093ec <USBD_FS_ProductStrDescriptor+0x38>)
 80093d8:	f7fe fc43 	bl	8007c62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093dc:	4b02      	ldr	r3, [pc, #8]	; (80093e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000d90 	.word	0x20000d90
 80093ec:	0800ab28 	.word	0x0800ab28

080093f0 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	4904      	ldr	r1, [pc, #16]	; (8009410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009400:	4804      	ldr	r0, [pc, #16]	; (8009414 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009402:	f7fe fc2e 	bl	8007c62 <USBD_GetString>
  return USBD_StrDesc;
 8009406:	4b02      	ldr	r3, [pc, #8]	; (8009410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20000d90 	.word	0x20000d90
 8009414:	0800ab48 	.word	0x0800ab48

08009418 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4907      	ldr	r1, [pc, #28]	; (800944c <USBD_FS_SerialStrDescriptor+0x34>)
 800942e:	4808      	ldr	r0, [pc, #32]	; (8009450 <USBD_FS_SerialStrDescriptor+0x38>)
 8009430:	f7fe fc17 	bl	8007c62 <USBD_GetString>
 8009434:	e004      	b.n	8009440 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	4904      	ldr	r1, [pc, #16]	; (800944c <USBD_FS_SerialStrDescriptor+0x34>)
 800943a:	4805      	ldr	r0, [pc, #20]	; (8009450 <USBD_FS_SerialStrDescriptor+0x38>)
 800943c:	f7fe fc11 	bl	8007c62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000d90 	.word	0x20000d90
 8009450:	0800ab5c 	.word	0x0800ab5c

08009454 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d105      	bne.n	8009472 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4907      	ldr	r1, [pc, #28]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800946a:	4808      	ldr	r0, [pc, #32]	; (800948c <USBD_FS_ConfigStrDescriptor+0x38>)
 800946c:	f7fe fbf9 	bl	8007c62 <USBD_GetString>
 8009470:	e004      	b.n	800947c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4904      	ldr	r1, [pc, #16]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009476:	4805      	ldr	r0, [pc, #20]	; (800948c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009478:	f7fe fbf3 	bl	8007c62 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000d90 	.word	0x20000d90
 800948c:	0800ab6c 	.word	0x0800ab6c

08009490 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4907      	ldr	r1, [pc, #28]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094a6:	4808      	ldr	r0, [pc, #32]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094a8:	f7fe fbdb 	bl	8007c62 <USBD_GetString>
 80094ac:	e004      	b.n	80094b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4904      	ldr	r1, [pc, #16]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094b2:	4805      	ldr	r0, [pc, #20]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b4:	f7fe fbd5 	bl	8007c62 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80094b8:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000d90 	.word	0x20000d90
 80094c8:	0800ab78 	.word	0x0800ab78

080094cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed , uint16_t *length)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	220c      	movs	r2, #12
 80094dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80094de:	4b03      	ldr	r3, [pc, #12]	; (80094ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	2000009c 	.word	0x2000009c

080094f0 <MEM_If_Init_FS>:
  *         Memory initialization routine.
  * @param  None
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{ 
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */ 
  return (USBD_OK);
 80094f4:	2300      	movs	r3, #0
  /* USER CODE END 0 */ 
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <MEM_If_DeInit_FS>:
  *         De-Initializes Memory.
  * @param  None
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_FS(void)
{ 
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */ 
  return (USBD_OK);
 8009504:	2300      	movs	r3, #0
  /* USER CODE END 1 */ 
}
 8009506:	4618      	mov	r0, r3
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <MEM_If_Erase_FS>:
  *         Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8009518:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */ 
  return (USBD_OK);
 8009532:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS (uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */ 
  return (uint8_t*)(USBD_OK);
 800954c:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_FS (uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	460b      	mov	r3, r1
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */ 
  switch (Cmd)
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d000      	beq.n	8009570 <MEM_If_GetStatus_FS+0x16>
    break;
    
  case DFU_MEDIA_ERASE:
  default:

    break;
 800956e:	e000      	b.n	8009572 <MEM_If_GetStatus_FS+0x18>
    break;
 8009570:	bf00      	nop
  }                             
  return  (USBD_OK);
 8009572:	2300      	movs	r3, #0
  /* USER CODE END 5 */  
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009586:	e003      	b.n	8009590 <LoopCopyDataInit>

08009588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800958a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800958c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800958e:	3104      	adds	r1, #4

08009590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009590:	480b      	ldr	r0, [pc, #44]	; (80095c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009592:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009598:	d3f6      	bcc.n	8009588 <CopyDataInit>
	ldr	r2, =_sbss
 800959a:	4a0b      	ldr	r2, [pc, #44]	; (80095c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800959c:	e002      	b.n	80095a4 <LoopFillZerobss>

0800959e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800959e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80095a0:	f842 3b04 	str.w	r3, [r2], #4

080095a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80095a4:	4b09      	ldr	r3, [pc, #36]	; (80095cc <LoopForever+0x16>)
	cmp	r2, r3
 80095a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80095a8:	d3f9      	bcc.n	800959e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80095aa:	f7ff fa77 	bl	8008a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80095ae:	f000 faad 	bl	8009b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80095b2:	f7fe fccf 	bl	8007f54 <main>

080095b6 <LoopForever>:

LoopForever:
    b LoopForever
 80095b6:	e7fe      	b.n	80095b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80095b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80095bc:	0800acd8 	.word	0x0800acd8
	ldr	r0, =_sdata
 80095c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80095c4:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 80095c8:	2000012c 	.word	0x2000012c
	ldr	r3, = _ebss
 80095cc:	20000f94 	.word	0x20000f94

080095d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80095d0:	e7fe      	b.n	80095d0 <ADC1_2_IRQHandler>
	...

080095d4 <_fgets_r>:
 80095d4:	2a01      	cmp	r2, #1
 80095d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095da:	4681      	mov	r9, r0
 80095dc:	460e      	mov	r6, r1
 80095de:	4690      	mov	r8, r2
 80095e0:	461c      	mov	r4, r3
 80095e2:	dc02      	bgt.n	80095ea <_fgets_r+0x16>
 80095e4:	2000      	movs	r0, #0
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	b118      	cbz	r0, 80095f4 <_fgets_r+0x20>
 80095ec:	6983      	ldr	r3, [r0, #24]
 80095ee:	b90b      	cbnz	r3, 80095f4 <_fgets_r+0x20>
 80095f0:	f000 f89c 	bl	800972c <__sinit>
 80095f4:	4b25      	ldr	r3, [pc, #148]	; (800968c <_fgets_r+0xb8>)
 80095f6:	429c      	cmp	r4, r3
 80095f8:	d110      	bne.n	800961c <_fgets_r+0x48>
 80095fa:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80095fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009602:	4637      	mov	r7, r6
 8009604:	6865      	ldr	r5, [r4, #4]
 8009606:	b9b5      	cbnz	r5, 8009636 <_fgets_r+0x62>
 8009608:	4621      	mov	r1, r4
 800960a:	4648      	mov	r0, r9
 800960c:	f000 ff34 	bl	800a478 <__srefill_r>
 8009610:	b180      	cbz	r0, 8009634 <_fgets_r+0x60>
 8009612:	42b7      	cmp	r7, r6
 8009614:	d0e6      	beq.n	80095e4 <_fgets_r+0x10>
 8009616:	2300      	movs	r3, #0
 8009618:	703b      	strb	r3, [r7, #0]
 800961a:	e025      	b.n	8009668 <_fgets_r+0x94>
 800961c:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <_fgets_r+0xbc>)
 800961e:	429c      	cmp	r4, r3
 8009620:	d102      	bne.n	8009628 <_fgets_r+0x54>
 8009622:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8009626:	e7ea      	b.n	80095fe <_fgets_r+0x2a>
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <_fgets_r+0xc0>)
 800962a:	429c      	cmp	r4, r3
 800962c:	bf08      	it	eq
 800962e:	f8d9 400c 	ldreq.w	r4, [r9, #12]
 8009632:	e7e4      	b.n	80095fe <_fgets_r+0x2a>
 8009634:	6865      	ldr	r5, [r4, #4]
 8009636:	f8d4 a000 	ldr.w	sl, [r4]
 800963a:	4545      	cmp	r5, r8
 800963c:	bf28      	it	cs
 800963e:	4645      	movcs	r5, r8
 8009640:	462a      	mov	r2, r5
 8009642:	210a      	movs	r1, #10
 8009644:	4650      	mov	r0, sl
 8009646:	f7f6 fdc3 	bl	80001d0 <memchr>
 800964a:	6863      	ldr	r3, [r4, #4]
 800964c:	b178      	cbz	r0, 800966e <_fgets_r+0x9a>
 800964e:	3001      	adds	r0, #1
 8009650:	eba0 050a 	sub.w	r5, r0, sl
 8009654:	1b5b      	subs	r3, r3, r5
 8009656:	e884 0009 	stmia.w	r4, {r0, r3}
 800965a:	462a      	mov	r2, r5
 800965c:	4651      	mov	r1, sl
 800965e:	4638      	mov	r0, r7
 8009660:	f000 fadc 	bl	8009c1c <memcpy>
 8009664:	2300      	movs	r3, #0
 8009666:	557b      	strb	r3, [r7, r5]
 8009668:	4630      	mov	r0, r6
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	1b5b      	subs	r3, r3, r5
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	442b      	add	r3, r5
 8009676:	4638      	mov	r0, r7
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	462a      	mov	r2, r5
 800967c:	4651      	mov	r1, sl
 800967e:	f000 facd 	bl	8009c1c <memcpy>
 8009682:	ebb8 0805 	subs.w	r8, r8, r5
 8009686:	442f      	add	r7, r5
 8009688:	d1bc      	bne.n	8009604 <_fgets_r+0x30>
 800968a:	e7c4      	b.n	8009616 <_fgets_r+0x42>
 800968c:	0800ac50 	.word	0x0800ac50
 8009690:	0800ac70 	.word	0x0800ac70
 8009694:	0800ac30 	.word	0x0800ac30

08009698 <fgets>:
 8009698:	4613      	mov	r3, r2
 800969a:	460a      	mov	r2, r1
 800969c:	4601      	mov	r1, r0
 800969e:	4802      	ldr	r0, [pc, #8]	; (80096a8 <fgets+0x10>)
 80096a0:	6800      	ldr	r0, [r0, #0]
 80096a2:	f7ff bf97 	b.w	80095d4 <_fgets_r>
 80096a6:	bf00      	nop
 80096a8:	200000c8 	.word	0x200000c8

080096ac <_cleanup_r>:
 80096ac:	4901      	ldr	r1, [pc, #4]	; (80096b4 <_cleanup_r+0x8>)
 80096ae:	f000 b9b3 	b.w	8009a18 <_fwalk_reent>
 80096b2:	bf00      	nop
 80096b4:	0800a909 	.word	0x0800a909

080096b8 <std.isra.0>:
 80096b8:	2300      	movs	r3, #0
 80096ba:	b510      	push	{r4, lr}
 80096bc:	4604      	mov	r4, r0
 80096be:	6003      	str	r3, [r0, #0]
 80096c0:	6043      	str	r3, [r0, #4]
 80096c2:	6083      	str	r3, [r0, #8]
 80096c4:	8181      	strh	r1, [r0, #12]
 80096c6:	6643      	str	r3, [r0, #100]	; 0x64
 80096c8:	81c2      	strh	r2, [r0, #14]
 80096ca:	6103      	str	r3, [r0, #16]
 80096cc:	6143      	str	r3, [r0, #20]
 80096ce:	6183      	str	r3, [r0, #24]
 80096d0:	4619      	mov	r1, r3
 80096d2:	2208      	movs	r2, #8
 80096d4:	305c      	adds	r0, #92	; 0x5c
 80096d6:	f000 faac 	bl	8009c32 <memset>
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std.isra.0+0x38>)
 80096dc:	6263      	str	r3, [r4, #36]	; 0x24
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std.isra.0+0x3c>)
 80096e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std.isra.0+0x40>)
 80096e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std.isra.0+0x44>)
 80096e8:	6224      	str	r4, [r4, #32]
 80096ea:	6323      	str	r3, [r4, #48]	; 0x30
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	0800a5ad 	.word	0x0800a5ad
 80096f4:	0800a5cf 	.word	0x0800a5cf
 80096f8:	0800a607 	.word	0x0800a607
 80096fc:	0800a62b 	.word	0x0800a62b

08009700 <__sfmoreglue>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	1e4a      	subs	r2, r1, #1
 8009704:	2568      	movs	r5, #104	; 0x68
 8009706:	4355      	muls	r5, r2
 8009708:	460e      	mov	r6, r1
 800970a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970e:	f000 fae7 	bl	8009ce0 <_malloc_r>
 8009712:	4604      	mov	r4, r0
 8009714:	b140      	cbz	r0, 8009728 <__sfmoreglue+0x28>
 8009716:	2100      	movs	r1, #0
 8009718:	e880 0042 	stmia.w	r0, {r1, r6}
 800971c:	300c      	adds	r0, #12
 800971e:	60a0      	str	r0, [r4, #8]
 8009720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009724:	f000 fa85 	bl	8009c32 <memset>
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}

0800972c <__sinit>:
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	b510      	push	{r4, lr}
 8009730:	4604      	mov	r4, r0
 8009732:	bb33      	cbnz	r3, 8009782 <__sinit+0x56>
 8009734:	6483      	str	r3, [r0, #72]	; 0x48
 8009736:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009738:	6503      	str	r3, [r0, #80]	; 0x50
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <__sinit+0x58>)
 800973c:	4a12      	ldr	r2, [pc, #72]	; (8009788 <__sinit+0x5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6282      	str	r2, [r0, #40]	; 0x28
 8009742:	4298      	cmp	r0, r3
 8009744:	bf04      	itt	eq
 8009746:	2301      	moveq	r3, #1
 8009748:	6183      	streq	r3, [r0, #24]
 800974a:	f000 f81f 	bl	800978c <__sfp>
 800974e:	6060      	str	r0, [r4, #4]
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f81b 	bl	800978c <__sfp>
 8009756:	60a0      	str	r0, [r4, #8]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f817 	bl	800978c <__sfp>
 800975e:	2200      	movs	r2, #0
 8009760:	60e0      	str	r0, [r4, #12]
 8009762:	2104      	movs	r1, #4
 8009764:	6860      	ldr	r0, [r4, #4]
 8009766:	f7ff ffa7 	bl	80096b8 <std.isra.0>
 800976a:	2201      	movs	r2, #1
 800976c:	2109      	movs	r1, #9
 800976e:	68a0      	ldr	r0, [r4, #8]
 8009770:	f7ff ffa2 	bl	80096b8 <std.isra.0>
 8009774:	2202      	movs	r2, #2
 8009776:	2112      	movs	r1, #18
 8009778:	68e0      	ldr	r0, [r4, #12]
 800977a:	f7ff ff9d 	bl	80096b8 <std.isra.0>
 800977e:	2301      	movs	r3, #1
 8009780:	61a3      	str	r3, [r4, #24]
 8009782:	bd10      	pop	{r4, pc}
 8009784:	0800ac90 	.word	0x0800ac90
 8009788:	080096ad 	.word	0x080096ad

0800978c <__sfp>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	4b1c      	ldr	r3, [pc, #112]	; (8009800 <__sfp+0x74>)
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	69b3      	ldr	r3, [r6, #24]
 8009794:	4607      	mov	r7, r0
 8009796:	b913      	cbnz	r3, 800979e <__sfp+0x12>
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff ffc7 	bl	800972c <__sinit>
 800979e:	3648      	adds	r6, #72	; 0x48
 80097a0:	68b4      	ldr	r4, [r6, #8]
 80097a2:	6873      	ldr	r3, [r6, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	d503      	bpl.n	80097b0 <__sfp+0x24>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	b133      	cbz	r3, 80097ba <__sfp+0x2e>
 80097ac:	6836      	ldr	r6, [r6, #0]
 80097ae:	e7f7      	b.n	80097a0 <__sfp+0x14>
 80097b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097b4:	b16d      	cbz	r5, 80097d2 <__sfp+0x46>
 80097b6:	3468      	adds	r4, #104	; 0x68
 80097b8:	e7f4      	b.n	80097a4 <__sfp+0x18>
 80097ba:	2104      	movs	r1, #4
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff ff9f 	bl	8009700 <__sfmoreglue>
 80097c2:	6030      	str	r0, [r6, #0]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f1      	bne.n	80097ac <__sfp+0x20>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4604      	mov	r4, r0
 80097ce:	4620      	mov	r0, r4
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097d6:	81e3      	strh	r3, [r4, #14]
 80097d8:	2301      	movs	r3, #1
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	6665      	str	r5, [r4, #100]	; 0x64
 80097de:	6025      	str	r5, [r4, #0]
 80097e0:	60a5      	str	r5, [r4, #8]
 80097e2:	6065      	str	r5, [r4, #4]
 80097e4:	6125      	str	r5, [r4, #16]
 80097e6:	6165      	str	r5, [r4, #20]
 80097e8:	61a5      	str	r5, [r4, #24]
 80097ea:	2208      	movs	r2, #8
 80097ec:	4629      	mov	r1, r5
 80097ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097f2:	f000 fa1e 	bl	8009c32 <memset>
 80097f6:	6365      	str	r5, [r4, #52]	; 0x34
 80097f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80097fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80097fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80097fe:	e7e6      	b.n	80097ce <__sfp+0x42>
 8009800:	0800ac90 	.word	0x0800ac90

08009804 <__sfp_lock_acquire>:
 8009804:	4770      	bx	lr

08009806 <__sfp_lock_release>:
 8009806:	4770      	bx	lr

08009808 <_fopen_r>:
 8009808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800980a:	460f      	mov	r7, r1
 800980c:	4611      	mov	r1, r2
 800980e:	aa01      	add	r2, sp, #4
 8009810:	4605      	mov	r5, r0
 8009812:	f001 f8b5 	bl	800a980 <__sflags>
 8009816:	4606      	mov	r6, r0
 8009818:	b918      	cbnz	r0, 8009822 <_fopen_r+0x1a>
 800981a:	2400      	movs	r4, #0
 800981c:	4620      	mov	r0, r4
 800981e:	b003      	add	sp, #12
 8009820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009822:	4628      	mov	r0, r5
 8009824:	f7ff ffb2 	bl	800978c <__sfp>
 8009828:	4604      	mov	r4, r0
 800982a:	2800      	cmp	r0, #0
 800982c:	d0f5      	beq.n	800981a <_fopen_r+0x12>
 800982e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8009832:	9a01      	ldr	r2, [sp, #4]
 8009834:	4639      	mov	r1, r7
 8009836:	4628      	mov	r0, r5
 8009838:	f000 fd86 	bl	800a348 <_open_r>
 800983c:	2800      	cmp	r0, #0
 800983e:	da06      	bge.n	800984e <_fopen_r+0x46>
 8009840:	2500      	movs	r5, #0
 8009842:	f7ff ffdf 	bl	8009804 <__sfp_lock_acquire>
 8009846:	81a5      	strh	r5, [r4, #12]
 8009848:	f7ff ffdd 	bl	8009806 <__sfp_lock_release>
 800984c:	e7e5      	b.n	800981a <_fopen_r+0x12>
 800984e:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <_fopen_r+0x70>)
 8009850:	6263      	str	r3, [r4, #36]	; 0x24
 8009852:	4b0a      	ldr	r3, [pc, #40]	; (800987c <_fopen_r+0x74>)
 8009854:	62a3      	str	r3, [r4, #40]	; 0x28
 8009856:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <_fopen_r+0x78>)
 8009858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <_fopen_r+0x7c>)
 800985c:	6323      	str	r3, [r4, #48]	; 0x30
 800985e:	05f3      	lsls	r3, r6, #23
 8009860:	81e0      	strh	r0, [r4, #14]
 8009862:	81a6      	strh	r6, [r4, #12]
 8009864:	6224      	str	r4, [r4, #32]
 8009866:	d5d9      	bpl.n	800981c <_fopen_r+0x14>
 8009868:	2302      	movs	r3, #2
 800986a:	2200      	movs	r2, #0
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f812 	bl	8009898 <_fseek_r>
 8009874:	e7d2      	b.n	800981c <_fopen_r+0x14>
 8009876:	bf00      	nop
 8009878:	0800a5ad 	.word	0x0800a5ad
 800987c:	0800a5cf 	.word	0x0800a5cf
 8009880:	0800a607 	.word	0x0800a607
 8009884:	0800a62b 	.word	0x0800a62b

08009888 <fopen>:
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <fopen+0xc>)
 800988a:	460a      	mov	r2, r1
 800988c:	4601      	mov	r1, r0
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	f7ff bfba 	b.w	8009808 <_fopen_r>
 8009894:	200000c8 	.word	0x200000c8

08009898 <_fseek_r>:
 8009898:	f000 b800 	b.w	800989c <_fseeko_r>

0800989c <_fseeko_r>:
 800989c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	4691      	mov	r9, r2
 80098a4:	461e      	mov	r6, r3
 80098a6:	4605      	mov	r5, r0
 80098a8:	b118      	cbz	r0, 80098b2 <_fseeko_r+0x16>
 80098aa:	6983      	ldr	r3, [r0, #24]
 80098ac:	b90b      	cbnz	r3, 80098b2 <_fseeko_r+0x16>
 80098ae:	f7ff ff3d 	bl	800972c <__sinit>
 80098b2:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <_fseeko_r+0x114>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d112      	bne.n	80098de <_fseeko_r+0x42>
 80098b8:	686c      	ldr	r4, [r5, #4]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80098c0:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80098c4:	d103      	bne.n	80098ce <_fseeko_r+0x32>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f001 f81d 	bl	800a908 <_fflush_r>
 80098ce:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d10c      	bne.n	80098f2 <_fseeko_r+0x56>
 80098d8:	231d      	movs	r3, #29
 80098da:	602b      	str	r3, [r5, #0]
 80098dc:	e057      	b.n	800998e <_fseeko_r+0xf2>
 80098de:	4b35      	ldr	r3, [pc, #212]	; (80099b4 <_fseeko_r+0x118>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d101      	bne.n	80098e8 <_fseeko_r+0x4c>
 80098e4:	68ac      	ldr	r4, [r5, #8]
 80098e6:	e7e8      	b.n	80098ba <_fseeko_r+0x1e>
 80098e8:	4b33      	ldr	r3, [pc, #204]	; (80099b8 <_fseeko_r+0x11c>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	bf08      	it	eq
 80098ee:	68ec      	ldreq	r4, [r5, #12]
 80098f0:	e7e3      	b.n	80098ba <_fseeko_r+0x1e>
 80098f2:	2e01      	cmp	r6, #1
 80098f4:	d030      	beq.n	8009958 <_fseeko_r+0xbc>
 80098f6:	2e02      	cmp	r6, #2
 80098f8:	d001      	beq.n	80098fe <_fseeko_r+0x62>
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	d155      	bne.n	80099aa <_fseeko_r+0x10e>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	b91b      	cbnz	r3, 800990a <_fseeko_r+0x6e>
 8009902:	4621      	mov	r1, r4
 8009904:	4628      	mov	r0, r5
 8009906:	f000 f949 	bl	8009b9c <__smakebuf_r>
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 fffb 	bl	800a908 <_fflush_r>
 8009912:	4607      	mov	r7, r0
 8009914:	2800      	cmp	r0, #0
 8009916:	d13a      	bne.n	800998e <_fseeko_r+0xf2>
 8009918:	4633      	mov	r3, r6
 800991a:	464a      	mov	r2, r9
 800991c:	6a21      	ldr	r1, [r4, #32]
 800991e:	4628      	mov	r0, r5
 8009920:	47c0      	blx	r8
 8009922:	3001      	adds	r0, #1
 8009924:	d033      	beq.n	800998e <_fseeko_r+0xf2>
 8009926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009928:	b141      	cbz	r1, 800993c <_fseeko_r+0xa0>
 800992a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800992e:	4299      	cmp	r1, r3
 8009930:	d002      	beq.n	8009938 <_fseeko_r+0x9c>
 8009932:	4628      	mov	r0, r5
 8009934:	f000 f986 	bl	8009c44 <_free_r>
 8009938:	2300      	movs	r3, #0
 800993a:	6363      	str	r3, [r4, #52]	; 0x34
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	2100      	movs	r1, #0
 8009944:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8009948:	6061      	str	r1, [r4, #4]
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	2208      	movs	r2, #8
 800994e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009952:	f000 f96e 	bl	8009c32 <memset>
 8009956:	e01c      	b.n	8009992 <_fseeko_r+0xf6>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 ffd4 	bl	800a908 <_fflush_r>
 8009960:	89a2      	ldrh	r2, [r4, #12]
 8009962:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009966:	d00c      	beq.n	8009982 <_fseeko_r+0xe6>
 8009968:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	075a      	lsls	r2, r3, #29
 800996e:	d513      	bpl.n	8009998 <_fseeko_r+0xfc>
 8009970:	6863      	ldr	r3, [r4, #4]
 8009972:	1ac0      	subs	r0, r0, r3
 8009974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009976:	b10b      	cbz	r3, 800997c <_fseeko_r+0xe0>
 8009978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800997a:	1ac0      	subs	r0, r0, r3
 800997c:	4481      	add	r9, r0
 800997e:	2600      	movs	r6, #0
 8009980:	e7bd      	b.n	80098fe <_fseeko_r+0x62>
 8009982:	6a21      	ldr	r1, [r4, #32]
 8009984:	4633      	mov	r3, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47c0      	blx	r8
 800998a:	1c41      	adds	r1, r0, #1
 800998c:	d1ed      	bne.n	800996a <_fseeko_r+0xce>
 800998e:	f04f 37ff 	mov.w	r7, #4294967295
 8009992:	4638      	mov	r0, r7
 8009994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009998:	071b      	lsls	r3, r3, #28
 800999a:	d5ef      	bpl.n	800997c <_fseeko_r+0xe0>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0ec      	beq.n	800997c <_fseeko_r+0xe0>
 80099a2:	6922      	ldr	r2, [r4, #16]
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	4418      	add	r0, r3
 80099a8:	e7e8      	b.n	800997c <_fseeko_r+0xe0>
 80099aa:	2316      	movs	r3, #22
 80099ac:	e795      	b.n	80098da <_fseeko_r+0x3e>
 80099ae:	bf00      	nop
 80099b0:	0800ac50 	.word	0x0800ac50
 80099b4:	0800ac70 	.word	0x0800ac70
 80099b8:	0800ac30 	.word	0x0800ac30

080099bc <_fsetpos_r>:
 80099bc:	b508      	push	{r3, lr}
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	2300      	movs	r3, #0
 80099c2:	f7ff ff69 	bl	8009898 <_fseek_r>
 80099c6:	3000      	adds	r0, #0
 80099c8:	bf18      	it	ne
 80099ca:	2001      	movne	r0, #1
 80099cc:	bd08      	pop	{r3, pc}
	...

080099d0 <fsetpos>:
 80099d0:	4b02      	ldr	r3, [pc, #8]	; (80099dc <fsetpos+0xc>)
 80099d2:	460a      	mov	r2, r1
 80099d4:	4601      	mov	r1, r0
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	f7ff bff0 	b.w	80099bc <_fsetpos_r>
 80099dc:	200000c8 	.word	0x200000c8

080099e0 <_fwalk>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	4688      	mov	r8, r1
 80099e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099ea:	2600      	movs	r6, #0
 80099ec:	b914      	cbnz	r4, 80099f4 <_fwalk+0x14>
 80099ee:	4630      	mov	r0, r6
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	68a5      	ldr	r5, [r4, #8]
 80099f6:	6867      	ldr	r7, [r4, #4]
 80099f8:	3f01      	subs	r7, #1
 80099fa:	d501      	bpl.n	8009a00 <_fwalk+0x20>
 80099fc:	6824      	ldr	r4, [r4, #0]
 80099fe:	e7f5      	b.n	80099ec <_fwalk+0xc>
 8009a00:	89ab      	ldrh	r3, [r5, #12]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d906      	bls.n	8009a14 <_fwalk+0x34>
 8009a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	d002      	beq.n	8009a14 <_fwalk+0x34>
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47c0      	blx	r8
 8009a12:	4306      	orrs	r6, r0
 8009a14:	3568      	adds	r5, #104	; 0x68
 8009a16:	e7ef      	b.n	80099f8 <_fwalk+0x18>

08009a18 <_fwalk_reent>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	4689      	mov	r9, r1
 8009a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a24:	2600      	movs	r6, #0
 8009a26:	b914      	cbnz	r4, 8009a2e <_fwalk_reent+0x16>
 8009a28:	4630      	mov	r0, r6
 8009a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2e:	68a5      	ldr	r5, [r4, #8]
 8009a30:	6867      	ldr	r7, [r4, #4]
 8009a32:	3f01      	subs	r7, #1
 8009a34:	d501      	bpl.n	8009a3a <_fwalk_reent+0x22>
 8009a36:	6824      	ldr	r4, [r4, #0]
 8009a38:	e7f5      	b.n	8009a26 <_fwalk_reent+0xe>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d907      	bls.n	8009a50 <_fwalk_reent+0x38>
 8009a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a44:	3301      	adds	r3, #1
 8009a46:	d003      	beq.n	8009a50 <_fwalk_reent+0x38>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	47c8      	blx	r9
 8009a4e:	4306      	orrs	r6, r0
 8009a50:	3568      	adds	r5, #104	; 0x68
 8009a52:	e7ee      	b.n	8009a32 <_fwalk_reent+0x1a>

08009a54 <_fwrite_r>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	9c08      	ldr	r4, [sp, #32]
 8009a5a:	4689      	mov	r9, r1
 8009a5c:	4617      	mov	r7, r2
 8009a5e:	fb02 f803 	mul.w	r8, r2, r3
 8009a62:	4606      	mov	r6, r0
 8009a64:	b118      	cbz	r0, 8009a6e <_fwrite_r+0x1a>
 8009a66:	6983      	ldr	r3, [r0, #24]
 8009a68:	b90b      	cbnz	r3, 8009a6e <_fwrite_r+0x1a>
 8009a6a:	f7ff fe5f 	bl	800972c <__sinit>
 8009a6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <_fwrite_r+0x90>)
 8009a70:	429c      	cmp	r4, r3
 8009a72:	d11a      	bne.n	8009aaa <_fwrite_r+0x56>
 8009a74:	6874      	ldr	r4, [r6, #4]
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	071b      	lsls	r3, r3, #28
 8009a7a:	d520      	bpl.n	8009abe <_fwrite_r+0x6a>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b1f3      	cbz	r3, 8009abe <_fwrite_r+0x6a>
 8009a80:	2500      	movs	r5, #0
 8009a82:	4545      	cmp	r5, r8
 8009a84:	d029      	beq.n	8009ada <_fwrite_r+0x86>
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	f819 1005 	ldrb.w	r1, [r9, r5]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	da04      	bge.n	8009a9e <_fwrite_r+0x4a>
 8009a94:	69a2      	ldr	r2, [r4, #24]
 8009a96:	4293      	cmp	r3, r2
 8009a98:	db19      	blt.n	8009ace <_fwrite_r+0x7a>
 8009a9a:	290a      	cmp	r1, #10
 8009a9c:	d017      	beq.n	8009ace <_fwrite_r+0x7a>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	7019      	strb	r1, [r3, #0]
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	e7eb      	b.n	8009a82 <_fwrite_r+0x2e>
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <_fwrite_r+0x94>)
 8009aac:	429c      	cmp	r4, r3
 8009aae:	d101      	bne.n	8009ab4 <_fwrite_r+0x60>
 8009ab0:	68b4      	ldr	r4, [r6, #8]
 8009ab2:	e7e0      	b.n	8009a76 <_fwrite_r+0x22>
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <_fwrite_r+0x98>)
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	bf08      	it	eq
 8009aba:	68f4      	ldreq	r4, [r6, #12]
 8009abc:	e7db      	b.n	8009a76 <_fwrite_r+0x22>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 fe1b 	bl	800a6fc <__swsetup_r>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d0da      	beq.n	8009a80 <_fwrite_r+0x2c>
 8009aca:	2500      	movs	r5, #0
 8009acc:	e005      	b.n	8009ada <_fwrite_r+0x86>
 8009ace:	4622      	mov	r2, r4
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 fdaf 	bl	800a634 <__swbuf_r>
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d1e5      	bne.n	8009aa6 <_fwrite_r+0x52>
 8009ada:	fbb5 f0f7 	udiv	r0, r5, r7
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800ac50 	.word	0x0800ac50
 8009ae8:	0800ac70 	.word	0x0800ac70
 8009aec:	0800ac30 	.word	0x0800ac30

08009af0 <fwrite>:
 8009af0:	b507      	push	{r0, r1, r2, lr}
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4613      	mov	r3, r2
 8009af6:	460a      	mov	r2, r1
 8009af8:	4601      	mov	r1, r0
 8009afa:	4803      	ldr	r0, [pc, #12]	; (8009b08 <fwrite+0x18>)
 8009afc:	6800      	ldr	r0, [r0, #0]
 8009afe:	f7ff ffa9 	bl	8009a54 <_fwrite_r>
 8009b02:	b003      	add	sp, #12
 8009b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b08:	200000c8 	.word	0x200000c8

08009b0c <__libc_init_array>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4e0d      	ldr	r6, [pc, #52]	; (8009b44 <__libc_init_array+0x38>)
 8009b10:	4c0d      	ldr	r4, [pc, #52]	; (8009b48 <__libc_init_array+0x3c>)
 8009b12:	1ba4      	subs	r4, r4, r6
 8009b14:	10a4      	asrs	r4, r4, #2
 8009b16:	2500      	movs	r5, #0
 8009b18:	42a5      	cmp	r5, r4
 8009b1a:	d109      	bne.n	8009b30 <__libc_init_array+0x24>
 8009b1c:	4e0b      	ldr	r6, [pc, #44]	; (8009b4c <__libc_init_array+0x40>)
 8009b1e:	4c0c      	ldr	r4, [pc, #48]	; (8009b50 <__libc_init_array+0x44>)
 8009b20:	f000 ffac 	bl	800aa7c <_init>
 8009b24:	1ba4      	subs	r4, r4, r6
 8009b26:	10a4      	asrs	r4, r4, #2
 8009b28:	2500      	movs	r5, #0
 8009b2a:	42a5      	cmp	r5, r4
 8009b2c:	d105      	bne.n	8009b3a <__libc_init_array+0x2e>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b34:	4798      	blx	r3
 8009b36:	3501      	adds	r5, #1
 8009b38:	e7ee      	b.n	8009b18 <__libc_init_array+0xc>
 8009b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b3e:	4798      	blx	r3
 8009b40:	3501      	adds	r5, #1
 8009b42:	e7f2      	b.n	8009b2a <__libc_init_array+0x1e>
 8009b44:	0800acd0 	.word	0x0800acd0
 8009b48:	0800acd0 	.word	0x0800acd0
 8009b4c:	0800acd0 	.word	0x0800acd0
 8009b50:	0800acd4 	.word	0x0800acd4

08009b54 <__swhatbuf_r>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	460e      	mov	r6, r1
 8009b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	b090      	sub	sp, #64	; 0x40
 8009b60:	4614      	mov	r4, r2
 8009b62:	461d      	mov	r5, r3
 8009b64:	da07      	bge.n	8009b76 <__swhatbuf_r+0x22>
 8009b66:	2300      	movs	r3, #0
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	89b3      	ldrh	r3, [r6, #12]
 8009b6c:	061a      	lsls	r2, r3, #24
 8009b6e:	d410      	bmi.n	8009b92 <__swhatbuf_r+0x3e>
 8009b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b74:	e00e      	b.n	8009b94 <__swhatbuf_r+0x40>
 8009b76:	aa01      	add	r2, sp, #4
 8009b78:	f000 ff38 	bl	800a9ec <_fstat_r>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	dbf2      	blt.n	8009b66 <__swhatbuf_r+0x12>
 8009b80:	9a02      	ldr	r2, [sp, #8]
 8009b82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b8a:	425a      	negs	r2, r3
 8009b8c:	415a      	adcs	r2, r3
 8009b8e:	602a      	str	r2, [r5, #0]
 8009b90:	e7ee      	b.n	8009b70 <__swhatbuf_r+0x1c>
 8009b92:	2340      	movs	r3, #64	; 0x40
 8009b94:	2000      	movs	r0, #0
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	b010      	add	sp, #64	; 0x40
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}

08009b9c <__smakebuf_r>:
 8009b9c:	898b      	ldrh	r3, [r1, #12]
 8009b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba0:	079d      	lsls	r5, r3, #30
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d507      	bpl.n	8009bb8 <__smakebuf_r+0x1c>
 8009ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	6163      	str	r3, [r4, #20]
 8009bb4:	b002      	add	sp, #8
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	ab01      	add	r3, sp, #4
 8009bba:	466a      	mov	r2, sp
 8009bbc:	f7ff ffca 	bl	8009b54 <__swhatbuf_r>
 8009bc0:	9900      	ldr	r1, [sp, #0]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f88b 	bl	8009ce0 <_malloc_r>
 8009bca:	b948      	cbnz	r0, 8009be0 <__smakebuf_r+0x44>
 8009bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd0:	059a      	lsls	r2, r3, #22
 8009bd2:	d4ef      	bmi.n	8009bb4 <__smakebuf_r+0x18>
 8009bd4:	f023 0303 	bic.w	r3, r3, #3
 8009bd8:	f043 0302 	orr.w	r3, r3, #2
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	e7e3      	b.n	8009ba8 <__smakebuf_r+0xc>
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <__smakebuf_r+0x7c>)
 8009be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	6163      	str	r3, [r4, #20]
 8009bf2:	9b01      	ldr	r3, [sp, #4]
 8009bf4:	6120      	str	r0, [r4, #16]
 8009bf6:	b15b      	cbz	r3, 8009c10 <__smakebuf_r+0x74>
 8009bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f000 ff07 	bl	800aa10 <_isatty_r>
 8009c02:	b128      	cbz	r0, 8009c10 <__smakebuf_r+0x74>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	431d      	orrs	r5, r3
 8009c14:	81a5      	strh	r5, [r4, #12]
 8009c16:	e7cd      	b.n	8009bb4 <__smakebuf_r+0x18>
 8009c18:	080096ad 	.word	0x080096ad

08009c1c <memcpy>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	1e43      	subs	r3, r0, #1
 8009c20:	440a      	add	r2, r1
 8009c22:	4291      	cmp	r1, r2
 8009c24:	d100      	bne.n	8009c28 <memcpy+0xc>
 8009c26:	bd10      	pop	{r4, pc}
 8009c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c30:	e7f7      	b.n	8009c22 <memcpy+0x6>

08009c32 <memset>:
 8009c32:	4402      	add	r2, r0
 8009c34:	4603      	mov	r3, r0
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d100      	bne.n	8009c3c <memset+0xa>
 8009c3a:	4770      	bx	lr
 8009c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8009c40:	e7f9      	b.n	8009c36 <memset+0x4>
	...

08009c44 <_free_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4605      	mov	r5, r0
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	d045      	beq.n	8009cd8 <_free_r+0x94>
 8009c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c50:	1f0c      	subs	r4, r1, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfb8      	it	lt
 8009c56:	18e4      	addlt	r4, r4, r3
 8009c58:	f000 fefc 	bl	800aa54 <__malloc_lock>
 8009c5c:	4a1f      	ldr	r2, [pc, #124]	; (8009cdc <_free_r+0x98>)
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	4610      	mov	r0, r2
 8009c62:	b933      	cbnz	r3, 8009c72 <_free_r+0x2e>
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6014      	str	r4, [r2, #0]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c6e:	f000 bef2 	b.w	800aa56 <__malloc_unlock>
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	d90c      	bls.n	8009c90 <_free_r+0x4c>
 8009c76:	6821      	ldr	r1, [r4, #0]
 8009c78:	1862      	adds	r2, r4, r1
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf04      	itt	eq
 8009c7e:	681a      	ldreq	r2, [r3, #0]
 8009c80:	685b      	ldreq	r3, [r3, #4]
 8009c82:	6063      	str	r3, [r4, #4]
 8009c84:	bf04      	itt	eq
 8009c86:	1852      	addeq	r2, r2, r1
 8009c88:	6022      	streq	r2, [r4, #0]
 8009c8a:	6004      	str	r4, [r0, #0]
 8009c8c:	e7ec      	b.n	8009c68 <_free_r+0x24>
 8009c8e:	4613      	mov	r3, r2
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	b10a      	cbz	r2, 8009c98 <_free_r+0x54>
 8009c94:	42a2      	cmp	r2, r4
 8009c96:	d9fa      	bls.n	8009c8e <_free_r+0x4a>
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	1858      	adds	r0, r3, r1
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d10b      	bne.n	8009cb8 <_free_r+0x74>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	4401      	add	r1, r0
 8009ca4:	1858      	adds	r0, r3, r1
 8009ca6:	4282      	cmp	r2, r0
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	d1dd      	bne.n	8009c68 <_free_r+0x24>
 8009cac:	6810      	ldr	r0, [r2, #0]
 8009cae:	6852      	ldr	r2, [r2, #4]
 8009cb0:	605a      	str	r2, [r3, #4]
 8009cb2:	4401      	add	r1, r0
 8009cb4:	6019      	str	r1, [r3, #0]
 8009cb6:	e7d7      	b.n	8009c68 <_free_r+0x24>
 8009cb8:	d902      	bls.n	8009cc0 <_free_r+0x7c>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	e7d3      	b.n	8009c68 <_free_r+0x24>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	1821      	adds	r1, r4, r0
 8009cc4:	428a      	cmp	r2, r1
 8009cc6:	bf04      	itt	eq
 8009cc8:	6811      	ldreq	r1, [r2, #0]
 8009cca:	6852      	ldreq	r2, [r2, #4]
 8009ccc:	6062      	str	r2, [r4, #4]
 8009cce:	bf04      	itt	eq
 8009cd0:	1809      	addeq	r1, r1, r0
 8009cd2:	6021      	streq	r1, [r4, #0]
 8009cd4:	605c      	str	r4, [r3, #4]
 8009cd6:	e7c7      	b.n	8009c68 <_free_r+0x24>
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000670 	.word	0x20000670

08009ce0 <_malloc_r>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	1ccd      	adds	r5, r1, #3
 8009ce4:	f025 0503 	bic.w	r5, r5, #3
 8009ce8:	3508      	adds	r5, #8
 8009cea:	2d0c      	cmp	r5, #12
 8009cec:	bf38      	it	cc
 8009cee:	250c      	movcc	r5, #12
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	db01      	blt.n	8009cfa <_malloc_r+0x1a>
 8009cf6:	42a9      	cmp	r1, r5
 8009cf8:	d903      	bls.n	8009d02 <_malloc_r+0x22>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	2000      	movs	r0, #0
 8009d00:	bd70      	pop	{r4, r5, r6, pc}
 8009d02:	f000 fea7 	bl	800aa54 <__malloc_lock>
 8009d06:	4a23      	ldr	r2, [pc, #140]	; (8009d94 <_malloc_r+0xb4>)
 8009d08:	6814      	ldr	r4, [r2, #0]
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	b991      	cbnz	r1, 8009d34 <_malloc_r+0x54>
 8009d0e:	4c22      	ldr	r4, [pc, #136]	; (8009d98 <_malloc_r+0xb8>)
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	b91b      	cbnz	r3, 8009d1c <_malloc_r+0x3c>
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 fc39 	bl	800a58c <_sbrk_r>
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 fc34 	bl	800a58c <_sbrk_r>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d126      	bne.n	8009d76 <_malloc_r+0x96>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 fe92 	bl	800aa56 <__malloc_unlock>
 8009d32:	e7e4      	b.n	8009cfe <_malloc_r+0x1e>
 8009d34:	680b      	ldr	r3, [r1, #0]
 8009d36:	1b5b      	subs	r3, r3, r5
 8009d38:	d41a      	bmi.n	8009d70 <_malloc_r+0x90>
 8009d3a:	2b0b      	cmp	r3, #11
 8009d3c:	d90f      	bls.n	8009d5e <_malloc_r+0x7e>
 8009d3e:	600b      	str	r3, [r1, #0]
 8009d40:	50cd      	str	r5, [r1, r3]
 8009d42:	18cc      	adds	r4, r1, r3
 8009d44:	4630      	mov	r0, r6
 8009d46:	f000 fe86 	bl	800aa56 <__malloc_unlock>
 8009d4a:	f104 000b 	add.w	r0, r4, #11
 8009d4e:	1d23      	adds	r3, r4, #4
 8009d50:	f020 0007 	bic.w	r0, r0, #7
 8009d54:	1ac3      	subs	r3, r0, r3
 8009d56:	d01b      	beq.n	8009d90 <_malloc_r+0xb0>
 8009d58:	425a      	negs	r2, r3
 8009d5a:	50e2      	str	r2, [r4, r3]
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	428c      	cmp	r4, r1
 8009d60:	bf0d      	iteet	eq
 8009d62:	6863      	ldreq	r3, [r4, #4]
 8009d64:	684b      	ldrne	r3, [r1, #4]
 8009d66:	6063      	strne	r3, [r4, #4]
 8009d68:	6013      	streq	r3, [r2, #0]
 8009d6a:	bf18      	it	ne
 8009d6c:	460c      	movne	r4, r1
 8009d6e:	e7e9      	b.n	8009d44 <_malloc_r+0x64>
 8009d70:	460c      	mov	r4, r1
 8009d72:	6849      	ldr	r1, [r1, #4]
 8009d74:	e7ca      	b.n	8009d0c <_malloc_r+0x2c>
 8009d76:	1cc4      	adds	r4, r0, #3
 8009d78:	f024 0403 	bic.w	r4, r4, #3
 8009d7c:	42a0      	cmp	r0, r4
 8009d7e:	d005      	beq.n	8009d8c <_malloc_r+0xac>
 8009d80:	1a21      	subs	r1, r4, r0
 8009d82:	4630      	mov	r0, r6
 8009d84:	f000 fc02 	bl	800a58c <_sbrk_r>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d0cd      	beq.n	8009d28 <_malloc_r+0x48>
 8009d8c:	6025      	str	r5, [r4, #0]
 8009d8e:	e7d9      	b.n	8009d44 <_malloc_r+0x64>
 8009d90:	bd70      	pop	{r4, r5, r6, pc}
 8009d92:	bf00      	nop
 8009d94:	20000670 	.word	0x20000670
 8009d98:	20000674 	.word	0x20000674

08009d9c <__sfputc_r>:
 8009d9c:	6893      	ldr	r3, [r2, #8]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	b410      	push	{r4}
 8009da4:	6093      	str	r3, [r2, #8]
 8009da6:	da09      	bge.n	8009dbc <__sfputc_r+0x20>
 8009da8:	6994      	ldr	r4, [r2, #24]
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	db02      	blt.n	8009db4 <__sfputc_r+0x18>
 8009dae:	b2cb      	uxtb	r3, r1
 8009db0:	2b0a      	cmp	r3, #10
 8009db2:	d103      	bne.n	8009dbc <__sfputc_r+0x20>
 8009db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db8:	f000 bc3c 	b.w	800a634 <__swbuf_r>
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	1c58      	adds	r0, r3, #1
 8009dc0:	6010      	str	r0, [r2, #0]
 8009dc2:	7019      	strb	r1, [r3, #0]
 8009dc4:	b2c8      	uxtb	r0, r1
 8009dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <__sfputs_r>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	4614      	mov	r4, r2
 8009dd4:	18d5      	adds	r5, r2, r3
 8009dd6:	42ac      	cmp	r4, r5
 8009dd8:	d101      	bne.n	8009dde <__sfputs_r+0x12>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e007      	b.n	8009dee <__sfputs_r+0x22>
 8009dde:	463a      	mov	r2, r7
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	4630      	mov	r0, r6
 8009de6:	f7ff ffd9 	bl	8009d9c <__sfputc_r>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d1f3      	bne.n	8009dd6 <__sfputs_r+0xa>
 8009dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009df0 <_vfiprintf_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	b09d      	sub	sp, #116	; 0x74
 8009df6:	460c      	mov	r4, r1
 8009df8:	4617      	mov	r7, r2
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	b118      	cbz	r0, 8009e08 <_vfiprintf_r+0x18>
 8009e00:	6983      	ldr	r3, [r0, #24]
 8009e02:	b90b      	cbnz	r3, 8009e08 <_vfiprintf_r+0x18>
 8009e04:	f7ff fc92 	bl	800972c <__sinit>
 8009e08:	4b7c      	ldr	r3, [pc, #496]	; (8009ffc <_vfiprintf_r+0x20c>)
 8009e0a:	429c      	cmp	r4, r3
 8009e0c:	d157      	bne.n	8009ebe <_vfiprintf_r+0xce>
 8009e0e:	6874      	ldr	r4, [r6, #4]
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	0718      	lsls	r0, r3, #28
 8009e14:	d55d      	bpl.n	8009ed2 <_vfiprintf_r+0xe2>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d05a      	beq.n	8009ed2 <_vfiprintf_r+0xe2>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	2320      	movs	r3, #32
 8009e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e26:	2330      	movs	r3, #48	; 0x30
 8009e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2c:	f04f 0b01 	mov.w	fp, #1
 8009e30:	46b8      	mov	r8, r7
 8009e32:	4645      	mov	r5, r8
 8009e34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d155      	bne.n	8009ee8 <_vfiprintf_r+0xf8>
 8009e3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009e40:	d00b      	beq.n	8009e5a <_vfiprintf_r+0x6a>
 8009e42:	4653      	mov	r3, sl
 8009e44:	463a      	mov	r2, r7
 8009e46:	4621      	mov	r1, r4
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff ffbf 	bl	8009dcc <__sfputs_r>
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f000 80c4 	beq.w	8009fdc <_vfiprintf_r+0x1ec>
 8009e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e56:	4453      	add	r3, sl
 8009e58:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5a:	f898 3000 	ldrb.w	r3, [r8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80bc 	beq.w	8009fdc <_vfiprintf_r+0x1ec>
 8009e64:	2300      	movs	r3, #0
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	9205      	str	r2, [sp, #20]
 8009e70:	9306      	str	r3, [sp, #24]
 8009e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e76:	931a      	str	r3, [sp, #104]	; 0x68
 8009e78:	2205      	movs	r2, #5
 8009e7a:	7829      	ldrb	r1, [r5, #0]
 8009e7c:	4860      	ldr	r0, [pc, #384]	; (800a000 <_vfiprintf_r+0x210>)
 8009e7e:	f7f6 f9a7 	bl	80001d0 <memchr>
 8009e82:	f105 0801 	add.w	r8, r5, #1
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d131      	bne.n	8009ef0 <_vfiprintf_r+0x100>
 8009e8c:	06d9      	lsls	r1, r3, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2220      	movmi	r2, #32
 8009e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e96:	071a      	lsls	r2, r3, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	222b      	movmi	r2, #43	; 0x2b
 8009e9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ea0:	782a      	ldrb	r2, [r5, #0]
 8009ea2:	2a2a      	cmp	r2, #42	; 0x2a
 8009ea4:	d02c      	beq.n	8009f00 <_vfiprintf_r+0x110>
 8009ea6:	9a07      	ldr	r2, [sp, #28]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	200a      	movs	r0, #10
 8009eac:	46a8      	mov	r8, r5
 8009eae:	3501      	adds	r5, #1
 8009eb0:	f898 3000 	ldrb.w	r3, [r8]
 8009eb4:	3b30      	subs	r3, #48	; 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d96d      	bls.n	8009f96 <_vfiprintf_r+0x1a6>
 8009eba:	b371      	cbz	r1, 8009f1a <_vfiprintf_r+0x12a>
 8009ebc:	e026      	b.n	8009f0c <_vfiprintf_r+0x11c>
 8009ebe:	4b51      	ldr	r3, [pc, #324]	; (800a004 <_vfiprintf_r+0x214>)
 8009ec0:	429c      	cmp	r4, r3
 8009ec2:	d101      	bne.n	8009ec8 <_vfiprintf_r+0xd8>
 8009ec4:	68b4      	ldr	r4, [r6, #8]
 8009ec6:	e7a3      	b.n	8009e10 <_vfiprintf_r+0x20>
 8009ec8:	4b4f      	ldr	r3, [pc, #316]	; (800a008 <_vfiprintf_r+0x218>)
 8009eca:	429c      	cmp	r4, r3
 8009ecc:	bf08      	it	eq
 8009ece:	68f4      	ldreq	r4, [r6, #12]
 8009ed0:	e79e      	b.n	8009e10 <_vfiprintf_r+0x20>
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 fc11 	bl	800a6fc <__swsetup_r>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d09e      	beq.n	8009e1c <_vfiprintf_r+0x2c>
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	b01d      	add	sp, #116	; 0x74
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	2b25      	cmp	r3, #37	; 0x25
 8009eea:	d0a7      	beq.n	8009e3c <_vfiprintf_r+0x4c>
 8009eec:	46a8      	mov	r8, r5
 8009eee:	e7a0      	b.n	8009e32 <_vfiprintf_r+0x42>
 8009ef0:	4a43      	ldr	r2, [pc, #268]	; (800a000 <_vfiprintf_r+0x210>)
 8009ef2:	1a80      	subs	r0, r0, r2
 8009ef4:	fa0b f000 	lsl.w	r0, fp, r0
 8009ef8:	4318      	orrs	r0, r3
 8009efa:	9004      	str	r0, [sp, #16]
 8009efc:	4645      	mov	r5, r8
 8009efe:	e7bb      	b.n	8009e78 <_vfiprintf_r+0x88>
 8009f00:	9a03      	ldr	r2, [sp, #12]
 8009f02:	1d11      	adds	r1, r2, #4
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	9103      	str	r1, [sp, #12]
 8009f08:	2a00      	cmp	r2, #0
 8009f0a:	db01      	blt.n	8009f10 <_vfiprintf_r+0x120>
 8009f0c:	9207      	str	r2, [sp, #28]
 8009f0e:	e004      	b.n	8009f1a <_vfiprintf_r+0x12a>
 8009f10:	4252      	negs	r2, r2
 8009f12:	f043 0302 	orr.w	r3, r3, #2
 8009f16:	9207      	str	r2, [sp, #28]
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	f898 3000 	ldrb.w	r3, [r8]
 8009f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f20:	d110      	bne.n	8009f44 <_vfiprintf_r+0x154>
 8009f22:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009f26:	2b2a      	cmp	r3, #42	; 0x2a
 8009f28:	f108 0101 	add.w	r1, r8, #1
 8009f2c:	d137      	bne.n	8009f9e <_vfiprintf_r+0x1ae>
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	1d1a      	adds	r2, r3, #4
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	9203      	str	r2, [sp, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	bfb8      	it	lt
 8009f3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f3e:	f108 0802 	add.w	r8, r8, #2
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	4d31      	ldr	r5, [pc, #196]	; (800a00c <_vfiprintf_r+0x21c>)
 8009f46:	f898 1000 	ldrb.w	r1, [r8]
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7f6 f93f 	bl	80001d0 <memchr>
 8009f52:	b140      	cbz	r0, 8009f66 <_vfiprintf_r+0x176>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	1b40      	subs	r0, r0, r5
 8009f58:	fa03 f000 	lsl.w	r0, r3, r0
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	4303      	orrs	r3, r0
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	f108 0801 	add.w	r8, r8, #1
 8009f66:	f898 1000 	ldrb.w	r1, [r8]
 8009f6a:	4829      	ldr	r0, [pc, #164]	; (800a010 <_vfiprintf_r+0x220>)
 8009f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f70:	2206      	movs	r2, #6
 8009f72:	f108 0701 	add.w	r7, r8, #1
 8009f76:	f7f6 f92b 	bl	80001d0 <memchr>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d034      	beq.n	8009fe8 <_vfiprintf_r+0x1f8>
 8009f7e:	4b25      	ldr	r3, [pc, #148]	; (800a014 <_vfiprintf_r+0x224>)
 8009f80:	bb03      	cbnz	r3, 8009fc4 <_vfiprintf_r+0x1d4>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	3307      	adds	r3, #7
 8009f86:	f023 0307 	bic.w	r3, r3, #7
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	9303      	str	r3, [sp, #12]
 8009f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f90:	444b      	add	r3, r9
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	e74c      	b.n	8009e30 <_vfiprintf_r+0x40>
 8009f96:	fb00 3202 	mla	r2, r0, r2, r3
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	e786      	b.n	8009eac <_vfiprintf_r+0xbc>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9305      	str	r3, [sp, #20]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	250a      	movs	r5, #10
 8009fa6:	4688      	mov	r8, r1
 8009fa8:	3101      	adds	r1, #1
 8009faa:	f898 2000 	ldrb.w	r2, [r8]
 8009fae:	3a30      	subs	r2, #48	; 0x30
 8009fb0:	2a09      	cmp	r2, #9
 8009fb2:	d903      	bls.n	8009fbc <_vfiprintf_r+0x1cc>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0c5      	beq.n	8009f44 <_vfiprintf_r+0x154>
 8009fb8:	9005      	str	r0, [sp, #20]
 8009fba:	e7c3      	b.n	8009f44 <_vfiprintf_r+0x154>
 8009fbc:	fb05 2000 	mla	r0, r5, r0, r2
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e7f0      	b.n	8009fa6 <_vfiprintf_r+0x1b6>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4b13      	ldr	r3, [pc, #76]	; (800a018 <_vfiprintf_r+0x228>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f3af 8000 	nop.w
 8009fd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fd8:	4681      	mov	r9, r0
 8009fda:	d1d8      	bne.n	8009f8e <_vfiprintf_r+0x19e>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	065b      	lsls	r3, r3, #25
 8009fe0:	f53f af7d 	bmi.w	8009ede <_vfiprintf_r+0xee>
 8009fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe6:	e77c      	b.n	8009ee2 <_vfiprintf_r+0xf2>
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4622      	mov	r2, r4
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <_vfiprintf_r+0x228>)
 8009ff0:	a904      	add	r1, sp, #16
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f888 	bl	800a108 <_printf_i>
 8009ff8:	e7ec      	b.n	8009fd4 <_vfiprintf_r+0x1e4>
 8009ffa:	bf00      	nop
 8009ffc:	0800ac50 	.word	0x0800ac50
 800a000:	0800ac94 	.word	0x0800ac94
 800a004:	0800ac70 	.word	0x0800ac70
 800a008:	0800ac30 	.word	0x0800ac30
 800a00c:	0800ac9a 	.word	0x0800ac9a
 800a010:	0800ac9e 	.word	0x0800ac9e
 800a014:	00000000 	.word	0x00000000
 800a018:	08009dcd 	.word	0x08009dcd

0800a01c <_printf_common>:
 800a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	4691      	mov	r9, r2
 800a022:	461f      	mov	r7, r3
 800a024:	688a      	ldr	r2, [r1, #8]
 800a026:	690b      	ldr	r3, [r1, #16]
 800a028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	bfb8      	it	lt
 800a030:	4613      	movlt	r3, r2
 800a032:	f8c9 3000 	str.w	r3, [r9]
 800a036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a03a:	4606      	mov	r6, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	b112      	cbz	r2, 800a046 <_printf_common+0x2a>
 800a040:	3301      	adds	r3, #1
 800a042:	f8c9 3000 	str.w	r3, [r9]
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	0699      	lsls	r1, r3, #26
 800a04a:	bf42      	ittt	mi
 800a04c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a050:	3302      	addmi	r3, #2
 800a052:	f8c9 3000 	strmi.w	r3, [r9]
 800a056:	6825      	ldr	r5, [r4, #0]
 800a058:	f015 0506 	ands.w	r5, r5, #6
 800a05c:	d107      	bne.n	800a06e <_printf_common+0x52>
 800a05e:	f104 0a19 	add.w	sl, r4, #25
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	f8d9 2000 	ldr.w	r2, [r9]
 800a068:	1a9b      	subs	r3, r3, r2
 800a06a:	429d      	cmp	r5, r3
 800a06c:	db29      	blt.n	800a0c2 <_printf_common+0xa6>
 800a06e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	3300      	adds	r3, #0
 800a076:	bf18      	it	ne
 800a078:	2301      	movne	r3, #1
 800a07a:	0692      	lsls	r2, r2, #26
 800a07c:	d42e      	bmi.n	800a0dc <_printf_common+0xc0>
 800a07e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a082:	4639      	mov	r1, r7
 800a084:	4630      	mov	r0, r6
 800a086:	47c0      	blx	r8
 800a088:	3001      	adds	r0, #1
 800a08a:	d021      	beq.n	800a0d0 <_printf_common+0xb4>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	68e5      	ldr	r5, [r4, #12]
 800a090:	f8d9 2000 	ldr.w	r2, [r9]
 800a094:	f003 0306 	and.w	r3, r3, #6
 800a098:	2b04      	cmp	r3, #4
 800a09a:	bf08      	it	eq
 800a09c:	1aad      	subeq	r5, r5, r2
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	bf0c      	ite	eq
 800a0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a8:	2500      	movne	r5, #0
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	bfc4      	itt	gt
 800a0ae:	1a9b      	subgt	r3, r3, r2
 800a0b0:	18ed      	addgt	r5, r5, r3
 800a0b2:	f04f 0900 	mov.w	r9, #0
 800a0b6:	341a      	adds	r4, #26
 800a0b8:	454d      	cmp	r5, r9
 800a0ba:	d11b      	bne.n	800a0f4 <_printf_common+0xd8>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4652      	mov	r2, sl
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	47c0      	blx	r8
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d103      	bne.n	800a0d8 <_printf_common+0xbc>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d8:	3501      	adds	r5, #1
 800a0da:	e7c2      	b.n	800a062 <_printf_common+0x46>
 800a0dc:	18e1      	adds	r1, r4, r3
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	2030      	movs	r0, #48	; 0x30
 800a0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0e6:	4422      	add	r2, r4
 800a0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	e7c4      	b.n	800a07e <_printf_common+0x62>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	47c0      	blx	r8
 800a0fe:	3001      	adds	r0, #1
 800a100:	d0e6      	beq.n	800a0d0 <_printf_common+0xb4>
 800a102:	f109 0901 	add.w	r9, r9, #1
 800a106:	e7d7      	b.n	800a0b8 <_printf_common+0x9c>

0800a108 <_printf_i>:
 800a108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4617      	mov	r7, r2
 800a10e:	7e0a      	ldrb	r2, [r1, #24]
 800a110:	b085      	sub	sp, #20
 800a112:	2a6e      	cmp	r2, #110	; 0x6e
 800a114:	4698      	mov	r8, r3
 800a116:	4606      	mov	r6, r0
 800a118:	460c      	mov	r4, r1
 800a11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a11c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a120:	f000 80bc 	beq.w	800a29c <_printf_i+0x194>
 800a124:	d81a      	bhi.n	800a15c <_printf_i+0x54>
 800a126:	2a63      	cmp	r2, #99	; 0x63
 800a128:	d02e      	beq.n	800a188 <_printf_i+0x80>
 800a12a:	d80a      	bhi.n	800a142 <_printf_i+0x3a>
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	f000 80c8 	beq.w	800a2c2 <_printf_i+0x1ba>
 800a132:	2a58      	cmp	r2, #88	; 0x58
 800a134:	f000 808a 	beq.w	800a24c <_printf_i+0x144>
 800a138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a13c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a140:	e02a      	b.n	800a198 <_printf_i+0x90>
 800a142:	2a64      	cmp	r2, #100	; 0x64
 800a144:	d001      	beq.n	800a14a <_printf_i+0x42>
 800a146:	2a69      	cmp	r2, #105	; 0x69
 800a148:	d1f6      	bne.n	800a138 <_printf_i+0x30>
 800a14a:	6821      	ldr	r1, [r4, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a152:	d023      	beq.n	800a19c <_printf_i+0x94>
 800a154:	1d11      	adds	r1, r2, #4
 800a156:	6019      	str	r1, [r3, #0]
 800a158:	6813      	ldr	r3, [r2, #0]
 800a15a:	e027      	b.n	800a1ac <_printf_i+0xa4>
 800a15c:	2a73      	cmp	r2, #115	; 0x73
 800a15e:	f000 80b4 	beq.w	800a2ca <_printf_i+0x1c2>
 800a162:	d808      	bhi.n	800a176 <_printf_i+0x6e>
 800a164:	2a6f      	cmp	r2, #111	; 0x6f
 800a166:	d02a      	beq.n	800a1be <_printf_i+0xb6>
 800a168:	2a70      	cmp	r2, #112	; 0x70
 800a16a:	d1e5      	bne.n	800a138 <_printf_i+0x30>
 800a16c:	680a      	ldr	r2, [r1, #0]
 800a16e:	f042 0220 	orr.w	r2, r2, #32
 800a172:	600a      	str	r2, [r1, #0]
 800a174:	e003      	b.n	800a17e <_printf_i+0x76>
 800a176:	2a75      	cmp	r2, #117	; 0x75
 800a178:	d021      	beq.n	800a1be <_printf_i+0xb6>
 800a17a:	2a78      	cmp	r2, #120	; 0x78
 800a17c:	d1dc      	bne.n	800a138 <_printf_i+0x30>
 800a17e:	2278      	movs	r2, #120	; 0x78
 800a180:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a184:	496e      	ldr	r1, [pc, #440]	; (800a340 <_printf_i+0x238>)
 800a186:	e064      	b.n	800a252 <_printf_i+0x14a>
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a18e:	1d11      	adds	r1, r2, #4
 800a190:	6019      	str	r1, [r3, #0]
 800a192:	6813      	ldr	r3, [r2, #0]
 800a194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a198:	2301      	movs	r3, #1
 800a19a:	e0a3      	b.n	800a2e4 <_printf_i+0x1dc>
 800a19c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a1a0:	f102 0104 	add.w	r1, r2, #4
 800a1a4:	6019      	str	r1, [r3, #0]
 800a1a6:	d0d7      	beq.n	800a158 <_printf_i+0x50>
 800a1a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	da03      	bge.n	800a1b8 <_printf_i+0xb0>
 800a1b0:	222d      	movs	r2, #45	; 0x2d
 800a1b2:	425b      	negs	r3, r3
 800a1b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a1b8:	4962      	ldr	r1, [pc, #392]	; (800a344 <_printf_i+0x23c>)
 800a1ba:	220a      	movs	r2, #10
 800a1bc:	e017      	b.n	800a1ee <_printf_i+0xe6>
 800a1be:	6820      	ldr	r0, [r4, #0]
 800a1c0:	6819      	ldr	r1, [r3, #0]
 800a1c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a1c6:	d003      	beq.n	800a1d0 <_printf_i+0xc8>
 800a1c8:	1d08      	adds	r0, r1, #4
 800a1ca:	6018      	str	r0, [r3, #0]
 800a1cc:	680b      	ldr	r3, [r1, #0]
 800a1ce:	e006      	b.n	800a1de <_printf_i+0xd6>
 800a1d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d4:	f101 0004 	add.w	r0, r1, #4
 800a1d8:	6018      	str	r0, [r3, #0]
 800a1da:	d0f7      	beq.n	800a1cc <_printf_i+0xc4>
 800a1dc:	880b      	ldrh	r3, [r1, #0]
 800a1de:	4959      	ldr	r1, [pc, #356]	; (800a344 <_printf_i+0x23c>)
 800a1e0:	2a6f      	cmp	r2, #111	; 0x6f
 800a1e2:	bf14      	ite	ne
 800a1e4:	220a      	movne	r2, #10
 800a1e6:	2208      	moveq	r2, #8
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a1ee:	6865      	ldr	r5, [r4, #4]
 800a1f0:	60a5      	str	r5, [r4, #8]
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	f2c0 809c 	blt.w	800a330 <_printf_i+0x228>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	f020 0004 	bic.w	r0, r0, #4
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d13f      	bne.n	800a284 <_printf_i+0x17c>
 800a204:	2d00      	cmp	r5, #0
 800a206:	f040 8095 	bne.w	800a334 <_printf_i+0x22c>
 800a20a:	4675      	mov	r5, lr
 800a20c:	2a08      	cmp	r2, #8
 800a20e:	d10b      	bne.n	800a228 <_printf_i+0x120>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	07da      	lsls	r2, r3, #31
 800a214:	d508      	bpl.n	800a228 <_printf_i+0x120>
 800a216:	6923      	ldr	r3, [r4, #16]
 800a218:	6862      	ldr	r2, [r4, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	bfde      	ittt	le
 800a21e:	2330      	movle	r3, #48	; 0x30
 800a220:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a224:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a228:	ebae 0305 	sub.w	r3, lr, r5
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	f8cd 8000 	str.w	r8, [sp]
 800a232:	463b      	mov	r3, r7
 800a234:	aa03      	add	r2, sp, #12
 800a236:	4621      	mov	r1, r4
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff feef 	bl	800a01c <_printf_common>
 800a23e:	3001      	adds	r0, #1
 800a240:	d155      	bne.n	800a2ee <_printf_i+0x1e6>
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	b005      	add	sp, #20
 800a248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a24c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a250:	493c      	ldr	r1, [pc, #240]	; (800a344 <_printf_i+0x23c>)
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a25a:	f100 0504 	add.w	r5, r0, #4
 800a25e:	601d      	str	r5, [r3, #0]
 800a260:	d001      	beq.n	800a266 <_printf_i+0x15e>
 800a262:	6803      	ldr	r3, [r0, #0]
 800a264:	e002      	b.n	800a26c <_printf_i+0x164>
 800a266:	0655      	lsls	r5, r2, #25
 800a268:	d5fb      	bpl.n	800a262 <_printf_i+0x15a>
 800a26a:	8803      	ldrh	r3, [r0, #0]
 800a26c:	07d0      	lsls	r0, r2, #31
 800a26e:	bf44      	itt	mi
 800a270:	f042 0220 	orrmi.w	r2, r2, #32
 800a274:	6022      	strmi	r2, [r4, #0]
 800a276:	b91b      	cbnz	r3, 800a280 <_printf_i+0x178>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	f022 0220 	bic.w	r2, r2, #32
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	2210      	movs	r2, #16
 800a282:	e7b1      	b.n	800a1e8 <_printf_i+0xe0>
 800a284:	4675      	mov	r5, lr
 800a286:	fbb3 f0f2 	udiv	r0, r3, r2
 800a28a:	fb02 3310 	mls	r3, r2, r0, r3
 800a28e:	5ccb      	ldrb	r3, [r1, r3]
 800a290:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a294:	4603      	mov	r3, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	d1f5      	bne.n	800a286 <_printf_i+0x17e>
 800a29a:	e7b7      	b.n	800a20c <_printf_i+0x104>
 800a29c:	6808      	ldr	r0, [r1, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	6949      	ldr	r1, [r1, #20]
 800a2a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a2a6:	d004      	beq.n	800a2b2 <_printf_i+0x1aa>
 800a2a8:	1d10      	adds	r0, r2, #4
 800a2aa:	6018      	str	r0, [r3, #0]
 800a2ac:	6813      	ldr	r3, [r2, #0]
 800a2ae:	6019      	str	r1, [r3, #0]
 800a2b0:	e007      	b.n	800a2c2 <_printf_i+0x1ba>
 800a2b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2b6:	f102 0004 	add.w	r0, r2, #4
 800a2ba:	6018      	str	r0, [r3, #0]
 800a2bc:	6813      	ldr	r3, [r2, #0]
 800a2be:	d0f6      	beq.n	800a2ae <_printf_i+0x1a6>
 800a2c0:	8019      	strh	r1, [r3, #0]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	4675      	mov	r5, lr
 800a2c8:	e7b1      	b.n	800a22e <_printf_i+0x126>
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	1d11      	adds	r1, r2, #4
 800a2ce:	6019      	str	r1, [r3, #0]
 800a2d0:	6815      	ldr	r5, [r2, #0]
 800a2d2:	6862      	ldr	r2, [r4, #4]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7f5 ff7a 	bl	80001d0 <memchr>
 800a2dc:	b108      	cbz	r0, 800a2e2 <_printf_i+0x1da>
 800a2de:	1b40      	subs	r0, r0, r5
 800a2e0:	6060      	str	r0, [r4, #4]
 800a2e2:	6863      	ldr	r3, [r4, #4]
 800a2e4:	6123      	str	r3, [r4, #16]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ec:	e79f      	b.n	800a22e <_printf_i+0x126>
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	47c0      	blx	r8
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d0a2      	beq.n	800a242 <_printf_i+0x13a>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	079b      	lsls	r3, r3, #30
 800a300:	d507      	bpl.n	800a312 <_printf_i+0x20a>
 800a302:	2500      	movs	r5, #0
 800a304:	f104 0919 	add.w	r9, r4, #25
 800a308:	68e3      	ldr	r3, [r4, #12]
 800a30a:	9a03      	ldr	r2, [sp, #12]
 800a30c:	1a9b      	subs	r3, r3, r2
 800a30e:	429d      	cmp	r5, r3
 800a310:	db05      	blt.n	800a31e <_printf_i+0x216>
 800a312:	68e0      	ldr	r0, [r4, #12]
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	4298      	cmp	r0, r3
 800a318:	bfb8      	it	lt
 800a31a:	4618      	movlt	r0, r3
 800a31c:	e793      	b.n	800a246 <_printf_i+0x13e>
 800a31e:	2301      	movs	r3, #1
 800a320:	464a      	mov	r2, r9
 800a322:	4639      	mov	r1, r7
 800a324:	4630      	mov	r0, r6
 800a326:	47c0      	blx	r8
 800a328:	3001      	adds	r0, #1
 800a32a:	d08a      	beq.n	800a242 <_printf_i+0x13a>
 800a32c:	3501      	adds	r5, #1
 800a32e:	e7eb      	b.n	800a308 <_printf_i+0x200>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1a7      	bne.n	800a284 <_printf_i+0x17c>
 800a334:	780b      	ldrb	r3, [r1, #0]
 800a336:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a33a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a33e:	e765      	b.n	800a20c <_printf_i+0x104>
 800a340:	0800acb6 	.word	0x0800acb6
 800a344:	0800aca5 	.word	0x0800aca5

0800a348 <_open_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4c07      	ldr	r4, [pc, #28]	; (800a368 <_open_r+0x20>)
 800a34c:	4605      	mov	r5, r0
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	2200      	movs	r2, #0
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	f7fe fb4a 	bl	80089f0 <_open>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_open_r+0x1e>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	b103      	cbz	r3, 800a366 <_open_r+0x1e>
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20000f90 	.word	0x20000f90

0800a36c <iprintf>:
 800a36c:	b40f      	push	{r0, r1, r2, r3}
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <iprintf+0x2c>)
 800a370:	b513      	push	{r0, r1, r4, lr}
 800a372:	681c      	ldr	r4, [r3, #0]
 800a374:	b124      	cbz	r4, 800a380 <iprintf+0x14>
 800a376:	69a3      	ldr	r3, [r4, #24]
 800a378:	b913      	cbnz	r3, 800a380 <iprintf+0x14>
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7ff f9d6 	bl	800972c <__sinit>
 800a380:	ab05      	add	r3, sp, #20
 800a382:	9a04      	ldr	r2, [sp, #16]
 800a384:	68a1      	ldr	r1, [r4, #8]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	4620      	mov	r0, r4
 800a38a:	f7ff fd31 	bl	8009df0 <_vfiprintf_r>
 800a38e:	b002      	add	sp, #8
 800a390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a394:	b004      	add	sp, #16
 800a396:	4770      	bx	lr
 800a398:	200000c8 	.word	0x200000c8

0800a39c <_puts_r>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	460e      	mov	r6, r1
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	b118      	cbz	r0, 800a3ac <_puts_r+0x10>
 800a3a4:	6983      	ldr	r3, [r0, #24]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <_puts_r+0x10>
 800a3a8:	f7ff f9c0 	bl	800972c <__sinit>
 800a3ac:	69ab      	ldr	r3, [r5, #24]
 800a3ae:	68ac      	ldr	r4, [r5, #8]
 800a3b0:	b913      	cbnz	r3, 800a3b8 <_puts_r+0x1c>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7ff f9ba 	bl	800972c <__sinit>
 800a3b8:	4b23      	ldr	r3, [pc, #140]	; (800a448 <_puts_r+0xac>)
 800a3ba:	429c      	cmp	r4, r3
 800a3bc:	d117      	bne.n	800a3ee <_puts_r+0x52>
 800a3be:	686c      	ldr	r4, [r5, #4]
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	071b      	lsls	r3, r3, #28
 800a3c4:	d51d      	bpl.n	800a402 <_puts_r+0x66>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	b1db      	cbz	r3, 800a402 <_puts_r+0x66>
 800a3ca:	3e01      	subs	r6, #1
 800a3cc:	68a3      	ldr	r3, [r4, #8]
 800a3ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	b9e9      	cbnz	r1, 800a414 <_puts_r+0x78>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da2e      	bge.n	800a43a <_puts_r+0x9e>
 800a3dc:	4622      	mov	r2, r4
 800a3de:	210a      	movs	r1, #10
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 f927 	bl	800a634 <__swbuf_r>
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d011      	beq.n	800a40e <_puts_r+0x72>
 800a3ea:	200a      	movs	r0, #10
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
 800a3ee:	4b17      	ldr	r3, [pc, #92]	; (800a44c <_puts_r+0xb0>)
 800a3f0:	429c      	cmp	r4, r3
 800a3f2:	d101      	bne.n	800a3f8 <_puts_r+0x5c>
 800a3f4:	68ac      	ldr	r4, [r5, #8]
 800a3f6:	e7e3      	b.n	800a3c0 <_puts_r+0x24>
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <_puts_r+0xb4>)
 800a3fa:	429c      	cmp	r4, r3
 800a3fc:	bf08      	it	eq
 800a3fe:	68ec      	ldreq	r4, [r5, #12]
 800a400:	e7de      	b.n	800a3c0 <_puts_r+0x24>
 800a402:	4621      	mov	r1, r4
 800a404:	4628      	mov	r0, r5
 800a406:	f000 f979 	bl	800a6fc <__swsetup_r>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d0dd      	beq.n	800a3ca <_puts_r+0x2e>
 800a40e:	f04f 30ff 	mov.w	r0, #4294967295
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	2b00      	cmp	r3, #0
 800a416:	da04      	bge.n	800a422 <_puts_r+0x86>
 800a418:	69a2      	ldr	r2, [r4, #24]
 800a41a:	4293      	cmp	r3, r2
 800a41c:	db06      	blt.n	800a42c <_puts_r+0x90>
 800a41e:	290a      	cmp	r1, #10
 800a420:	d004      	beq.n	800a42c <_puts_r+0x90>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	6022      	str	r2, [r4, #0]
 800a428:	7019      	strb	r1, [r3, #0]
 800a42a:	e7cf      	b.n	800a3cc <_puts_r+0x30>
 800a42c:	4622      	mov	r2, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f900 	bl	800a634 <__swbuf_r>
 800a434:	3001      	adds	r0, #1
 800a436:	d1c9      	bne.n	800a3cc <_puts_r+0x30>
 800a438:	e7e9      	b.n	800a40e <_puts_r+0x72>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	200a      	movs	r0, #10
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	6022      	str	r2, [r4, #0]
 800a442:	7018      	strb	r0, [r3, #0]
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	bf00      	nop
 800a448:	0800ac50 	.word	0x0800ac50
 800a44c:	0800ac70 	.word	0x0800ac70
 800a450:	0800ac30 	.word	0x0800ac30

0800a454 <puts>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <puts+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7ff bf9f 	b.w	800a39c <_puts_r>
 800a45e:	bf00      	nop
 800a460:	200000c8 	.word	0x200000c8

0800a464 <lflush>:
 800a464:	8983      	ldrh	r3, [r0, #12]
 800a466:	f003 0309 	and.w	r3, r3, #9
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d101      	bne.n	800a472 <lflush+0xe>
 800a46e:	f000 ba75 	b.w	800a95c <fflush>
 800a472:	2000      	movs	r0, #0
 800a474:	4770      	bx	lr
	...

0800a478 <__srefill_r>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	460c      	mov	r4, r1
 800a47c:	4605      	mov	r5, r0
 800a47e:	b118      	cbz	r0, 800a488 <__srefill_r+0x10>
 800a480:	6983      	ldr	r3, [r0, #24]
 800a482:	b90b      	cbnz	r3, 800a488 <__srefill_r+0x10>
 800a484:	f7ff f952 	bl	800972c <__sinit>
 800a488:	4b3b      	ldr	r3, [pc, #236]	; (800a578 <__srefill_r+0x100>)
 800a48a:	429c      	cmp	r4, r3
 800a48c:	d10a      	bne.n	800a4a4 <__srefill_r+0x2c>
 800a48e:	686c      	ldr	r4, [r5, #4]
 800a490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a494:	2300      	movs	r3, #0
 800a496:	6063      	str	r3, [r4, #4]
 800a498:	b293      	uxth	r3, r2
 800a49a:	069e      	lsls	r6, r3, #26
 800a49c:	d50c      	bpl.n	800a4b8 <__srefill_r+0x40>
 800a49e:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a4:	4b35      	ldr	r3, [pc, #212]	; (800a57c <__srefill_r+0x104>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d101      	bne.n	800a4ae <__srefill_r+0x36>
 800a4aa:	68ac      	ldr	r4, [r5, #8]
 800a4ac:	e7f0      	b.n	800a490 <__srefill_r+0x18>
 800a4ae:	4b34      	ldr	r3, [pc, #208]	; (800a580 <__srefill_r+0x108>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	bf08      	it	eq
 800a4b4:	68ec      	ldreq	r4, [r5, #12]
 800a4b6:	e7eb      	b.n	800a490 <__srefill_r+0x18>
 800a4b8:	0758      	lsls	r0, r3, #29
 800a4ba:	d448      	bmi.n	800a54e <__srefill_r+0xd6>
 800a4bc:	06d9      	lsls	r1, r3, #27
 800a4be:	d405      	bmi.n	800a4cc <__srefill_r+0x54>
 800a4c0:	2309      	movs	r3, #9
 800a4c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	81a2      	strh	r2, [r4, #12]
 800a4ca:	e7e8      	b.n	800a49e <__srefill_r+0x26>
 800a4cc:	071a      	lsls	r2, r3, #28
 800a4ce:	d50b      	bpl.n	800a4e8 <__srefill_r+0x70>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f000 fa18 	bl	800a908 <_fflush_r>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1e0      	bne.n	800a49e <__srefill_r+0x26>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	60a0      	str	r0, [r4, #8]
 800a4e0:	f023 0308 	bic.w	r3, r3, #8
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	61a0      	str	r0, [r4, #24]
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	f043 0304 	orr.w	r3, r3, #4
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b91b      	cbnz	r3, 800a4fc <__srefill_r+0x84>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7ff fb50 	bl	8009b9c <__smakebuf_r>
 800a4fc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a500:	b2be      	uxth	r6, r7
 800a502:	07b3      	lsls	r3, r6, #30
 800a504:	d00f      	beq.n	800a526 <__srefill_r+0xae>
 800a506:	2301      	movs	r3, #1
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <__srefill_r+0x10c>)
 800a50c:	491e      	ldr	r1, [pc, #120]	; (800a588 <__srefill_r+0x110>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	f006 0609 	and.w	r6, r6, #9
 800a514:	f7ff fa64 	bl	80099e0 <_fwalk>
 800a518:	2e09      	cmp	r6, #9
 800a51a:	81a7      	strh	r7, [r4, #12]
 800a51c:	d103      	bne.n	800a526 <__srefill_r+0xae>
 800a51e:	4621      	mov	r1, r4
 800a520:	4628      	mov	r0, r5
 800a522:	f000 f969 	bl	800a7f8 <__sflush_r>
 800a526:	6922      	ldr	r2, [r4, #16]
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a52c:	6963      	ldr	r3, [r4, #20]
 800a52e:	6a21      	ldr	r1, [r4, #32]
 800a530:	4628      	mov	r0, r5
 800a532:	47b0      	blx	r6
 800a534:	2800      	cmp	r0, #0
 800a536:	6060      	str	r0, [r4, #4]
 800a538:	dc1c      	bgt.n	800a574 <__srefill_r+0xfc>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	bf17      	itett	ne
 800a53e:	2200      	movne	r2, #0
 800a540:	f043 0320 	orreq.w	r3, r3, #32
 800a544:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a548:	6062      	strne	r2, [r4, #4]
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	e7a7      	b.n	800a49e <__srefill_r+0x26>
 800a54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a550:	2900      	cmp	r1, #0
 800a552:	d0cd      	beq.n	800a4f0 <__srefill_r+0x78>
 800a554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a558:	4299      	cmp	r1, r3
 800a55a:	d002      	beq.n	800a562 <__srefill_r+0xea>
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7ff fb71 	bl	8009c44 <_free_r>
 800a562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a564:	6063      	str	r3, [r4, #4]
 800a566:	2000      	movs	r0, #0
 800a568:	6360      	str	r0, [r4, #52]	; 0x34
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0c0      	beq.n	800a4f0 <__srefill_r+0x78>
 800a56e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a574:	2000      	movs	r0, #0
 800a576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a578:	0800ac50 	.word	0x0800ac50
 800a57c:	0800ac70 	.word	0x0800ac70
 800a580:	0800ac30 	.word	0x0800ac30
 800a584:	0800ac90 	.word	0x0800ac90
 800a588:	0800a465 	.word	0x0800a465

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4c06      	ldr	r4, [pc, #24]	; (800a5a8 <_sbrk_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4605      	mov	r5, r0
 800a594:	4608      	mov	r0, r1
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	f7fe f91a 	bl	80087d0 <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000f90 	.word	0x20000f90

0800a5ac <__sread>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	f000 fa50 	bl	800aa58 <_read_r>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	bfab      	itete	ge
 800a5bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5be:	89a3      	ldrhlt	r3, [r4, #12]
 800a5c0:	181b      	addge	r3, r3, r0
 800a5c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c6:	bfac      	ite	ge
 800a5c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5ca:	81a3      	strhlt	r3, [r4, #12]
 800a5cc:	bd10      	pop	{r4, pc}

0800a5ce <__swrite>:
 800a5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d2:	461f      	mov	r7, r3
 800a5d4:	898b      	ldrh	r3, [r1, #12]
 800a5d6:	05db      	lsls	r3, r3, #23
 800a5d8:	4605      	mov	r5, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	4616      	mov	r6, r2
 800a5de:	d505      	bpl.n	800a5ec <__swrite+0x1e>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e8:	f000 fa22 	bl	800aa30 <_lseek_r>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a602:	f000 b869 	b.w	800a6d8 <_write_r>

0800a606 <__sseek>:
 800a606:	b510      	push	{r4, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60e:	f000 fa0f 	bl	800aa30 <_lseek_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	bf15      	itete	ne
 800a618:	6560      	strne	r0, [r4, #84]	; 0x54
 800a61a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a622:	81a3      	strheq	r3, [r4, #12]
 800a624:	bf18      	it	ne
 800a626:	81a3      	strhne	r3, [r4, #12]
 800a628:	bd10      	pop	{r4, pc}

0800a62a <__sclose>:
 800a62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62e:	f000 b8d3 	b.w	800a7d8 <_close_r>
	...

0800a634 <__swbuf_r>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	460e      	mov	r6, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	4605      	mov	r5, r0
 800a63c:	b118      	cbz	r0, 800a646 <__swbuf_r+0x12>
 800a63e:	6983      	ldr	r3, [r0, #24]
 800a640:	b90b      	cbnz	r3, 800a646 <__swbuf_r+0x12>
 800a642:	f7ff f873 	bl	800972c <__sinit>
 800a646:	4b21      	ldr	r3, [pc, #132]	; (800a6cc <__swbuf_r+0x98>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	d12a      	bne.n	800a6a2 <__swbuf_r+0x6e>
 800a64c:	686c      	ldr	r4, [r5, #4]
 800a64e:	69a3      	ldr	r3, [r4, #24]
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	071a      	lsls	r2, r3, #28
 800a656:	d52e      	bpl.n	800a6b6 <__swbuf_r+0x82>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	b363      	cbz	r3, 800a6b6 <__swbuf_r+0x82>
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	1ac0      	subs	r0, r0, r3
 800a662:	6963      	ldr	r3, [r4, #20]
 800a664:	b2f6      	uxtb	r6, r6
 800a666:	4298      	cmp	r0, r3
 800a668:	4637      	mov	r7, r6
 800a66a:	db04      	blt.n	800a676 <__swbuf_r+0x42>
 800a66c:	4621      	mov	r1, r4
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 f94a 	bl	800a908 <_fflush_r>
 800a674:	bb28      	cbnz	r0, 800a6c2 <__swbuf_r+0x8e>
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	3b01      	subs	r3, #1
 800a67a:	60a3      	str	r3, [r4, #8]
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	701e      	strb	r6, [r3, #0]
 800a684:	6963      	ldr	r3, [r4, #20]
 800a686:	3001      	adds	r0, #1
 800a688:	4298      	cmp	r0, r3
 800a68a:	d004      	beq.n	800a696 <__swbuf_r+0x62>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	07db      	lsls	r3, r3, #31
 800a690:	d519      	bpl.n	800a6c6 <__swbuf_r+0x92>
 800a692:	2e0a      	cmp	r6, #10
 800a694:	d117      	bne.n	800a6c6 <__swbuf_r+0x92>
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 f935 	bl	800a908 <_fflush_r>
 800a69e:	b190      	cbz	r0, 800a6c6 <__swbuf_r+0x92>
 800a6a0:	e00f      	b.n	800a6c2 <__swbuf_r+0x8e>
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <__swbuf_r+0x9c>)
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	d101      	bne.n	800a6ac <__swbuf_r+0x78>
 800a6a8:	68ac      	ldr	r4, [r5, #8]
 800a6aa:	e7d0      	b.n	800a64e <__swbuf_r+0x1a>
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <__swbuf_r+0xa0>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	bf08      	it	eq
 800a6b2:	68ec      	ldreq	r4, [r5, #12]
 800a6b4:	e7cb      	b.n	800a64e <__swbuf_r+0x1a>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f000 f81f 	bl	800a6fc <__swsetup_r>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0cc      	beq.n	800a65c <__swbuf_r+0x28>
 800a6c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800ac50 	.word	0x0800ac50
 800a6d0:	0800ac70 	.word	0x0800ac70
 800a6d4:	0800ac30 	.word	0x0800ac30

0800a6d8 <_write_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4c07      	ldr	r4, [pc, #28]	; (800a6f8 <_write_r+0x20>)
 800a6dc:	4605      	mov	r5, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f7fe f82e 	bl	8008748 <_write>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d102      	bne.n	800a6f6 <_write_r+0x1e>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	b103      	cbz	r3, 800a6f6 <_write_r+0x1e>
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
 800a6f8:	20000f90 	.word	0x20000f90

0800a6fc <__swsetup_r>:
 800a6fc:	4b32      	ldr	r3, [pc, #200]	; (800a7c8 <__swsetup_r+0xcc>)
 800a6fe:	b570      	push	{r4, r5, r6, lr}
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	4606      	mov	r6, r0
 800a704:	460c      	mov	r4, r1
 800a706:	b125      	cbz	r5, 800a712 <__swsetup_r+0x16>
 800a708:	69ab      	ldr	r3, [r5, #24]
 800a70a:	b913      	cbnz	r3, 800a712 <__swsetup_r+0x16>
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7ff f80d 	bl	800972c <__sinit>
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <__swsetup_r+0xd0>)
 800a714:	429c      	cmp	r4, r3
 800a716:	d10f      	bne.n	800a738 <__swsetup_r+0x3c>
 800a718:	686c      	ldr	r4, [r5, #4]
 800a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	0715      	lsls	r5, r2, #28
 800a722:	d42c      	bmi.n	800a77e <__swsetup_r+0x82>
 800a724:	06d0      	lsls	r0, r2, #27
 800a726:	d411      	bmi.n	800a74c <__swsetup_r+0x50>
 800a728:	2209      	movs	r2, #9
 800a72a:	6032      	str	r2, [r6, #0]
 800a72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	f04f 30ff 	mov.w	r0, #4294967295
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	4b25      	ldr	r3, [pc, #148]	; (800a7d0 <__swsetup_r+0xd4>)
 800a73a:	429c      	cmp	r4, r3
 800a73c:	d101      	bne.n	800a742 <__swsetup_r+0x46>
 800a73e:	68ac      	ldr	r4, [r5, #8]
 800a740:	e7eb      	b.n	800a71a <__swsetup_r+0x1e>
 800a742:	4b24      	ldr	r3, [pc, #144]	; (800a7d4 <__swsetup_r+0xd8>)
 800a744:	429c      	cmp	r4, r3
 800a746:	bf08      	it	eq
 800a748:	68ec      	ldreq	r4, [r5, #12]
 800a74a:	e7e6      	b.n	800a71a <__swsetup_r+0x1e>
 800a74c:	0751      	lsls	r1, r2, #29
 800a74e:	d512      	bpl.n	800a776 <__swsetup_r+0x7a>
 800a750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a752:	b141      	cbz	r1, 800a766 <__swsetup_r+0x6a>
 800a754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a758:	4299      	cmp	r1, r3
 800a75a:	d002      	beq.n	800a762 <__swsetup_r+0x66>
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff fa71 	bl	8009c44 <_free_r>
 800a762:	2300      	movs	r3, #0
 800a764:	6363      	str	r3, [r4, #52]	; 0x34
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	2300      	movs	r3, #0
 800a770:	6063      	str	r3, [r4, #4]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f043 0308 	orr.w	r3, r3, #8
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	b94b      	cbnz	r3, 800a796 <__swsetup_r+0x9a>
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a78c:	d003      	beq.n	800a796 <__swsetup_r+0x9a>
 800a78e:	4621      	mov	r1, r4
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff fa03 	bl	8009b9c <__smakebuf_r>
 800a796:	89a2      	ldrh	r2, [r4, #12]
 800a798:	f012 0301 	ands.w	r3, r2, #1
 800a79c:	d00c      	beq.n	800a7b8 <__swsetup_r+0xbc>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60a3      	str	r3, [r4, #8]
 800a7a2:	6963      	ldr	r3, [r4, #20]
 800a7a4:	425b      	negs	r3, r3
 800a7a6:	61a3      	str	r3, [r4, #24]
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	b953      	cbnz	r3, 800a7c2 <__swsetup_r+0xc6>
 800a7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a7b4:	d1ba      	bne.n	800a72c <__swsetup_r+0x30>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	0792      	lsls	r2, r2, #30
 800a7ba:	bf58      	it	pl
 800a7bc:	6963      	ldrpl	r3, [r4, #20]
 800a7be:	60a3      	str	r3, [r4, #8]
 800a7c0:	e7f2      	b.n	800a7a8 <__swsetup_r+0xac>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	e7f7      	b.n	800a7b6 <__swsetup_r+0xba>
 800a7c6:	bf00      	nop
 800a7c8:	200000c8 	.word	0x200000c8
 800a7cc:	0800ac50 	.word	0x0800ac50
 800a7d0:	0800ac70 	.word	0x0800ac70
 800a7d4:	0800ac30 	.word	0x0800ac30

0800a7d8 <_close_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4c06      	ldr	r4, [pc, #24]	; (800a7f4 <_close_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	f7fe f814 	bl	8008810 <_close>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_close_r+0x1a>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_close_r+0x1a>
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20000f90 	.word	0x20000f90

0800a7f8 <__sflush_r>:
 800a7f8:	898a      	ldrh	r2, [r1, #12]
 800a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	0710      	lsls	r0, r2, #28
 800a802:	460c      	mov	r4, r1
 800a804:	d45a      	bmi.n	800a8bc <__sflush_r+0xc4>
 800a806:	684b      	ldr	r3, [r1, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc05      	bgt.n	800a818 <__sflush_r+0x20>
 800a80c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dc02      	bgt.n	800a818 <__sflush_r+0x20>
 800a812:	2000      	movs	r0, #0
 800a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d0f9      	beq.n	800a812 <__sflush_r+0x1a>
 800a81e:	2300      	movs	r3, #0
 800a820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a824:	682f      	ldr	r7, [r5, #0]
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	d033      	beq.n	800a892 <__sflush_r+0x9a>
 800a82a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	075a      	lsls	r2, r3, #29
 800a830:	d505      	bpl.n	800a83e <__sflush_r+0x46>
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	1ac0      	subs	r0, r0, r3
 800a836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a838:	b10b      	cbz	r3, 800a83e <__sflush_r+0x46>
 800a83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a83c:	1ac0      	subs	r0, r0, r3
 800a83e:	2300      	movs	r3, #0
 800a840:	4602      	mov	r2, r0
 800a842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	4628      	mov	r0, r5
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	d106      	bne.n	800a85e <__sflush_r+0x66>
 800a850:	6829      	ldr	r1, [r5, #0]
 800a852:	291d      	cmp	r1, #29
 800a854:	d84b      	bhi.n	800a8ee <__sflush_r+0xf6>
 800a856:	4a2b      	ldr	r2, [pc, #172]	; (800a904 <__sflush_r+0x10c>)
 800a858:	40ca      	lsrs	r2, r1
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d547      	bpl.n	800a8ee <__sflush_r+0xf6>
 800a85e:	2200      	movs	r2, #0
 800a860:	6062      	str	r2, [r4, #4]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	d504      	bpl.n	800a874 <__sflush_r+0x7c>
 800a86a:	1c42      	adds	r2, r0, #1
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0x7a>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b903      	cbnz	r3, 800a874 <__sflush_r+0x7c>
 800a872:	6560      	str	r0, [r4, #84]	; 0x54
 800a874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	2900      	cmp	r1, #0
 800a87a:	d0ca      	beq.n	800a812 <__sflush_r+0x1a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__sflush_r+0x92>
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff f9dd 	bl	8009c44 <_free_r>
 800a88a:	2000      	movs	r0, #0
 800a88c:	6360      	str	r0, [r4, #52]	; 0x34
 800a88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a892:	6a21      	ldr	r1, [r4, #32]
 800a894:	2301      	movs	r3, #1
 800a896:	4628      	mov	r0, r5
 800a898:	47b0      	blx	r6
 800a89a:	1c41      	adds	r1, r0, #1
 800a89c:	d1c6      	bne.n	800a82c <__sflush_r+0x34>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c3      	beq.n	800a82c <__sflush_r+0x34>
 800a8a4:	2b1d      	cmp	r3, #29
 800a8a6:	d001      	beq.n	800a8ac <__sflush_r+0xb4>
 800a8a8:	2b16      	cmp	r3, #22
 800a8aa:	d101      	bne.n	800a8b0 <__sflush_r+0xb8>
 800a8ac:	602f      	str	r7, [r5, #0]
 800a8ae:	e7b0      	b.n	800a812 <__sflush_r+0x1a>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	690f      	ldr	r7, [r1, #16]
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	d0a7      	beq.n	800a812 <__sflush_r+0x1a>
 800a8c2:	0793      	lsls	r3, r2, #30
 800a8c4:	680e      	ldr	r6, [r1, #0]
 800a8c6:	bf08      	it	eq
 800a8c8:	694b      	ldreq	r3, [r1, #20]
 800a8ca:	600f      	str	r7, [r1, #0]
 800a8cc:	bf18      	it	ne
 800a8ce:	2300      	movne	r3, #0
 800a8d0:	eba6 0807 	sub.w	r8, r6, r7
 800a8d4:	608b      	str	r3, [r1, #8]
 800a8d6:	f1b8 0f00 	cmp.w	r8, #0
 800a8da:	dd9a      	ble.n	800a812 <__sflush_r+0x1a>
 800a8dc:	4643      	mov	r3, r8
 800a8de:	463a      	mov	r2, r7
 800a8e0:	6a21      	ldr	r1, [r4, #32]
 800a8e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b0      	blx	r6
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dc07      	bgt.n	800a8fc <__sflush_r+0x104>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fc:	4407      	add	r7, r0
 800a8fe:	eba8 0800 	sub.w	r8, r8, r0
 800a902:	e7e8      	b.n	800a8d6 <__sflush_r+0xde>
 800a904:	20400001 	.word	0x20400001

0800a908 <_fflush_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	690b      	ldr	r3, [r1, #16]
 800a90c:	4605      	mov	r5, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b1db      	cbz	r3, 800a94a <_fflush_r+0x42>
 800a912:	b118      	cbz	r0, 800a91c <_fflush_r+0x14>
 800a914:	6983      	ldr	r3, [r0, #24]
 800a916:	b90b      	cbnz	r3, 800a91c <_fflush_r+0x14>
 800a918:	f7fe ff08 	bl	800972c <__sinit>
 800a91c:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <_fflush_r+0x48>)
 800a91e:	429c      	cmp	r4, r3
 800a920:	d109      	bne.n	800a936 <_fflush_r+0x2e>
 800a922:	686c      	ldr	r4, [r5, #4]
 800a924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a928:	b17b      	cbz	r3, 800a94a <_fflush_r+0x42>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4628      	mov	r0, r5
 800a92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a932:	f7ff bf61 	b.w	800a7f8 <__sflush_r>
 800a936:	4b07      	ldr	r3, [pc, #28]	; (800a954 <_fflush_r+0x4c>)
 800a938:	429c      	cmp	r4, r3
 800a93a:	d101      	bne.n	800a940 <_fflush_r+0x38>
 800a93c:	68ac      	ldr	r4, [r5, #8]
 800a93e:	e7f1      	b.n	800a924 <_fflush_r+0x1c>
 800a940:	4b05      	ldr	r3, [pc, #20]	; (800a958 <_fflush_r+0x50>)
 800a942:	429c      	cmp	r4, r3
 800a944:	bf08      	it	eq
 800a946:	68ec      	ldreq	r4, [r5, #12]
 800a948:	e7ec      	b.n	800a924 <_fflush_r+0x1c>
 800a94a:	2000      	movs	r0, #0
 800a94c:	bd38      	pop	{r3, r4, r5, pc}
 800a94e:	bf00      	nop
 800a950:	0800ac50 	.word	0x0800ac50
 800a954:	0800ac70 	.word	0x0800ac70
 800a958:	0800ac30 	.word	0x0800ac30

0800a95c <fflush>:
 800a95c:	4601      	mov	r1, r0
 800a95e:	b920      	cbnz	r0, 800a96a <fflush+0xe>
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <fflush+0x18>)
 800a962:	4905      	ldr	r1, [pc, #20]	; (800a978 <fflush+0x1c>)
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f7ff b857 	b.w	8009a18 <_fwalk_reent>
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <fflush+0x20>)
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	f7ff bfcb 	b.w	800a908 <_fflush_r>
 800a972:	bf00      	nop
 800a974:	0800ac90 	.word	0x0800ac90
 800a978:	0800a909 	.word	0x0800a909
 800a97c:	200000c8 	.word	0x200000c8

0800a980 <__sflags>:
 800a980:	780b      	ldrb	r3, [r1, #0]
 800a982:	2b72      	cmp	r3, #114	; 0x72
 800a984:	b530      	push	{r4, r5, lr}
 800a986:	d013      	beq.n	800a9b0 <__sflags+0x30>
 800a988:	2b77      	cmp	r3, #119	; 0x77
 800a98a:	d007      	beq.n	800a99c <__sflags+0x1c>
 800a98c:	2b61      	cmp	r3, #97	; 0x61
 800a98e:	d113      	bne.n	800a9b8 <__sflags+0x38>
 800a990:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a994:	2301      	movs	r3, #1
 800a996:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a99a:	e003      	b.n	800a9a4 <__sflags+0x24>
 800a99c:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	2008      	movs	r0, #8
 800a9a4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a9a8:	b955      	cbnz	r5, 800a9c0 <__sflags+0x40>
 800a9aa:	4323      	orrs	r3, r4
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	2400      	movs	r4, #0
 800a9b2:	4623      	mov	r3, r4
 800a9b4:	2004      	movs	r0, #4
 800a9b6:	e7f5      	b.n	800a9a4 <__sflags+0x24>
 800a9b8:	2316      	movs	r3, #22
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	2000      	movs	r0, #0
 800a9be:	bd30      	pop	{r4, r5, pc}
 800a9c0:	2d62      	cmp	r5, #98	; 0x62
 800a9c2:	d00c      	beq.n	800a9de <__sflags+0x5e>
 800a9c4:	2d78      	cmp	r5, #120	; 0x78
 800a9c6:	d00d      	beq.n	800a9e4 <__sflags+0x64>
 800a9c8:	2d2b      	cmp	r5, #43	; 0x2b
 800a9ca:	d1eb      	bne.n	800a9a4 <__sflags+0x24>
 800a9cc:	f020 001c 	bic.w	r0, r0, #28
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	f040 0010 	orr.w	r0, r0, #16
 800a9d8:	f043 0302 	orr.w	r3, r3, #2
 800a9dc:	e7e2      	b.n	800a9a4 <__sflags+0x24>
 800a9de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e2:	e7df      	b.n	800a9a4 <__sflags+0x24>
 800a9e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9e8:	e7dc      	b.n	800a9a4 <__sflags+0x24>
	...

0800a9ec <_fstat_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4c07      	ldr	r4, [pc, #28]	; (800aa0c <_fstat_r+0x20>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	f7fd ff33 	bl	8008864 <_fstat>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d102      	bne.n	800aa08 <_fstat_r+0x1c>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	b103      	cbz	r3, 800aa08 <_fstat_r+0x1c>
 800aa06:	602b      	str	r3, [r5, #0]
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000f90 	.word	0x20000f90

0800aa10 <_isatty_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4c06      	ldr	r4, [pc, #24]	; (800aa2c <_isatty_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4605      	mov	r5, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	f7fd ff5e 	bl	80088dc <_isatty>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_isatty_r+0x1a>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_isatty_r+0x1a>
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20000f90 	.word	0x20000f90

0800aa30 <_lseek_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4c07      	ldr	r4, [pc, #28]	; (800aa50 <_lseek_r+0x20>)
 800aa34:	4605      	mov	r5, r0
 800aa36:	4608      	mov	r0, r1
 800aa38:	4611      	mov	r1, r2
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6022      	str	r2, [r4, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f7fd ff62 	bl	8008908 <_lseek>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_lseek_r+0x1e>
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_lseek_r+0x1e>
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	20000f90 	.word	0x20000f90

0800aa54 <__malloc_lock>:
 800aa54:	4770      	bx	lr

0800aa56 <__malloc_unlock>:
 800aa56:	4770      	bx	lr

0800aa58 <_read_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4c07      	ldr	r4, [pc, #28]	; (800aa78 <_read_r+0x20>)
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4611      	mov	r1, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	6022      	str	r2, [r4, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f7fd ff66 	bl	8008938 <_read>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_read_r+0x1e>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_read_r+0x1e>
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20000f90 	.word	0x20000f90

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
